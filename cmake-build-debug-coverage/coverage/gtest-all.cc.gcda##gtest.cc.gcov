        -:    0:Source:C:/Users/danpo/CLionProjects/untitled3/Test/Google_tests/googletest-main/googletest/src/gtest.cc
        -:    0:Graph:C:\Users\danpo\CLionProjects\untitled3\Test\cmake-build-debug-coverage\Google_tests\googletest-main\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:C:\Users\danpo\CLionProjects\untitled3\Test\cmake-build-debug-coverage\Google_tests\googletest-main\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30://
        -:   31:// The Google C++ Testing and Mocking Framework (Google Test)
        -:   32:
        -:   33:#include "gtest/gtest.h"
        -:   34:
        -:   35:#include <ctype.h>
        -:   36:#include <stdarg.h>
        -:   37:#include <stdio.h>
        -:   38:#include <stdlib.h>
        -:   39:#include <time.h>
        -:   40:#include <wchar.h>
        -:   41:#include <wctype.h>
        -:   42:
        -:   43:#include <algorithm>
        -:   44:#include <chrono>  // NOLINT
        -:   45:#include <cmath>
        -:   46:#include <csignal>  // NOLINT: raise(3) is used on some platforms
        -:   47:#include <cstdint>
        -:   48:#include <cstdlib>
        -:   49:#include <cstring>
        -:   50:#include <initializer_list>
        -:   51:#include <iomanip>
        -:   52:#include <ios>
        -:   53:#include <iostream>
        -:   54:#include <iterator>
        -:   55:#include <limits>
        -:   56:#include <list>
        -:   57:#include <map>
        -:   58:#include <ostream>  // NOLINT
        -:   59:#include <set>
        -:   60:#include <sstream>
        -:   61:#include <unordered_set>
        -:   62:#include <utility>
        -:   63:#include <vector>
        -:   64:
        -:   65:#include "gtest/gtest-assertion-result.h"
        -:   66:#include "gtest/gtest-spi.h"
        -:   67:#include "gtest/internal/custom/gtest.h"
        -:   68:#include "gtest/internal/gtest-port.h"
        -:   69:
        -:   70:#ifdef GTEST_OS_LINUX
        -:   71:
        -:   72:#include <fcntl.h>   // NOLINT
        -:   73:#include <limits.h>  // NOLINT
        -:   74:#include <sched.h>   // NOLINT
        -:   75:// Declares vsnprintf().  This header is not available on Windows.
        -:   76:#include <strings.h>   // NOLINT
        -:   77:#include <sys/mman.h>  // NOLINT
        -:   78:#include <sys/time.h>  // NOLINT
        -:   79:#include <unistd.h>    // NOLINT
        -:   80:
        -:   81:#include <string>
        -:   82:
        -:   83:#elif defined(GTEST_OS_ZOS)
        -:   84:#include <sys/time.h>  // NOLINT
        -:   85:
        -:   86:// On z/OS we additionally need strings.h for strcasecmp.
        -:   87:#include <strings.h>   // NOLINT
        -:   88:
        -:   89:#elif defined(GTEST_OS_WINDOWS_MOBILE)  // We are on Windows CE.
        -:   90:
        -:   91:#include <windows.h>  // NOLINT
        -:   92:#undef min
        -:   93:
        -:   94:#elif defined(GTEST_OS_WINDOWS)  // We are on Windows proper.
        -:   95:
        -:   96:#include <windows.h>  // NOLINT
        -:   97:#undef min
        -:   98:
        -:   99:#ifdef _MSC_VER
        -:  100:#include <crtdbg.h>  // NOLINT
        -:  101:#endif
        -:  102:
        -:  103:#include <io.h>         // NOLINT
        -:  104:#include <sys/stat.h>   // NOLINT
        -:  105:#include <sys/timeb.h>  // NOLINT
        -:  106:#include <sys/types.h>  // NOLINT
        -:  107:
        -:  108:#ifdef GTEST_OS_WINDOWS_MINGW
        -:  109:#include <sys/time.h>  // NOLINT
        -:  110:#endif                 // GTEST_OS_WINDOWS_MINGW
        -:  111:
        -:  112:#else
        -:  113:
        -:  114:// cpplint thinks that the header is already included, so we want to
        -:  115:// silence it.
        -:  116:#include <sys/time.h>  // NOLINT
        -:  117:#include <unistd.h>    // NOLINT
        -:  118:
        -:  119:#endif  // GTEST_OS_LINUX
        -:  120:
        -:  121:#if GTEST_HAS_EXCEPTIONS
        -:  122:#include <stdexcept>
        -:  123:#endif
        -:  124:
        -:  125:#if GTEST_CAN_STREAM_RESULTS_
        -:  126:#include <arpa/inet.h>   // NOLINT
        -:  127:#include <netdb.h>       // NOLINT
        -:  128:#include <sys/socket.h>  // NOLINT
        -:  129:#include <sys/types.h>   // NOLINT
        -:  130:#endif
        -:  131:
        -:  132:#include "src/gtest-internal-inl.h"
        -:  133:
        -:  134:#ifdef GTEST_OS_WINDOWS
        -:  135:#define vsnprintf _vsnprintf
        -:  136:#endif  // GTEST_OS_WINDOWS
        -:  137:
        -:  138:#ifdef GTEST_OS_MAC
        -:  139:#ifndef GTEST_OS_IOS
        -:  140:#include <crt_externs.h>
        -:  141:#endif
        -:  142:#endif
        -:  143:
        -:  144:#ifdef GTEST_HAS_ABSL
        -:  145:#include "absl/container/flat_hash_set.h"
        -:  146:#include "absl/debugging/failure_signal_handler.h"
        -:  147:#include "absl/debugging/stacktrace.h"
        -:  148:#include "absl/debugging/symbolize.h"
        -:  149:#include "absl/flags/parse.h"
        -:  150:#include "absl/flags/usage.h"
        -:  151:#include "absl/strings/str_cat.h"
        -:  152:#include "absl/strings/str_replace.h"
        -:  153:#include "absl/strings/string_view.h"
        -:  154:#include "absl/strings/strip.h"
        -:  155:#endif  // GTEST_HAS_ABSL
        -:  156:
        -:  157:// Checks builtin compiler feature |x| while avoiding an extra layer of #ifdefs
        -:  158:// at the callsite.
        -:  159:#if defined(__has_builtin)
        -:  160:#define GTEST_HAS_BUILTIN(x) __has_builtin(x)
        -:  161:#else
        -:  162:#define GTEST_HAS_BUILTIN(x) 0
        -:  163:#endif  // defined(__has_builtin)
        -:  164:
        -:  165:#if defined(GTEST_HAS_ABSL) && !defined(GTEST_NO_ABSL_FLAGS)
        -:  166:#define GTEST_HAS_ABSL_FLAGS
        -:  167:#endif
        -:  168:
        -:  169:namespace testing {
        -:  170:
        -:  171:using internal::CountIf;
        -:  172:using internal::ForEach;
        -:  173:using internal::GetElementOr;
        -:  174:using internal::Shuffle;
        -:  175:
        -:  176:// Constants.
        -:  177:
        -:  178:// A test whose test suite name or test name matches this filter is
        -:  179:// disabled and not run.
        -:  180:static const char kDisableTestFilter[] = "DISABLED_*:*/DISABLED_*";
        -:  181:
        -:  182:// A test suite whose name matches this filter is considered a death
        -:  183:// test suite and will be run before test suites whose name doesn't
        -:  184:// match this filter.
        -:  185:static const char kDeathTestSuiteFilter[] = "*DeathTest:*DeathTest/*";
        -:  186:
        -:  187:// A test filter that matches everything.
        -:  188:static const char kUniversalFilter[] = "*";
        -:  189:
        -:  190:// The default output format.
        -:  191:static const char kDefaultOutputFormat[] = "xml";
        -:  192:// The default output file.
        -:  193:static const char kDefaultOutputFile[] = "test_detail";
        -:  194:
        -:  195:// The environment variable name for the test shard index.
        -:  196:static const char kTestShardIndex[] = "GTEST_SHARD_INDEX";
        -:  197:// The environment variable name for the total number of test shards.
        -:  198:static const char kTestTotalShards[] = "GTEST_TOTAL_SHARDS";
        -:  199:// The environment variable name for the test shard status file.
        -:  200:static const char kTestShardStatusFile[] = "GTEST_SHARD_STATUS_FILE";
        -:  201:
        -:  202:namespace internal {
        -:  203:
        -:  204:// The text used in failure messages to indicate the start of the
        -:  205:// stack trace.
        -:  206:const char kStackTraceMarker[] = "\nStack trace:\n";
        -:  207:
        -:  208:// g_help_flag is true if and only if the --help flag or an equivalent form
        -:  209:// is specified on the command line.
        -:  210:bool g_help_flag = false;
        -:  211:
        -:  212:#if GTEST_HAS_FILE_SYSTEM
        -:  213:// Utility function to Open File for Writing
function _ZN7testing8internalL18OpenFileForWritingERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  214:static FILE* OpenFileForWriting(const std::string& output_file) {
    #####:  215:  FILE* fileout = nullptr;
    #####:  216:  FilePath output_file_path(output_file);
    %%%%%:  216-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  217:  FilePath output_dir(output_file_path.RemoveFileName());
    %%%%%:  217-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  218:
    #####:  219:  if (output_dir.CreateDirectoriesRecursively()) {
    %%%%%:  219-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  219-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:  220:    fileout = posix::FOpen(output_file.c_str(), "w");
    %%%%%:  220-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  220-block  1
        -:  221:  }
    #####:  222:  if (fileout == nullptr) {
    %%%%%:  222-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  223:    GTEST_LOG_(FATAL) << "Unable to open file \"" << output_file << "\"";
    %%%%%:  223-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  223-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  223-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  223-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  223-block  4
call   13 never executed
    $$$$$:  223-block  5
call   14 never executed
    $$$$$:  223-block  6
        -:  224:  }
    #####:  225:  return fileout;
    %%%%%:  225-block  0
    #####:  226:}
    %%%%%:  226-block  0
call    0 never executed
call    1 never executed
    $$$$$:  226-block  1
call    2 never executed
    $$$$$:  226-block  2
call    3 never executed
        -:  227:#endif  // GTEST_HAS_FILE_SYSTEM
        -:  228:
        -:  229:}  // namespace internal
        -:  230:
        -:  231:// Bazel passes in the argument to '--test_filter' via the TESTBRIDGE_TEST_ONLY
        -:  232:// environment variable.
function _ZN7testingL16GetDefaultFilterEv called 1 returned 100% blocks executed 80%
        1:  233:static const char* GetDefaultFilter() {
        -:  234:  const char* const testbridge_test_only =
        1:  235:      internal::posix::GetEnv("TESTBRIDGE_TEST_ONLY");
        1:  235-block  0
call    0 returned 1
        1:  236:  if (testbridge_test_only != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  237:    return testbridge_test_only;
    %%%%%:  237-block  0
        -:  238:  }
        1:  239:  return kUniversalFilter;
        1:  239-block  0
        -:  240:}
        -:  241:
        -:  242:// Bazel passes in the argument to '--test_runner_fail_fast' via the
        -:  243:// TESTBRIDGE_TEST_RUNNER_FAIL_FAST environment variable.
function _ZN7testingL18GetDefaultFailFastEv called 1 returned 100% blocks executed 80%
        1:  244:static bool GetDefaultFailFast() {
        -:  245:  const char* const testbridge_test_runner_fail_fast =
        1:  246:      internal::posix::GetEnv("TESTBRIDGE_TEST_RUNNER_FAIL_FAST");
        1:  246-block  0
call    0 returned 1
        1:  247:  if (testbridge_test_runner_fail_fast != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  248:    return strcmp(testbridge_test_runner_fail_fast, "1") == 0;
    %%%%%:  248-block  0
        -:  249:  }
        1:  250:  return false;
        1:  250-block  0
        -:  251:}
        -:  252:
        -:  253:}  // namespace testing
        -:  254:
        -:  255:GTEST_DEFINE_bool_(
        -:  256:    fail_fast,
        -:  257:    testing::internal::BoolFromGTestEnv("fail_fast",
        -:  258:                                        testing::GetDefaultFailFast()),
        -:  259:    "True if and only if a test failure should stop further test execution.");
        -:  260:
        -:  261:GTEST_DEFINE_bool_(
        -:  262:    also_run_disabled_tests,
        -:  263:    testing::internal::BoolFromGTestEnv("also_run_disabled_tests", false),
        -:  264:    "Run disabled tests too, in addition to the tests normally being run.");
        -:  265:
        -:  266:GTEST_DEFINE_bool_(
        -:  267:    break_on_failure,
        -:  268:    testing::internal::BoolFromGTestEnv("break_on_failure", false),
        -:  269:    "True if and only if a failed assertion should be a debugger "
        -:  270:    "break-point.");
        -:  271:
        -:  272:GTEST_DEFINE_bool_(catch_exceptions,
        -:  273:                   testing::internal::BoolFromGTestEnv("catch_exceptions",
        -:  274:                                                       true),
        -:  275:                   "True if and only if " GTEST_NAME_
        -:  276:                   " should catch exceptions and treat them as test failures.");
        -:  277:
        -:  278:GTEST_DEFINE_string_(
        -:  279:    color, testing::internal::StringFromGTestEnv("color", "auto"),
        -:  280:    "Whether to use colors in the output.  Valid values: yes, no, "
        -:  281:    "and auto.  'auto' means to use colors if the output is "
        -:  282:    "being sent to a terminal and the TERM environment variable "
        -:  283:    "is set to a terminal type that supports colors.");
        -:  284:
        -:  285:GTEST_DEFINE_string_(
        -:  286:    filter,
        -:  287:    testing::internal::StringFromGTestEnv("filter",
        -:  288:                                          testing::GetDefaultFilter()),
        -:  289:    "A colon-separated list of glob (not regex) patterns "
        -:  290:    "for filtering the tests to run, optionally followed by a "
        -:  291:    "'-' and a : separated list of negative patterns (tests to "
        -:  292:    "exclude).  A test is run if it matches one of the positive "
        -:  293:    "patterns and does not match any of the negative patterns.");
        -:  294:
        -:  295:GTEST_DEFINE_bool_(
        -:  296:    install_failure_signal_handler,
        -:  297:    testing::internal::BoolFromGTestEnv("install_failure_signal_handler",
        -:  298:                                        false),
        -:  299:    "If true and supported on the current platform, " GTEST_NAME_
        -:  300:    " should "
        -:  301:    "install a signal handler that dumps debugging information when fatal "
        -:  302:    "signals are raised.");
        -:  303:
        -:  304:GTEST_DEFINE_bool_(list_tests, false, "List all tests without running them.");
        -:  305:
        -:  306:// The net priority order after flag processing is thus:
        -:  307://   --gtest_output command line flag
        -:  308://   GTEST_OUTPUT environment variable
        -:  309://   XML_OUTPUT_FILE environment variable
        -:  310://   ''
        -:  311:GTEST_DEFINE_string_(
        -:  312:    output,
        -:  313:    testing::internal::StringFromGTestEnv(
        -:  314:        "output", testing::internal::OutputFlagAlsoCheckEnvVar().c_str()),
        -:  315:    "A format (defaults to \"xml\" but can be specified to be \"json\"), "
        -:  316:    "optionally followed by a colon and an output file name or directory. "
        -:  317:    "A directory is indicated by a trailing pathname separator. "
        -:  318:    "Examples: \"xml:filename.xml\", \"xml::directoryname/\". "
        -:  319:    "If a directory is specified, output files will be created "
        -:  320:    "within that directory, with file-names based on the test "
        -:  321:    "executable's name and, if necessary, made unique by adding "
        -:  322:    "digits.");
        -:  323:
        -:  324:GTEST_DEFINE_bool_(
        -:  325:    brief, testing::internal::BoolFromGTestEnv("brief", false),
        -:  326:    "True if only test failures should be displayed in text output.");
        -:  327:
        -:  328:GTEST_DEFINE_bool_(print_time,
        -:  329:                   testing::internal::BoolFromGTestEnv("print_time", true),
        -:  330:                   "True if and only if " GTEST_NAME_
        -:  331:                   " should display elapsed time in text output.");
        -:  332:
        -:  333:GTEST_DEFINE_bool_(print_utf8,
        -:  334:                   testing::internal::BoolFromGTestEnv("print_utf8", true),
        -:  335:                   "True if and only if " GTEST_NAME_
        -:  336:                   " prints UTF8 characters as text.");
        -:  337:
        -:  338:GTEST_DEFINE_int32_(
        -:  339:    random_seed, testing::internal::Int32FromGTestEnv("random_seed", 0),
        -:  340:    "Random number seed to use when shuffling test orders.  Must be in range "
        -:  341:    "[1, 99999], or 0 to use a seed based on the current time.");
        -:  342:
        -:  343:GTEST_DEFINE_int32_(
        -:  344:    repeat, testing::internal::Int32FromGTestEnv("repeat", 1),
        -:  345:    "How many times to repeat each test.  Specify a negative number "
        -:  346:    "for repeating forever.  Useful for shaking out flaky tests.");
        -:  347:
        -:  348:GTEST_DEFINE_bool_(
        -:  349:    recreate_environments_when_repeating,
        -:  350:    testing::internal::BoolFromGTestEnv("recreate_environments_when_repeating",
        -:  351:                                        false),
        -:  352:    "Controls whether global test environments are recreated for each repeat "
        -:  353:    "of the tests. If set to false the global test environments are only set "
        -:  354:    "up once, for the first iteration, and only torn down once, for the last. "
        -:  355:    "Useful for shaking out flaky tests with stable, expensive test "
        -:  356:    "environments. If --gtest_repeat is set to a negative number, meaning "
        -:  357:    "there is no last run, the environments will always be recreated to avoid "
        -:  358:    "leaks.");
        -:  359:
        -:  360:GTEST_DEFINE_bool_(show_internal_stack_frames, false,
        -:  361:                   "True if and only if " GTEST_NAME_
        -:  362:                   " should include internal stack frames when "
        -:  363:                   "printing test failure stack traces.");
        -:  364:
        -:  365:GTEST_DEFINE_bool_(shuffle,
        -:  366:                   testing::internal::BoolFromGTestEnv("shuffle", false),
        -:  367:                   "True if and only if " GTEST_NAME_
        -:  368:                   " should randomize tests' order on every run.");
        -:  369:
        -:  370:GTEST_DEFINE_int32_(
        -:  371:    stack_trace_depth,
        -:  372:    testing::internal::Int32FromGTestEnv("stack_trace_depth",
        -:  373:                                         testing::kMaxStackTraceDepth),
        -:  374:    "The maximum number of stack frames to print when an "
        -:  375:    "assertion fails.  The valid range is 0 through 100, inclusive.");
        -:  376:
        -:  377:GTEST_DEFINE_string_(
        -:  378:    stream_result_to,
        -:  379:    testing::internal::StringFromGTestEnv("stream_result_to", ""),
        -:  380:    "This flag specifies the host name and the port number on which to stream "
        -:  381:    "test results. Example: \"localhost:555\". The flag is effective only on "
        -:  382:    "Linux.");
        -:  383:
        -:  384:GTEST_DEFINE_bool_(
        -:  385:    throw_on_failure,
        -:  386:    testing::internal::BoolFromGTestEnv("throw_on_failure", false),
        -:  387:    "When this flag is specified, a failed assertion will throw an exception "
        -:  388:    "if exceptions are enabled or exit the program with a non-zero code "
        -:  389:    "otherwise. For use with an external test framework.");
        -:  390:
        -:  391:#if GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  392:GTEST_DEFINE_string_(
        -:  393:    flagfile, testing::internal::StringFromGTestEnv("flagfile", ""),
        -:  394:    "This flag specifies the flagfile to read command-line flags from.");
        -:  395:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  396:
        -:  397:namespace testing {
        -:  398:namespace internal {
        -:  399:
        -:  400:const uint32_t Random::kMaxRange;
        -:  401:
        -:  402:// Generates a random number from [0, range), using a Linear
        -:  403:// Congruential Generator (LCG).  Crashes if 'range' is 0 or greater
        -:  404:// than kMaxRange.
function _ZN7testing8internal6Random8GenerateEj called 0 returned 0% blocks executed 0%
    #####:  405:uint32_t Random::Generate(uint32_t range) {
        -:  406:  // These constants are the same as are used in glibc's rand(3).
        -:  407:  // Use wider types than necessary to prevent unsigned overflow diagnostics.
    #####:  408:  state_ = static_cast<uint32_t>(1103515245ULL * state_ + 12345U) % kMaxRange;
        -:  409:
    #####:  410:  GTEST_CHECK_(range > 0) << "Cannot generate a number in the range [0, 0).";
    %%%%%:  410-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  410-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  410-block  2
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  410-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  410-block  4
call   13 never executed
    $$$$$:  410-block  5
call   14 never executed
    $$$$$:  410-block  6
call   15 never executed
    #####:  411:  GTEST_CHECK_(range <= kMaxRange)
    %%%%%:  411-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  411-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  411-block  2
call    6 never executed
    %%%%%:  411-block  3
call    7 never executed
    $$$$$:  411-block  4
call    8 never executed
    #####:  412:      << "Generation of a number in [0, " << range << ") was requested, "
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  412-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  412-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####:  413:      << "but this can only generate numbers in [0, " << kMaxRange << ").";
    %%%%%:  413-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  413-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  413-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  413-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
        -:  414:
        -:  415:  // Converting via modulus introduces a bit of downward bias, but
        -:  416:  // it's simple, and a linear congruential generator isn't too good
        -:  417:  // to begin with.
    #####:  418:  return state_ % range;
    %%%%%:  418-block  0
    %%%%%:  418-block  1
        -:  419:}
        -:  420:
        -:  421:// GTestIsInitialized() returns true if and only if the user has initialized
        -:  422:// Google Test.  Useful for catching the user mistake of not initializing
        -:  423:// Google Test before calling RUN_ALL_TESTS().
function _ZN7testing8internalL18GTestIsInitializedEv called 2 returned 100% blocks executed 100%
        2:  424:static bool GTestIsInitialized() { return !GetArgvs().empty(); }
        2:  424-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  424-block  1
call    3 returned 2
        2:  424-block  2
call    4 returned 2
        2:  424-block  3
        -:  425:
        -:  426:// Iterates over a vector of TestSuites, keeping a running sum of the
        -:  427:// results of calling a given int-returning method on each.
        -:  428:// Returns the sum.
function _ZN7testing8internalL20SumOverTestSuiteListERKSt6vectorIPNS_9TestSuiteESaIS3_EEMS2_KFivE called 6 returned 100% blocks executed 91%
        6:  429:static int SumOverTestSuiteList(const std::vector<TestSuite*>& case_list,
        -:  430:                                int (TestSuite::*method)() const) {
        6:  431:  int sum = 0;
       66:  432:  for (size_t i = 0; i < case_list.size(); i++) {
        6:  432-block  0
       66:  432-block  1
call    0 returned 66
branch  1 taken 60
branch  2 taken 6 (fallthrough)
      60*:  433:    sum += (case_list[i]->*method)();
       60:  433-block  0
call    0 returned 60
branch  1 taken 0 (fallthrough)
branch  2 taken 60
    %%%%%:  433-block  1
       60:  433-block  2
       60:  433-block  3
call    3 returned 60
        -:  434:  }
        6:  435:  return sum;
        6:  435-block  0
        -:  436:}
        -:  437:
        -:  438:// Returns true if and only if the test suite passed.
function _ZN7testing8internalL15TestSuitePassedEPKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####:  439:static bool TestSuitePassed(const TestSuite* test_suite) {
    #####:  440:  return test_suite->should_run() && test_suite->Passed();
    %%%%%:  440-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  440-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  440-block  2
    %%%%%:  440-block  3
    %%%%%:  440-block  4
        -:  441:}
        -:  442:
        -:  443:// Returns true if and only if the test suite failed.
function _ZN7testing8internalL15TestSuiteFailedEPKNS_9TestSuiteE called 20 returned 100% blocks executed 100%
       20:  444:static bool TestSuiteFailed(const TestSuite* test_suite) {
       20:  445:  return test_suite->should_run() && test_suite->Failed();
       20:  445-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0
       20:  445-block  1
call    3 returned 20
branch  4 taken 4 (fallthrough)
branch  5 taken 16
        4:  445-block  2
       16:  445-block  3
       20:  445-block  4
        -:  446:}
        -:  447:
        -:  448:// Returns true if and only if test_suite contains at least one test that
        -:  449:// should run.
function _ZN7testing8internalL18ShouldRunTestSuiteEPKNS_9TestSuiteE called 20 returned 100% blocks executed 100%
       20:  450:static bool ShouldRunTestSuite(const TestSuite* test_suite) {
       20:  451:  return test_suite->should_run();
       20:  451-block  0
call    0 returned 20
        -:  452:}
        -:  453:
        -:  454:namespace {
        -:  455:
        -:  456:// Returns true if test part results of type `type` should include a stack
        -:  457:// trace.
function _ZN7testing8internal12_GLOBAL__N_133ShouldEmitStackTraceForResultTypeENS_14TestPartResult4TypeE called 7 returned 100% blocks executed 83%
        7:  458:bool ShouldEmitStackTraceForResultType(TestPartResult::Type type) {
        -:  459:  // Suppress emission of the stack trace for SUCCEED() since it likely never
        -:  460:  // requires investigation, and GTEST_SKIP() since skipping is an intentional
        -:  461:  // act by the developer rather than a failure requiring investigation.
       7*:  462:  return type != TestPartResult::kSuccess && type != TestPartResult::kSkip;
        7:  462-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:  462-block  1
branch  2 taken 7 (fallthrough)
branch  3 taken 0
        7:  462-block  2
    %%%%%:  462-block  3
        7:  462-block  4
        -:  463:}
        -:  464:
        -:  465:}  // namespace
        -:  466:
        -:  467:// AssertHelper constructor.
function _ZN7testing8internal12AssertHelperC2ENS_14TestPartResult4TypeEPKciS5_ called 7 returned 100% blocks executed 67%
        7:  468:AssertHelper::AssertHelper(TestPartResult::Type type, const char* file,
        7:  469:                           int line, const char* message)
        7:  470:    : data_(new AssertHelperData(type, file, line, message)) {}
        7:  470-block  0
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0 (throw)
        7:  470-block  1
    $$$$$:  470-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    $$$$$:  470-block  3
call    6 never executed
        -:  471:
function _ZN7testing8internal12AssertHelperD2Ev called 7 returned 100% blocks executed 100%
        7:  472:AssertHelper::~AssertHelper() { delete data_; }
        7:  472-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:  472-block  1
call    2 returned 7
call    3 returned 7
        -:  473:
        -:  474:// Message assignment, for assertion streaming support.
function _ZNK7testing8internal12AssertHelperaSERKNS_7MessageE called 7 returned 100% blocks executed 46%
        7:  475:void AssertHelper::operator=(const Message& message) const {
        7:  476:  UnitTest::GetInstance()->AddTestPartResult(
        7:  476-block  0
call    0 returned 7
        7:  477:      data_->type, data_->file, data_->line,
        7:  477-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
       14:  478:      AppendUserMessage(data_->message, message),
        7:  478-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  478-block  1
call    3 returned 7
    $$$$$:  478-block  2
call    4 never executed
    $$$$$:  478-block  3
        7:  479:      ShouldEmitStackTraceForResultType(data_->type)
call    0 returned 7
      14*:  480:          ? UnitTest::GetInstance()->impl()->CurrentOsStackTraceExceptTop(1)
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:  480-block  0
call    2 returned 7
branch  3 taken 7 (fallthrough)
branch  4 taken 0 (throw)
        7:  480-block  1
call    5 returned 7
call    6 returned 7
branch  7 taken 7 (fallthrough)
branch  8 taken 0 (throw)
    %%%%%:  480-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
call   12 returned 7
branch 13 taken 0 (fallthrough)
branch 14 taken 7
    $$$$$:  480-block  3
call   15 never executed
    $$$$$:  480-block  4
branch 16 never executed (fallthrough)
branch 17 never executed
    $$$$$:  480-block  5
        -:  481:          : ""
        -:  482:      // Skips the stack frame for this function itself.
        -:  483:  );  // NOLINT
        7:  484:}
        7:  484-block  0
        -:  485:
        -:  486:namespace {
        -:  487:
        -:  488:// When TEST_P is found without a matching INSTANTIATE_TEST_SUITE_P
        -:  489:// to creates test cases for it, a synthetic test case is
        -:  490:// inserted to report ether an error or a log message.
        -:  491://
        -:  492:// This configuration bit will likely be removed at some point.
        -:  493:constexpr bool kErrorOnUninstantiatedParameterizedTest = true;
        -:  494:constexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;
        -:  495:
        -:  496:// A test that fails at a given file/line location with a given message.
        -:  497:class FailureTest : public Test {
        -:  498: public:
function _ZN7testing8internal12_GLOBAL__N_111FailureTestC2ERKNS0_12CodeLocationENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####:  499:  explicit FailureTest(const CodeLocation& loc, std::string error_message,
        -:  500:                       bool as_error)
    #####:  501:      : loc_(loc),
    #####:  502:        error_message_(std::move(error_message)),
    %%%%%:  502-block  0
call    0 never executed
call    1 never executed
    #####:  503:        as_error_(as_error) {}
    %%%%%:  503-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$:  503-block  1
call    4 never executed
        -:  504:
function _ZN7testing8internal12_GLOBAL__N_111FailureTest8TestBodyEv called 0 returned 0% blocks executed 0%
    #####:  505:  void TestBody() override {
    #####:  506:    if (as_error_) {
    %%%%%:  506-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  507:      AssertHelper(TestPartResult::kNonFatalFailure, loc_.file.c_str(),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  507-block  0
call    3 never executed
    $$$$$:  507-block  1
call    4 never executed
    $$$$$:  507-block  2
    #####:  508:                   loc_.line, "") = Message() << error_message_;
    %%%%%:  508-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  508-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  508-block  2
call    6 never executed
    %%%%%:  508-block  3
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
call   10 never executed
    $$$$$:  508-block  4
call   11 never executed
        -:  509:    } else {
    #####:  510:      std::cout << error_message_ << std::endl;
    %%%%%:  510-block  0
call    0 never executed
call    1 never executed
        -:  511:    }
    #####:  512:  }
    %%%%%:  512-block  0
        -:  513:
        -:  514: private:
        -:  515:  const CodeLocation loc_;
        -:  516:  const std::string error_message_;
        -:  517:  const bool as_error_;
        -:  518:};
        -:  519:
        -:  520:}  // namespace
        -:  521:
function _ZN7testing8internal33GetIgnoredParameterizedTestSuitesB5cxx11Ev called 1 returned 100% blocks executed 100%
        1:  522:std::set<std::string>* GetIgnoredParameterizedTestSuites() {
        1:  523:  return UnitTest::GetInstance()->impl()->ignored_parameterized_test_suites();
        1:  523-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -:  524:}
        -:  525:
        -:  526:// Add a given test_suit to the list of them allow to go un-instantiated.
function _ZN7testing8internal13MarkAsIgnoredC2EPKc called 0 returned 0% blocks executed 0%
    #####:  527:MarkAsIgnored::MarkAsIgnored(const char* test_suite) {
    #####:  528:  GetIgnoredParameterizedTestSuites()->insert(test_suite);
    %%%%%:  528-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  528-block  1
    %%%%%:  528-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  528-block  3
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  528-block  4
call    9 never executed
    $$$$$:  528-block  5
call   10 never executed
    $$$$$:  528-block  6
    $$$$$:  528-block  7
    #####:  529:}
    %%%%%:  529-block  0
        -:  530:
        -:  531:// If this parameterized test suite has no instantiations (and that
        -:  532:// has not been marked as okay), emit a test case reporting that.
function _ZN7testing8internal23InsertSyntheticTestCaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_12CodeLocationEb called 0 returned 0% blocks executed 0%
    #####:  533:void InsertSyntheticTestCase(const std::string& name, CodeLocation location,
        -:  534:                             bool has_test_p) {
    #####:  535:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
    %%%%%:  535-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  536:  if (ignored.find(name) != ignored.end()) return;
    %%%%%:  536-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  536-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  536-block  2
    %%%%%:  536-block  3
    $$$$$:  536-block  4
    $$$$$:  536-block  5
        -:  537:
    #####:  538:  const char kMissingInstantiation[] =  //
        -:  539:      " is defined via TEST_P, but never instantiated. None of the test "
        -:  540:      "cases "
        -:  541:      "will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only "
        -:  542:      "ones provided expand to nothing."
        -:  543:      "\n\n"
        -:  544:      "Ideally, TEST_P definitions should only ever be included as part of "
        -:  545:      "binaries that intend to use them. (As opposed to, for example, being "
        -:  546:      "placed in a library that may be linked in to get other utilities.)";
        -:  547:
    #####:  548:  const char kMissingTestCase[] =  //
        -:  549:      " is instantiated via INSTANTIATE_TEST_SUITE_P, but no tests are "
        -:  550:      "defined via TEST_P . No test cases will run."
        -:  551:      "\n\n"
        -:  552:      "Ideally, INSTANTIATE_TEST_SUITE_P should only ever be invoked from "
        -:  553:      "code that always depend on code that provides TEST_P. Failing to do "
        -:  554:      "so is often an indication of dead code, e.g. the last TEST_P was "
        -:  555:      "removed but the rest got left behind.";
        -:  556:
        -:  557:  std::string message =
    #####:  558:      "Parameterized test suite " + name +
    %%%%%:  558-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  558-block  1
    %%%%%:  558-block  2
    %%%%%:  558-block  3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  558-block  4
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
call    8 never executed
call    9 never executed
    $$$$$:  558-block  5
call   10 never executed
    $$$$$:  558-block  6
call   11 never executed
    $$$$$:  558-block  7
    $$$$$:  558-block  8
    #####:  559:      (has_test_p ? kMissingInstantiation : kMissingTestCase) +
    %%%%%:  559-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$:  559-block  1
call    4 never executed
    $$$$$:  559-block  2
        -:  560:      "\n\n"
        -:  561:      "To suppress this error for this test suite, insert the following line "
        -:  562:      "(in a non-header) in the namespace it is defined in:"
        -:  563:      "\n\n"
    #####:  564:      "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" +
    %%%%%:  564-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  564-block  1
call    3 never executed
    $$$$$:  564-block  2
call    4 never executed
    $$$$$:  564-block  3
    #####:  565:      name + ");";
    %%%%%:  565-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  566:
    #####:  567:  std::string full_name = "UninstantiatedParameterizedTestSuite<" + name + ">";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  567-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  567-block  1
call    6 never executed
    $$$$$:  567-block  2
call    7 never executed
    $$$$$:  567-block  3
    #####:  568:  RegisterTest(  //
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -:  569:      "GoogleTestVerification", full_name.c_str(),
        -:  570:      nullptr,  // No type parameter.
        -:  571:      nullptr,  // No value parameter.
function _ZZN7testing8internal23InsertSyntheticTestCaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_12CodeLocationEbENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  572:      location.file.c_str(), location.line, [message, location] {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  572-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  572-block  1
call    6 never executed
    %%%%%:  572-block  2
call    7 never executed
    $$$$$:  572-block  3
call    8 never executed
    $$$$$:  572-block  4
branch  9 never executed (fallthrough)
branch 10 never executed
    $$$$$:  572-block  5
call   11 never executed
    $$$$$:  572-block  6
    #####:  573:        return new FailureTest(location, message,
    #####:  574:                               kErrorOnUninstantiatedParameterizedTest);
    %%%%%:  574-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  574-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  574-block  2
    %%%%%:  574-block  3
call    7 never executed
    %%%%%:  574-block  4
    $$$$$:  574-block  5
call    8 never executed
    $$$$$:  574-block  6
    $$$$$:  574-block  7
branch  9 never executed (fallthrough)
branch 10 never executed
    $$$$$:  574-block  8
call   11 never executed
        -:  575:      });
    #####:  576:}
call    0 never executed
call    1 never executed
    $$$$$:  576-block  0
call    2 never executed
    $$$$$:  576-block  1
call    3 never executed
        -:  577:
function _ZN7testing8internal34RegisterTypeParameterizedTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  578:void RegisterTypeParameterizedTestSuite(const char* test_suite_name,
        -:  579:                                        CodeLocation code_location) {
    #####:  580:  GetUnitTestImpl()->type_parameterized_test_registry().RegisterTestSuite(
    %%%%%:  580-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  580-block  1
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%:  580-block  2
call    8 never executed
    $$$$$:  580-block  3
call    9 never executed
        -:  581:      test_suite_name, code_location);
    #####:  582:}
        -:  583:
function _ZN7testing8internal47RegisterTypeParameterizedTestSuiteInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  584:void RegisterTypeParameterizedTestSuiteInstantiation(const char* case_name) {
    #####:  585:  GetUnitTestImpl()->type_parameterized_test_registry().RegisterInstantiation(
    %%%%%:  585-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:  586:      case_name);
    #####:  587:}
        -:  588:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry17RegisterTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  589:void TypeParameterizedTestSuiteRegistry::RegisterTestSuite(
        -:  590:    const char* test_suite_name, CodeLocation code_location) {
    #####:  591:  suites_.emplace(std::string(test_suite_name),
    %%%%%:  591-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  591-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  591-block  2
call    6 never executed
    $$$$$:  591-block  3
call    7 never executed
    $$$$$:  591-block  4
    $$$$$:  591-block  5
    #####:  592:                  TypeParameterizedTestSuiteInfo(code_location));
    %%%%%:  592-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  592-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  592-block  2
call    6 never executed
call    7 never executed
    $$$$$:  592-block  3
call    8 never executed
    $$$$$:  592-block  4
call    9 never executed
    $$$$$:  592-block  5
    $$$$$:  592-block  6
    #####:  593:}
        -:  594:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry21RegisterInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  595:void TypeParameterizedTestSuiteRegistry::RegisterInstantiation(
        -:  596:    const char* test_suite_name) {
    #####:  597:  auto it = suites_.find(std::string(test_suite_name));
    %%%%%:  597-block  0
    %%%%%:  597-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  597-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  597-block  3
call    6 never executed
    $$$$$:  597-block  4
call    7 never executed
    $$$$$:  597-block  5
    $$$$$:  597-block  6
    #####:  598:  if (it != suites_.end()) {
    %%%%%:  598-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  599:    it->second.instantiated = true;
    %%%%%:  599-block  0
call    0 never executed
        -:  600:  } else {
    #####:  601:    GTEST_LOG_(ERROR) << "Unknown type parameterized test suit '"
    %%%%%:  601-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  601-block  1
call    3 never executed
    %%%%%:  601-block  2
call    4 never executed
    $$$$$:  601-block  3
call    5 never executed
    $$$$$:  601-block  4
    #####:  602:                      << test_suite_name << "'";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  602-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  602-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -:  603:  }
    #####:  604:}
    %%%%%:  604-block  0
        -:  605:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry22CheckForInstantiationsEv called 1 returned 100% blocks executed 11%
        1:  606:void TypeParameterizedTestSuiteRegistry::CheckForInstantiations() {
        1:  607:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
        1:  607-block  0
call    0 returned 1
       1*:  608:  for (const auto& testcase : suites_) {
call    0 returned 1
call    1 returned 1
    %%%%%:  608-block  0
call    2 never executed
    %%%%%:  608-block  1
call    3 never executed
        1:  608-block  2
call    4 returned 1
branch  5 taken 0
branch  6 taken 1 (fallthrough)
    #####:  609:    if (testcase.second.instantiated) continue;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  609-block  0
    %%%%%:  609-block  1
    #####:  610:    if (ignored.find(testcase.first) != ignored.end()) continue;
    %%%%%:  610-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  610-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  610-block  2
    $$$$$:  610-block  3
    $$$$$:  610-block  4
        -:  611:
        -:  612:    std::string message =
    #####:  613:        "Type parameterized test suite " + testcase.first +
    %%%%%:  613-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
call    4 never executed
    $$$$$:  613-block  1
call    5 never executed
    $$$$$:  613-block  2
call    6 never executed
    $$$$$:  613-block  3
    $$$$$:  613-block  4
        -:  614:        " is defined via REGISTER_TYPED_TEST_SUITE_P, but never instantiated "
        -:  615:        "via INSTANTIATE_TYPED_TEST_SUITE_P. None of the test cases will run."
        -:  616:        "\n\n"
        -:  617:        "Ideally, TYPED_TEST_P definitions should only ever be included as "
        -:  618:        "part of binaries that intend to use them. (As opposed to, for "
        -:  619:        "example, being placed in a library that may be linked in to get "
        -:  620:        "other "
        -:  621:        "utilities.)"
        -:  622:        "\n\n"
        -:  623:        "To suppress this error for this test suite, insert the following "
        -:  624:        "line "
        -:  625:        "(in a non-header) in the namespace it is defined in:"
        -:  626:        "\n\n"
    #####:  627:        "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" +
    %%%%%:  627-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  627-block  1
call    3 never executed
    $$$$$:  627-block  2
call    4 never executed
    $$$$$:  627-block  3
    #####:  628:        testcase.first + ");";
    %%%%%:  628-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  628-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -:  629:
        -:  630:    std::string full_name =
    #####:  631:        "UninstantiatedTypeParameterizedTestSuite<" + testcase.first + ">";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  631-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  631-block  1
call    6 never executed
    $$$$$:  631-block  2
call    7 never executed
    $$$$$:  631-block  3
    #####:  632:    RegisterTest(  //
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -:  633:        "GoogleTestVerification", full_name.c_str(),
        -:  634:        nullptr,  // No type parameter.
        -:  635:        nullptr,  // No value parameter.
        -:  636:        testcase.second.code_location.file.c_str(),
function _ZZN7testing8internal34TypeParameterizedTestSuiteRegistry22CheckForInstantiationsEvENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  637:        testcase.second.code_location.line, [message, testcase] {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  637-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  637-block  1
call    6 never executed
    %%%%%:  637-block  2
call    7 never executed
    $$$$$:  637-block  3
call    8 never executed
    $$$$$:  637-block  4
branch  9 never executed (fallthrough)
branch 10 never executed
    $$$$$:  637-block  5
call   11 never executed
    $$$$$:  637-block  6
    #####:  638:          return new FailureTest(testcase.second.code_location, message,
    #####:  639:                                 kErrorOnUninstantiatedTypeParameterizedTest);
    %%%%%:  639-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  639-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  639-block  2
    %%%%%:  639-block  3
call    7 never executed
    %%%%%:  639-block  4
    $$$$$:  639-block  5
call    8 never executed
    $$$$$:  639-block  6
    $$$$$:  639-block  7
branch  9 never executed (fallthrough)
branch 10 never executed
    $$$$$:  639-block  8
call   11 never executed
        -:  640:        });
    #####:  641:  }
call    0 never executed
call    1 never executed
    $$$$$:  641-block  0
call    2 never executed
    $$$$$:  641-block  1
call    3 never executed
        1:  642:}
        1:  642-block  0
        -:  643:
        -:  644:// A copy of all command line arguments.  Set by InitGoogleTest().
        -:  645:static ::std::vector<std::string> g_argvs;
        -:  646:
function _ZN7testing8internal8GetArgvsB5cxx11Ev called 2 returned 100% blocks executed 100%
        2:  647:::std::vector<std::string> GetArgvs() {
        -:  648:#if defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  649:  // GTEST_CUSTOM_GET_ARGVS_() may return a container of std::string or
        -:  650:  // ::string. This code converts it to the appropriate type.
        -:  651:  const auto& custom = GTEST_CUSTOM_GET_ARGVS_();
        -:  652:  return ::std::vector<std::string>(custom.begin(), custom.end());
        -:  653:#else   // defined(GTEST_CUSTOM_GET_ARGVS_)
        2:  654:  return g_argvs;
        2:  654-block  0
call    0 returned 2
        -:  655:#endif  // defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  656:}
        -:  657:
        -:  658:#if GTEST_HAS_FILE_SYSTEM
        -:  659:// Returns the current application's name, removing directory path if that
        -:  660:// is present.
function _ZN7testing8internal24GetCurrentExecutableNameEv called 0 returned 0% blocks executed 0%
    #####:  661:FilePath GetCurrentExecutableName() {
    #####:  662:  FilePath result;
    %%%%%:  662-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  663:
        -:  664:#if defined(GTEST_OS_WINDOWS) || defined(GTEST_OS_OS2)
    #####:  665:  result.Set(FilePath(GetArgvs()[0]).RemoveExtension("exe"));
    %%%%%:  665-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  665-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  665-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  665-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  665-block  4
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$:  665-block  5
call   16 never executed
    $$$$$:  665-block  6
call   17 never executed
    $$$$$:  665-block  7
call   18 never executed
    $$$$$:  665-block  8
    $$$$$:  665-block  9
    $$$$$:  665-block 10
        -:  666:#else
        -:  667:  result.Set(FilePath(GetArgvs()[0]));
        -:  668:#endif  // GTEST_OS_WINDOWS
        -:  669:
    #####:  670:  return result.RemoveDirectoryName();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  670-block  0
    #####:  671:}
    %%%%%:  671-block  0
call    0 never executed
    $$$$$:  671-block  1
call    1 never executed
        -:  672:#endif  // GTEST_HAS_FILE_SYSTEM
        -:  673:
        -:  674:// Functions for processing the gtest_output flag.
        -:  675:
        -:  676:// Returns the output format, or "" for normal printed output.
function _ZN7testing8internal15UnitTestOptions15GetOutputFormatB5cxx11Ev called 1 returned 100% blocks executed 45%
        1:  677:std::string UnitTestOptions::GetOutputFormat() {
        1:  678:  std::string s = GTEST_FLAG_GET(output);
        1:  678-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  679:  const char* const gtest_output_flag = s.c_str();
        1:  679-block  0
call    0 returned 1
        1:  680:  const char* const colon = strchr(gtest_output_flag, ':');
        -:  681:  return (colon == nullptr)
        1:  682:             ? std::string(gtest_output_flag)
        -:  683:             : std::string(gtest_output_flag,
       3*:  684:                           static_cast<size_t>(colon - gtest_output_flag));
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  684-block  0
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
    %%%%%:  684-block  1
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
        1:  684-block  2
branch  8 taken 0 (fallthrough)
branch  9 taken 1
        1:  684-block  3
branch 10 taken 1 (fallthrough)
branch 11 taken 0
        1:  684-block  4
    $$$$$:  684-block  5
branch 12 never executed (fallthrough)
branch 13 never executed
    $$$$$:  684-block  6
    $$$$$:  684-block  7
branch 14 never executed (fallthrough)
branch 15 never executed
    $$$$$:  684-block  8
        1:  685:}
        1:  685-block  0
call    0 returned 1
    $$$$$:  685-block  1
call    1 never executed
        -:  686:
        -:  687:#if GTEST_HAS_FILE_SYSTEM
        -:  688:// Returns the name of the requested output file, or the default if none
        -:  689:// was explicitly specified.
function _ZN7testing8internal15UnitTestOptions27GetAbsolutePathToOutputFileB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  690:std::string UnitTestOptions::GetAbsolutePathToOutputFile() {
    #####:  691:  std::string s = GTEST_FLAG_GET(output);
    %%%%%:  691-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  692:  const char* const gtest_output_flag = s.c_str();
    %%%%%:  692-block  0
call    0 never executed
        -:  693:
    #####:  694:  std::string format = GetOutputFormat();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  695:  if (format.empty()) format = std::string(kDefaultOutputFormat);
    %%%%%:  695-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  695-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  695-block  2
call    6 never executed
call    7 never executed
    %%%%%:  695-block  3
    $$$$$:  695-block  4
    $$$$$:  695-block  5
        -:  696:
    #####:  697:  const char* const colon = strchr(gtest_output_flag, ':');
    #####:  698:  if (colon == nullptr)
    %%%%%:  698-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  699:    return internal::FilePath::MakeFileName(
    %%%%%:  699-block  0
call    0 never executed
    %%%%%:  699-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  699-block  2
call    4 never executed
    $$$$$:  699-block  3
call    5 never executed
    $$$$$:  699-block  4
    #####:  700:               internal::FilePath(
    %%%%%:  700-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  700-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  700-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
call   10 never executed
call   11 never executed
    $$$$$:  700-block  3
call   12 never executed
    $$$$$:  700-block  4
call   13 never executed
    $$$$$:  700-block  5
    $$$$$:  700-block  6
    $$$$$:  700-block  7
        -:  701:                   UnitTest::GetInstance()->original_working_dir()),
    #####:  702:               internal::FilePath(kDefaultOutputFile), 0, format.c_str())
    %%%%%:  702-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  702-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  702-block  2
call    6 never executed
call    7 never executed
    %%%%%:  702-block  3
    $$$$$:  702-block  4
call    8 never executed
    $$$$$:  702-block  5
call    9 never executed
    $$$$$:  702-block  6
    $$$$$:  702-block  7
    $$$$$:  702-block  8
    #####:  703:        .string();
    %%%%%:  703-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  703-block  1
        -:  704:
    #####:  705:  internal::FilePath output_name(colon + 1);
    %%%%%:  705-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  705-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  705-block  2
call    6 never executed
    $$$$$:  705-block  3
call    7 never executed
    $$$$$:  705-block  4
    $$$$$:  705-block  5
    #####:  706:  if (!output_name.IsAbsolutePath())
    %%%%%:  706-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  707:    output_name = internal::FilePath::ConcatPaths(
    %%%%%:  707-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  707-block  1
call    3 never executed
    $$$$$:  707-block  2
call    4 never executed
    $$$$$:  707-block  3
    #####:  708:        internal::FilePath(UnitTest::GetInstance()->original_working_dir()),
    %%%%%:  708-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  708-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  708-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
call   10 never executed
call   11 never executed
    $$$$$:  708-block  3
call   12 never executed
    $$$$$:  708-block  4
call   13 never executed
    $$$$$:  708-block  5
    $$$$$:  708-block  6
    $$$$$:  708-block  7
    #####:  709:        internal::FilePath(colon + 1));
    %%%%%:  709-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  709-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  709-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  709-block  3
call    9 never executed
call   10 never executed
    %%%%%:  709-block  4
    $$$$$:  709-block  5
call   11 never executed
    $$$$$:  709-block  6
call   12 never executed
    $$$$$:  709-block  7
    $$$$$:  709-block  8
    $$$$$:  709-block  9
        -:  710:
    #####:  711:  if (!output_name.IsDirectory()) return output_name.string();
    %%%%%:  711-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  711-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  711-block  2
        -:  712:
        -:  713:  internal::FilePath result(internal::FilePath::GenerateUniqueFileName(
    #####:  714:      output_name, internal::GetCurrentExecutableName(),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  714-block  0
call    3 never executed
    $$$$$:  714-block  1
call    4 never executed
    $$$$$:  714-block  2
    #####:  715:      GetOutputFormat().c_str()));
    %%%%%:  715-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  715-block  1
call    3 never executed
    %%%%%:  715-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
    $$$$$:  715-block  3
call    8 never executed
    $$$$$:  715-block  4
    #####:  716:  return result.string();
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  716-block  0
    #####:  717:}
    %%%%%:  717-block  0
call    0 never executed
    %%%%%:  717-block  1
call    1 never executed
    %%%%%:  717-block  2
call    2 never executed
call    3 never executed
    $$$$$:  717-block  3
call    4 never executed
    $$$$$:  717-block  4
call    5 never executed
    $$$$$:  717-block  5
call    6 never executed
    $$$$$:  717-block  6
call    7 never executed
        -:  718:#endif  // GTEST_HAS_FILE_SYSTEM
        -:  719:
        -:  720:// Returns true if and only if the wildcard pattern matches the string. Each
        -:  721:// pattern consists of regular characters, single-character wildcards (?), and
        -:  722:// multi-character wildcards (*).
        -:  723://
        -:  724:// This function implements a linear-time string globbing algorithm based on
        -:  725:// https://research.swtch.com/glob.
function _ZN7testing8internalL20PatternMatchesStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcSA_ called 235 returned 100% blocks executed 87%
      235:  726:static bool PatternMatchesString(const std::string& name_str,
        -:  727:                                 const char* pattern, const char* pattern_end) {
      235:  728:  const char* name = name_str.c_str();
      235:  728-block  0
call    0 returned 235
      235:  729:  const char* const name_begin = name;
      235:  730:  const char* const name_end = name + name_str.size();
call    0 returned 235
        -:  731:
      235:  732:  const char* pattern_next = pattern;
      235:  733:  const char* name_next = name;
        -:  734:
     2415:  735:  while (pattern < pattern_end || name < name_end) {
     2415:  735-block  0
branch  0 taken 1895
branch  1 taken 520 (fallthrough)
      520:  735-block  1
branch  2 taken 477
branch  3 taken 43 (fallthrough)
     2372:  736:    if (pattern < pattern_end) {
     2372:  736-block  0
branch  0 taken 1895 (fallthrough)
branch  1 taken 477
     1895:  737:      switch (*pattern) {
     1895:  737-block  0
branch  0 taken 739
branch  1 taken 0
branch  2 taken 1156
      739:  738:        default:  // Match an ordinary character.
      739:  739:          if (name < name_end && *name == *pattern) {
      739:  739-block  0
branch  0 taken 633 (fallthrough)
branch  1 taken 106
      633:  739-block  1
branch  2 taken 17 (fallthrough)
branch  3 taken 616
       17:  740:            ++pattern;
       17:  741:            ++name;
       17:  742:            continue;
       17:  742-block  0
        -:  743:          }
      722:  744:          break;
      722:  744-block  0
    #####:  745:        case '?':  // Match any single character.
    #####:  746:          if (name < name_end) {
    %%%%%:  746-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  747:            ++pattern;
    #####:  748:            ++name;
    #####:  749:            continue;
    %%%%%:  749-block  0
        -:  750:          }
    #####:  751:          break;
    %%%%%:  751-block  0
     1156:  752:        case '*':
        -:  753:          // Match zero or more characters. Start by skipping over the wildcard
        -:  754:          // and matching zero characters from name. If that fails, restart and
        -:  755:          // match one more character than the last attempt.
     1156:  756:          pattern_next = pattern;
     1156:  757:          name_next = name + 1;
     1156:  758:          ++pattern;
     1156:  759:          continue;
     1156:  759-block  0
        -:  760:      }
        -:  761:    }
        -:  762:    // Failed to match a character. Restart if possible.
     1199:  763:    if (name_begin < name_next && name_next <= name_end) {
     1199:  763-block  0
branch  0 taken 1113 (fallthrough)
branch  1 taken 86
     1113:  763-block  1
branch  2 taken 1007 (fallthrough)
branch  3 taken 106
     1007:  764:      pattern = pattern_next;
     1007:  765:      name = name_next;
     1007:  766:      continue;
     1007:  766-block  0
        -:  767:    }
      192:  768:    return false;
      192:  768-block  0
        -:  769:  }
       43:  770:  return true;
       43:  770-block  0
        -:  771:}
        -:  772:
        -:  773:namespace {
        -:  774:
function _ZN7testing8internal12_GLOBAL__N_113IsGlobPatternERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 23 returned 100% blocks executed 100%
       23:  775:bool IsGlobPattern(const std::string& pattern) {
       23:  776:  return std::any_of(pattern.begin(), pattern.end(),
       23:  776-block  0
call    0 returned 23
call    1 returned 23
call    2 returned 23
function _ZZN7testing8internal12_GLOBAL__N_113IsGlobPatternERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlcE_clEc called 32 returned 100% blocks executed 100%
       55:  777:                     [](const char c) { return c == '?' || c == '*'; });
       32:  777-block  0
branch  0 taken 32 (fallthrough)
branch  1 taken 0
       32:  777-block  1
branch  2 taken 23 (fallthrough)
branch  3 taken 9
       23:  777-block  2
        9:  777-block  3
       32:  777-block  4
        -:  778:}
        -:  779:
        -:  780:class UnitTestFilter {
        -:  781: public:
function _ZN7testing8internal12_GLOBAL__N_114UnitTestFilterC2Ev called 2 returned 100% blocks executed 100%
        2:  782:  UnitTestFilter() = default;
        2:  782-block  0
call    0 returned 2
call    1 returned 2
        -:  783:
        -:  784:  // Constructs a filter from a string of patterns separated by `:`.
function _ZN7testing8internal12_GLOBAL__N_114UnitTestFilterC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 12 returned 100% blocks executed 76%
       12:  785:  explicit UnitTestFilter(const std::string& filter) {
       12:  785-block  0
call    0 returned 12
call    1 returned 12
        -:  786:    // By design "" filter matches "" string.
       12:  787:    std::vector<std::string> all_patterns;
       12:  788:    SplitString(filter, ':', &all_patterns);
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12:  789:    const auto exact_match_patterns_begin = std::partition(
       12:  789-block  0
call    0 returned 12
call    1 returned 12
call    2 returned 12
branch  3 taken 12 (fallthrough)
branch  4 taken 0 (throw)
        -:  790:        all_patterns.begin(), all_patterns.end(), &IsGlobPattern);
        -:  791:
       24:  792:    glob_patterns_.reserve(static_cast<size_t>(
       24:  793:        std::distance(all_patterns.begin(), exact_match_patterns_begin)));
       12:  793-block  0
call    0 returned 12
       12:  793-block  1
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0 (throw)
       24:  794:    std::move(all_patterns.begin(), exact_match_patterns_begin,
       12:  794-block  0
call    0 returned 12
       12:  794-block  1
call    1 returned 12
call    2 returned 12
branch  3 taken 12 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$:  794-block  2
       12:  795:              std::inserter(glob_patterns_, glob_patterns_.begin()));
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       24:  796:    std::move(
       12:  796-block  0
call    0 returned 12
       12:  796-block  1
call    1 returned 12
call    2 returned 12
branch  3 taken 12 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$:  796-block  2
        -:  797:        exact_match_patterns_begin, all_patterns.end(),
       12:  798:        std::inserter(exact_match_patterns_, exact_match_patterns_.begin()));
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12:  799:  }
       12:  799-block  0
call    0 returned 12
    $$$$$:  799-block  1
call    1 never executed
    $$$$$:  799-block  2
call    2 never executed
    $$$$$:  799-block  3
call    3 never executed
        -:  800:
        -:  801:  // Returns true if and only if name matches at least one of the patterns in
        -:  802:  // the filter.
function _ZNK7testing8internal12_GLOBAL__N_114UnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 182 returned 100% blocks executed 100%
      182:  803:  bool MatchesName(const std::string& name) const {
      364:  804:    return exact_match_patterns_.count(name) > 0 ||
      182:  804-block  0
call    0 returned 182
branch  1 taken 182 (fallthrough)
branch  2 taken 0
       43:  804-block  1
      139:  804-block  2
      182:  805:           std::any_of(glob_patterns_.begin(), glob_patterns_.end(),
      182:  805-block  0
call    0 returned 182
call    1 returned 182
call    2 returned 182
branch  3 taken 43 (fallthrough)
branch  4 taken 139
function _ZZNK7testing8internal12_GLOBAL__N_114UnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlSA_E_clESA_ called 235 returned 100% blocks executed 100%
      235:  806:                       [&name](const std::string& pattern) {
      235:  807:                         return PatternMatchesString(
call    0 returned 235
call    1 returned 235
        -:  808:                             name, pattern.c_str(),
      470:  809:                             pattern.c_str() + pattern.size());
      235:  809-block  0
call    0 returned 235
call    1 returned 235
      182:  810:                       });
      182:  810-block  0
        -:  811:  }
        -:  812:
        -:  813: private:
        -:  814:  std::vector<std::string> glob_patterns_;
        -:  815:  std::unordered_set<std::string> exact_match_patterns_;
        -:  816:};
        -:  817:
        -:  818:class PositiveAndNegativeUnitTestFilter {
        -:  819: public:
        -:  820:  // Constructs a positive and a negative filter from a string. The string
        -:  821:  // contains a positive filter optionally followed by a '-' character and a
        -:  822:  // negative filter. In case only a negative filter is provided the positive
        -:  823:  // filter will be assumed "*".
        -:  824:  // A filter is a list of patterns separated by ':'.
function _ZN7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilterC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 19%
        1:  825:  explicit PositiveAndNegativeUnitTestFilter(const std::string& filter) {
        1:  825-block  0
call    0 returned 1
call    1 returned 1
        1:  826:    std::vector<std::string> positive_and_negative_filters;
        -:  827:
        -:  828:    // NOTE: `SplitString` always returns a non-empty container.
        1:  829:    SplitString(filter, '-', &positive_and_negative_filters);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  830:    const auto& positive_filter = positive_and_negative_filters.front();
        1:  830-block  0
call    0 returned 1
        -:  831:
        1:  832:    if (positive_and_negative_filters.size() > 1) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  833:      positive_filter_ = UnitTestFilter(
    %%%%%:  833-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$:  833-block  1
    #####:  834:          positive_filter.empty() ? kUniversalFilter : positive_filter);
    %%%%%:  834-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  834-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  834-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  834-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed
    $$$$$:  834-block  4
call   13 never executed
    $$$$$:  834-block  5
branch 14 never executed (fallthrough)
branch 15 never executed
    $$$$$:  834-block  6
    $$$$$:  834-block  7
        -:  835:
        -:  836:      // TODO(b/214626361): Fail on multiple '-' characters
        -:  837:      // For the moment to preserve old behavior we concatenate the rest of the
        -:  838:      // string parts with `-` as separator to generate the negative filter.
    #####:  839:      auto negative_filter_string = positive_and_negative_filters[1];
    %%%%%:  839-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:  840:      for (std::size_t i = 2; i < positive_and_negative_filters.size(); i++)
    %%%%%:  840-block  0
    %%%%%:  840-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -:  841:        negative_filter_string =
    #####:  842:            negative_filter_string + '-' + positive_and_negative_filters[i];
    %%%%%:  842-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  842-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  842-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  842-block  3
call   10 never executed
    $$$$$:  842-block  4
    $$$$$:  842-block  5
    #####:  843:      negative_filter_ = UnitTestFilter(negative_filter_string);
    %%%%%:  843-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  843-block  1
call    3 never executed
call    4 never executed
    $$$$$:  843-block  2
    #####:  844:    } else {
call    0 never executed
    $$$$$:  844-block  0
call    1 never executed
        -:  845:      // In case we don't have a negative filter and positive filter is ""
        -:  846:      // we do not use kUniversalFilter by design as opposed to when we have a
        -:  847:      // negative filter.
        1:  848:      positive_filter_ = UnitTestFilter(positive_filter);
        1:  848-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  848-block  1
call    3 returned 1
call    4 returned 1
    $$$$$:  848-block  2
        -:  849:    }
        1:  850:  }
        1:  850-block  0
call    0 returned 1
    $$$$$:  850-block  1
call    1 never executed
    $$$$$:  850-block  2
call    2 never executed
    $$$$$:  850-block  3
call    3 never executed
        -:  851:
        -:  852:  // Returns true if and only if test name (this is generated by appending test
        -:  853:  // suit name and test name via a '.' character) matches the positive filter
        -:  854:  // and does not match the negative filter.
function _ZNK7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilter11MatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ called 43 returned 100% blocks executed 64%
       43:  855:  bool MatchesTest(const std::string& test_suite_name,
        -:  856:                   const std::string& test_name) const {
       43:  857:    return MatchesName(test_suite_name + "." + test_name);
       43:  857-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43:  857-block  1
call    3 returned 43
branch  4 taken 43 (fallthrough)
branch  5 taken 0 (throw)
       43:  857-block  2
call    6 returned 43
branch  7 taken 43 (fallthrough)
branch  8 taken 0 (throw)
       43:  857-block  3
       43:  857-block  4
call    9 returned 43
call   10 returned 43
       43:  857-block  5
    $$$$$:  857-block  6
call   11 never executed
    $$$$$:  857-block  7
call   12 never executed
    $$$$$:  857-block  8
        -:  858:  }
        -:  859:
        -:  860:  // Returns true if and only if name matches the positive filter and does not
        -:  861:  // match the negative filter.
function _ZNK7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 43 returned 100% blocks executed 88%
       43:  862:  bool MatchesName(const std::string& name) const {
      86*:  863:    return positive_filter_.MatchesName(name) &&
       43:  863-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0
       43:  863-block  1
    %%%%%:  863-block  2
       86:  864:           !negative_filter_.MatchesName(name);
       43:  864-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0
       43:  864-block  1
        -:  865:  }
        -:  866:
        -:  867: private:
        -:  868:  UnitTestFilter positive_filter_;
        -:  869:  UnitTestFilter negative_filter_;
        -:  870:};
        -:  871:}  // namespace
        -:  872:
function _ZN7testing8internal15UnitTestOptions13MatchesFilterERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKc called 0 returned 0% blocks executed 0%
    #####:  873:bool UnitTestOptions::MatchesFilter(const std::string& name_str,
    %%%%%:  873-block  0
        -:  874:                                    const char* filter) {
    #####:  875:  return UnitTestFilter(filter).MatchesName(name_str);
    %%%%%:  875-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  875-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  875-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  875-block  3
    %%%%%:  875-block  4
call    9 never executed
call   10 never executed
    %%%%%:  875-block  5
    %%%%%:  875-block  6
    $$$$$:  875-block  7
call   11 never executed
    $$$$$:  875-block  8
call   12 never executed
    $$$$$:  875-block  9
    $$$$$:  875-block 10
        -:  876:}
        -:  877:
        -:  878:// Returns true if and only if the user-specified filter matches the test
        -:  879:// suite name and the test name.
function _ZN7testing8internal15UnitTestOptions17FilterMatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####:  880:bool UnitTestOptions::FilterMatchesTest(const std::string& test_suite_name,
        -:  881:                                        const std::string& test_name) {
        -:  882:  // Split --gtest_filter at '-', if there is one, to separate into
        -:  883:  // positive filter and negative filter portions
    #####:  884:  return PositiveAndNegativeUnitTestFilter(GTEST_FLAG_GET(filter))
    %%%%%:  884-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  884-block  1
call    3 never executed
    $$$$$:  884-block  2
call    4 never executed
    #####:  885:      .MatchesTest(test_suite_name, test_name);
    %%%%%:  885-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  885-block  1
    %%%%%:  885-block  2
        -:  886:}
        -:  887:
        -:  888:#if GTEST_HAS_SEH
        -:  889:static std::string FormatSehExceptionMessage(DWORD exception_code,
        -:  890:                                             const char* location) {
        -:  891:  Message message;
        -:  892:  message << "SEH exception with code 0x" << std::setbase(16) << exception_code
        -:  893:          << std::setbase(10) << " thrown in " << location << ".";
        -:  894:  return message.GetString();
        -:  895:}
        -:  896:
        -:  897:int UnitTestOptions::GTestProcessSEH(DWORD seh_code, const char* location) {
        -:  898:  // Google Test should handle a SEH exception if:
        -:  899:  //   1. the user wants it to, AND
        -:  900:  //   2. this is not a breakpoint exception or stack overflow, AND
        -:  901:  //   3. this is not a C++ exception (VC++ implements them via SEH,
        -:  902:  //      apparently).
        -:  903:  //
        -:  904:  // SEH exception code for C++ exceptions.
        -:  905:  // (see https://support.microsoft.com/kb/185294 for more information).
        -:  906:  const DWORD kCxxExceptionCode = 0xe06d7363;
        -:  907:
        -:  908:  if (!GTEST_FLAG_GET(catch_exceptions) || seh_code == kCxxExceptionCode ||
        -:  909:      seh_code == EXCEPTION_BREAKPOINT ||
        -:  910:      seh_code == EXCEPTION_STACK_OVERFLOW) {
        -:  911:    return EXCEPTION_CONTINUE_SEARCH;  // Don't handle these exceptions
        -:  912:  }
        -:  913:
        -:  914:  internal::ReportFailureInUnknownLocation(
        -:  915:      TestPartResult::kFatalFailure,
        -:  916:      FormatSehExceptionMessage(seh_code, location) +
        -:  917:          "\n"
        -:  918:          "Stack trace:\n" +
        -:  919:          ::testing::internal::GetCurrentOsStackTraceExceptTop(1));
        -:  920:
        -:  921:  return EXCEPTION_EXECUTE_HANDLER;
        -:  922:}
        -:  923:#endif  // GTEST_HAS_SEH
        -:  924:
        -:  925:}  // namespace internal
        -:  926:
        -:  927:// The c'tor sets this object as the test part result reporter used by
        -:  928:// Google Test.  The 'result' parameter specifies where to report the
        -:  929:// results. Intercepts only failures from the current thread.
function _ZN7testing32ScopedFakeTestPartResultReporterC2EPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  930:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  931:    TestPartResultArray* result)
    #####:  932:    : intercept_mode_(INTERCEPT_ONLY_CURRENT_THREAD), result_(result) {
    %%%%%:  932-block  0
call    0 never executed
    #####:  933:  Init();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  934:}
    %%%%%:  934-block  0
    $$$$$:  934-block  1
call    0 never executed
        -:  935:
        -:  936:// The c'tor sets this object as the test part result reporter used by
        -:  937:// Google Test.  The 'result' parameter specifies where to report the
        -:  938:// results.
function _ZN7testing32ScopedFakeTestPartResultReporterC2ENS0_13InterceptModeEPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  939:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  940:    InterceptMode intercept_mode, TestPartResultArray* result)
    #####:  941:    : intercept_mode_(intercept_mode), result_(result) {
    %%%%%:  941-block  0
call    0 never executed
    #####:  942:  Init();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  943:}
    %%%%%:  943-block  0
    $$$$$:  943-block  1
call    0 never executed
        -:  944:
function _ZN7testing32ScopedFakeTestPartResultReporter4InitEv called 0 returned 0% blocks executed 0%
    #####:  945:void ScopedFakeTestPartResultReporter::Init() {
    #####:  946:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  946-block  0
call    0 never executed
    #####:  947:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  948:    old_reporter_ = impl->GetGlobalTestPartResultReporter();
    %%%%%:  948-block  0
call    0 never executed
    #####:  949:    impl->SetGlobalTestPartResultReporter(this);
call    0 never executed
        -:  950:  } else {
    #####:  951:    old_reporter_ = impl->GetTestPartResultReporterForCurrentThread();
    %%%%%:  951-block  0
call    0 never executed
    #####:  952:    impl->SetTestPartResultReporterForCurrentThread(this);
call    0 never executed
        -:  953:  }
    #####:  954:}
        -:  955:
        -:  956:// The d'tor restores the test part result reporter used by Google Test
        -:  957:// before.
    #####:  958:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    #####:  959:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    #####:  960:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
    #####:  961:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  962:  } else {
    #####:  963:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  964:  }
    #####:  965:}
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD0Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD0Ev called 0 returned 0% blocks executed 0%
    #####:  958:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
        -:  959:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        -:  960:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
        -:  961:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  962:  } else {
        -:  963:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  964:  }
    #####:  965:}
    %%%%%:  965-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD2Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD2Ev called 0 returned 0% blocks executed 0%
    #####:  958:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    #####:  959:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  959-block  0
call    0 never executed
    #####:  960:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  961:    impl->SetGlobalTestPartResultReporter(old_reporter_);
    %%%%%:  961-block  0
call    0 never executed
        -:  962:  } else {
    #####:  963:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
    %%%%%:  963-block  0
call    0 never executed
        -:  964:  }
    #####:  965:}
    %%%%%:  965-block  0
call    0 never executed
------------------
        -:  966:
        -:  967:// Increments the test part result count and remembers the result.
        -:  968:// This method is from the TestPartResultReporterInterface interface.
function _ZN7testing32ScopedFakeTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  969:void ScopedFakeTestPartResultReporter::ReportTestPartResult(
        -:  970:    const TestPartResult& result) {
    #####:  971:  result_->Append(result);
    %%%%%:  971-block  0
call    0 never executed
    #####:  972:}
        -:  973:
        -:  974:namespace internal {
        -:  975:
        -:  976:// Returns the type ID of ::testing::Test.  We should always call this
        -:  977:// instead of GetTypeId< ::testing::Test>() to get the type ID of
        -:  978:// testing::Test.  This is to work around a suspected linker bug when
        -:  979:// using Google Test as a framework on Mac OS X.  The bug causes
        -:  980:// GetTypeId< ::testing::Test>() to return different values depending
        -:  981:// on whether the call is from the Google Test framework itself or
        -:  982:// from user test code.  GetTestTypeId() is guaranteed to always
        -:  983:// return the same value, as it always calls GetTypeId<>() from the
        -:  984:// gtest.cc, which is within the Google Test framework.
function _ZN7testing8internal13GetTestTypeIdEv called 44 returned 100% blocks executed 100%
       44:  985:TypeId GetTestTypeId() { return GetTypeId<Test>(); }
       44:  985-block  0
call    0 returned 44
        -:  986:
        -:  987:// The value of GetTestTypeId() as seen from within the Google Test
        -:  988:// library.  This is solely for testing GetTestTypeId().
        -:  989:extern const TypeId kTestTypeIdInGoogleTest = GetTestTypeId();
        -:  990:
        -:  991:// This predicate-formatter checks that 'results' contains a test part
        -:  992:// failure of the given type and that the failure message contains the
        -:  993:// given substring.
function _ZN7testing8internalL13HasOneFailureEPKcS2_S2_RKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  994:static AssertionResult HasOneFailure(const char* /* results_expr */,
    %%%%%:  994-block  0
        -:  995:                                     const char* /* type_expr */,
        -:  996:                                     const char* /* substr_expr */,
        -:  997:                                     const TestPartResultArray& results,
        -:  998:                                     TestPartResult::Type type,
        -:  999:                                     const std::string& substr) {
        -: 1000:  const std::string expected(type == TestPartResult::kFatalFailure
        -: 1001:                                 ? "1 fatal failure"
    #####: 1002:                                 : "1 non-fatal failure");
    %%%%%: 1002-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1002-block  1
    %%%%%: 1002-block  2
    %%%%%: 1002-block  3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    $$$$$: 1002-block  4
    #####: 1003:  Message msg;
    %%%%%: 1003-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1004:  if (results.size() != 1) {
    %%%%%: 1004-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1005:    msg << "Expected: " << expected << "\n"
    %%%%%: 1005-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1005-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1005-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 1006:        << "  Actual: " << results.size() << " failures";
    %%%%%: 1006-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1006-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 1006-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    $$$$$: 1006-block  3
    #####: 1007:    for (int i = 0; i < results.size(); i++) {
    %%%%%: 1007-block  0
    %%%%%: 1007-block  1
    %%%%%: 1007-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1008:      msg << "\n" << results.GetTestPartResult(i);
    %%%%%: 1008-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1008-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1008-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 1009:    }
    #####: 1010:    return AssertionFailure() << msg;
    %%%%%: 1010-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1010-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1010-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1010-block  3
    %%%%%: 1010-block  4
call    9 never executed
    $$$$$: 1010-block  5
call   10 never executed
    $$$$$: 1010-block  6
        -: 1011:  }
        -: 1012:
    #####: 1013:  const TestPartResult& r = results.GetTestPartResult(0);
    %%%%%: 1013-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1014:  if (r.type() != type) {
    %%%%%: 1014-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1015:    return AssertionFailure() << "Expected: " << expected << "\n"
    %%%%%: 1015-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1015-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1015-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1015-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1015-block  4
call   12 never executed
    $$$$$: 1015-block  5
call   13 never executed
    $$$$$: 1015-block  6
    #####: 1016:                              << "  Actual:\n"
    %%%%%: 1016-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1017:                              << r;
    %%%%%: 1017-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1017-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 1018:  }
        -: 1019:
    #####: 1020:  if (strstr(r.message(), substr.c_str()) == nullptr) {
    %%%%%: 1020-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1021:    return AssertionFailure()
    %%%%%: 1021-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1021-block  1
call    3 never executed
    $$$$$: 1021-block  2
call    4 never executed
    $$$$$: 1021-block  3
    #####: 1022:           << "Expected: " << expected << " containing \"" << substr << "\"\n"
    %%%%%: 1022-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1022-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1022-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1022-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1022-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    #####: 1023:           << "  Actual:\n"
    %%%%%: 1023-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1024:           << r;
    %%%%%: 1024-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1024-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 1025:  }
        -: 1026:
    #####: 1027:  return AssertionSuccess();
    %%%%%: 1027-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1028:}
    %%%%%: 1028-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1028-block  1
call    2 never executed
    $$$$$: 1028-block  2
call    3 never executed
        -: 1029:
        -: 1030:// The constructor of SingleFailureChecker remembers where to look up
        -: 1031:// test part results, what type of failure we expect, and what
        -: 1032:// substring the failure message should contain.
function _ZN7testing8internal20SingleFailureCheckerC2EPKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1033:SingleFailureChecker::SingleFailureChecker(const TestPartResultArray* results,
        -: 1034:                                           TestPartResult::Type type,
    #####: 1035:                                           const std::string& substr)
    #####: 1036:    : results_(results), type_(type), substr_(substr) {}
    %%%%%: 1036-block  0
call    0 never executed
        -: 1037:
        -: 1038:// The destructor of SingleFailureChecker verifies that the given
        -: 1039:// TestPartResultArray contains exactly one failure that has the given
        -: 1040:// type and contains the given substring.  If that's not the case, a
        -: 1041:// non-fatal failure will be generated.
function _ZN7testing8internal20SingleFailureCheckerD2Ev called 0 returned 0% blocks executed 0%
    #####: 1042:SingleFailureChecker::~SingleFailureChecker() {
    #####: 1043:  EXPECT_PRED_FORMAT3(HasOneFailure, *results_, type_, substr_);
    %%%%%: 1043-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1043-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    %%%%%: 1043-block  2
call   10 never executed
    #####: 1044:}
call    0 never executed
        -: 1045:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1: 1046:DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter(
        1: 1047:    UnitTestImpl* unit_test)
        1: 1048:    : unit_test_(unit_test) {}
        1: 1048-block  0
call    0 returned 1
        -: 1049:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 7 returned 100% blocks executed 100%
        7: 1050:void DefaultGlobalTestPartResultReporter::ReportTestPartResult(
        -: 1051:    const TestPartResult& result) {
        7: 1052:  unit_test_->current_test_result()->AddTestPartResult(result);
        7: 1052-block  0
call    0 returned 7
call    1 returned 7
        7: 1053:  unit_test_->listeners()->repeater()->OnTestPartResult(result);
call    0 returned 7
call    1 returned 7
call    2 returned 7
        7: 1054:}
        -: 1055:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1: 1056:DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter(
        1: 1057:    UnitTestImpl* unit_test)
        1: 1058:    : unit_test_(unit_test) {}
        1: 1058-block  0
call    0 returned 1
        -: 1059:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 7 returned 100% blocks executed 100%
        7: 1060:void DefaultPerThreadTestPartResultReporter::ReportTestPartResult(
        -: 1061:    const TestPartResult& result) {
        7: 1062:  unit_test_->GetGlobalTestPartResultReporter()->ReportTestPartResult(result);
        7: 1062-block  0
call    0 returned 7
call    1 returned 7
        7: 1063:}
        -: 1064:
        -: 1065:// Returns the global test part result reporter.
        -: 1066:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl31GetGlobalTestPartResultReporterEv called 7 returned 100% blocks executed 100%
        7: 1067:UnitTestImpl::GetGlobalTestPartResultReporter() {
        7: 1068:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
        7: 1068-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 1069:  return global_test_part_result_reporter_;
        7: 1069-block  0
        7: 1070:}
        7: 1070-block  0
call    0 returned 7
        -: 1071:
        -: 1072:// Sets the global test part result reporter.
function _ZN7testing8internal12UnitTestImpl31SetGlobalTestPartResultReporterEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 1073:void UnitTestImpl::SetGlobalTestPartResultReporter(
        -: 1074:    TestPartResultReporterInterface* reporter) {
    #####: 1075:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%: 1075-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1076:  global_test_part_result_reporter_ = reporter;
    #####: 1077:}
    %%%%%: 1077-block  0
call    0 never executed
        -: 1078:
        -: 1079:// Returns the test part result reporter for the current thread.
        -: 1080:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl41GetTestPartResultReporterForCurrentThreadEv called 7 returned 100% blocks executed 100%
        7: 1081:UnitTestImpl::GetTestPartResultReporterForCurrentThread() {
        7: 1082:  return per_thread_test_part_result_reporter_.get();
        7: 1082-block  0
call    0 returned 7
        -: 1083:}
        -: 1084:
        -: 1085:// Sets the test part result reporter for the current thread.
function _ZN7testing8internal12UnitTestImpl41SetTestPartResultReporterForCurrentThreadEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 1086:void UnitTestImpl::SetTestPartResultReporterForCurrentThread(
        -: 1087:    TestPartResultReporterInterface* reporter) {
    #####: 1088:  per_thread_test_part_result_reporter_.set(reporter);
    %%%%%: 1088-block  0
call    0 never executed
    #####: 1089:}
        -: 1090:
        -: 1091:// Gets the number of successful test suites.
function _ZNK7testing8internal12UnitTestImpl27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 1092:int UnitTestImpl::successful_test_suite_count() const {
    #####: 1093:  return CountIf(test_suites_, TestSuitePassed);
    %%%%%: 1093-block  0
call    0 never executed
        -: 1094:}
        -: 1095:
        -: 1096:// Gets the number of failed test suites.
function _ZNK7testing8internal12UnitTestImpl23failed_test_suite_countEv called 2 returned 100% blocks executed 100%
        2: 1097:int UnitTestImpl::failed_test_suite_count() const {
        2: 1098:  return CountIf(test_suites_, TestSuiteFailed);
        2: 1098-block  0
call    0 returned 2
        -: 1099:}
        -: 1100:
        -: 1101:// Gets the number of all test suites.
function _ZNK7testing8internal12UnitTestImpl22total_test_suite_countEv called 33 returned 100% blocks executed 100%
       33: 1102:int UnitTestImpl::total_test_suite_count() const {
       33: 1103:  return static_cast<int>(test_suites_.size());
       33: 1103-block  0
call    0 returned 33
        -: 1104:}
        -: 1105:
        -: 1106:// Gets the number of all test suites that contain at least one test
        -: 1107:// that should run.
function _ZNK7testing8internal12UnitTestImpl23test_suite_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 1108:int UnitTestImpl::test_suite_to_run_count() const {
        2: 1109:  return CountIf(test_suites_, ShouldRunTestSuite);
        2: 1109-block  0
call    0 returned 2
        -: 1110:}
        -: 1111:
        -: 1112:// Gets the number of successful tests.
function _ZNK7testing8internal12UnitTestImpl21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 1113:int UnitTestImpl::successful_test_count() const {
        1: 1114:  return SumOverTestSuiteList(test_suites_, &TestSuite::successful_test_count);
        1: 1114-block  0
call    0 returned 1
        -: 1115:}
        -: 1116:
        -: 1117:// Gets the number of skipped tests.
function _ZNK7testing8internal12UnitTestImpl18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 1118:int UnitTestImpl::skipped_test_count() const {
        1: 1119:  return SumOverTestSuiteList(test_suites_, &TestSuite::skipped_test_count);
        1: 1119-block  0
call    0 returned 1
        -: 1120:}
        -: 1121:
        -: 1122:// Gets the number of failed tests.
function _ZNK7testing8internal12UnitTestImpl17failed_test_countEv called 1 returned 100% blocks executed 100%
        1: 1123:int UnitTestImpl::failed_test_count() const {
        1: 1124:  return SumOverTestSuiteList(test_suites_, &TestSuite::failed_test_count);
        1: 1124-block  0
call    0 returned 1
        -: 1125:}
        -: 1126:
        -: 1127:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8internal12UnitTestImpl30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 1128:int UnitTestImpl::reportable_disabled_test_count() const {
        1: 1129:  return SumOverTestSuiteList(test_suites_,
        1: 1129-block  0
call    0 returned 1
        1: 1130:                              &TestSuite::reportable_disabled_test_count);
        -: 1131:}
        -: 1132:
        -: 1133:// Gets the number of disabled tests.
function _ZNK7testing8internal12UnitTestImpl19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1134:int UnitTestImpl::disabled_test_count() const {
    #####: 1135:  return SumOverTestSuiteList(test_suites_, &TestSuite::disabled_test_count);
    %%%%%: 1135-block  0
call    0 never executed
        -: 1136:}
        -: 1137:
        -: 1138:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8internal12UnitTestImpl21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1139:int UnitTestImpl::reportable_test_count() const {
    #####: 1140:  return SumOverTestSuiteList(test_suites_, &TestSuite::reportable_test_count);
    %%%%%: 1140-block  0
call    0 never executed
        -: 1141:}
        -: 1142:
        -: 1143:// Gets the number of all tests.
function _ZNK7testing8internal12UnitTestImpl16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1144:int UnitTestImpl::total_test_count() const {
    #####: 1145:  return SumOverTestSuiteList(test_suites_, &TestSuite::total_test_count);
    %%%%%: 1145-block  0
call    0 never executed
        -: 1146:}
        -: 1147:
        -: 1148:// Gets the number of tests that should run.
function _ZNK7testing8internal12UnitTestImpl17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 1149:int UnitTestImpl::test_to_run_count() const {
        2: 1150:  return SumOverTestSuiteList(test_suites_, &TestSuite::test_to_run_count);
        2: 1150-block  0
call    0 returned 2
        -: 1151:}
        -: 1152:
        -: 1153:// Returns the current OS stack trace as an std::string.
        -: 1154://
        -: 1155:// The maximum number of stack frames to be included is specified by
        -: 1156:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 1157:// specifies the number of top frames to be skipped, which doesn't
        -: 1158:// count against the number of frames to be included.
        -: 1159://
        -: 1160:// For example, if Foo() calls Bar(), which in turn calls
        -: 1161:// CurrentOsStackTraceExceptTop(1), Foo() will be included in the
        -: 1162:// trace but Bar() and CurrentOsStackTraceExceptTop() won't.
function _ZN7testing8internal12UnitTestImpl28CurrentOsStackTraceExceptTopB5cxx11Ei called 7 returned 100% blocks executed 100%
        7: 1163:std::string UnitTestImpl::CurrentOsStackTraceExceptTop(int skip_count) {
        7: 1164:  return os_stack_trace_getter()->CurrentStackTrace(
        7: 1164-block  0
call    0 returned 7
        -: 1165:      static_cast<int>(GTEST_FLAG_GET(stack_trace_depth)), skip_count + 1
        -: 1166:      // Skips the user-specified number of frames plus this function
        -: 1167:      // itself.
        7: 1168:  );  // NOLINT
call    0 returned 7
        -: 1169:}
        -: 1170:
        -: 1171:// A helper class for measuring elapsed times.
        -: 1172:class Timer {
        -: 1173: public:
function _ZN7testing8internal5TimerC1Ev called 54 returned 100% blocks executed 100%
       54: 1174:  Timer() : start_(clock::now()) {}
       54: 1174-block  0
call    0 returned 54
        -: 1175:
        -: 1176:  // Return time elapsed in milliseconds since the timer was created.
function _ZN7testing8internal5Timer7ElapsedEv called 54 returned 100% blocks executed 78%
       54: 1177:  TimeInMillis Elapsed() {
      108: 1178:    return std::chrono::duration_cast<std::chrono::milliseconds>(clock::now() -
       54: 1178-block  0
call    0 returned 54
branch  1 taken 54 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$: 1178-block  1
    $$$$$: 1178-block  2
       54: 1179:                                                                 start_)
       54: 1179-block  0
call    0 returned 54
call    1 returned 54
branch  2 taken 54 (fallthrough)
branch  3 taken 0 (throw)
      108: 1180:        .count();
       54: 1180-block  0
call    0 returned 54
       54: 1180-block  1
        -: 1181:  }
        -: 1182:
        -: 1183: private:
        -: 1184:  // Fall back to the system_clock when building with newlib on a system
        -: 1185:  // without a monotonic clock.
        -: 1186:#if defined(_NEWLIB_VERSION) && !defined(CLOCK_MONOTONIC)
        -: 1187:  using clock = std::chrono::system_clock;
        -: 1188:#else
        -: 1189:  using clock = std::chrono::steady_clock;
        -: 1190:#endif
        -: 1191:  clock::time_point start_;
        -: 1192:};
        -: 1193:
        -: 1194:// Returns a timestamp as milliseconds since the epoch. Note this time may jump
        -: 1195:// around subject to adjustments by the system, to measure elapsed time use
        -: 1196:// Timer instead.
function _ZN7testing8internal15GetTimeInMillisEv called 55 returned 100% blocks executed 73%
       55: 1197:TimeInMillis GetTimeInMillis() {
       55: 1198:  return std::chrono::duration_cast<std::chrono::milliseconds>(
       55: 1198-block  0
call    0 returned 55
branch  1 taken 55 (fallthrough)
branch  2 taken 0 (throw)
       55: 1199:             std::chrono::system_clock::now() -
call    0 returned 55
    $$$$$: 1199-block  0
    $$$$$: 1199-block  1
      165: 1200:             std::chrono::system_clock::from_time_t(0))
       55: 1200-block  0
call    0 returned 55
call    1 returned 55
branch  2 taken 55 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 1200-block  1
      110: 1201:      .count();
       55: 1201-block  0
call    0 returned 55
       55: 1201-block  1
        -: 1202:}
        -: 1203:
        -: 1204:// Utilities
        -: 1205:
        -: 1206:// class String.
        -: 1207:
        -: 1208:#ifdef GTEST_OS_WINDOWS_MOBILE
        -: 1209:// Creates a UTF-16 wide string from the given ANSI string, allocating
        -: 1210:// memory using new. The caller is responsible for deleting the return
        -: 1211:// value using delete[]. Returns the wide string, or NULL if the
        -: 1212:// input is NULL.
        -: 1213:LPCWSTR String::AnsiToUtf16(const char* ansi) {
        -: 1214:  if (!ansi) return nullptr;
        -: 1215:  const int length = strlen(ansi);
        -: 1216:  const int unicode_length =
        -: 1217:      MultiByteToWideChar(CP_ACP, 0, ansi, length, nullptr, 0);
        -: 1218:  WCHAR* unicode = new WCHAR[unicode_length + 1];
        -: 1219:  MultiByteToWideChar(CP_ACP, 0, ansi, length, unicode, unicode_length);
        -: 1220:  unicode[unicode_length] = 0;
        -: 1221:  return unicode;
        -: 1222:}
        -: 1223:
        -: 1224:// Creates an ANSI string from the given wide string, allocating
        -: 1225:// memory using new. The caller is responsible for deleting the return
        -: 1226:// value using delete[]. Returns the ANSI string, or NULL if the
        -: 1227:// input is NULL.
        -: 1228:const char* String::Utf16ToAnsi(LPCWSTR utf16_str) {
        -: 1229:  if (!utf16_str) return nullptr;
        -: 1230:  const int ansi_length = WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, nullptr,
        -: 1231:                                              0, nullptr, nullptr);
        -: 1232:  char* ansi = new char[ansi_length + 1];
        -: 1233:  WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, ansi, ansi_length, nullptr,
        -: 1234:                      nullptr);
        -: 1235:  ansi[ansi_length] = 0;
        -: 1236:  return ansi;
        -: 1237:}
        -: 1238:
        -: 1239:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1240:
        -: 1241:// Compares two C strings.  Returns true if and only if they have the same
        -: 1242:// content.
        -: 1243://
        -: 1244:// Unlike strcmp(), this function can handle NULL argument(s).  A NULL
        -: 1245:// C string is considered different to any non-NULL C string,
        -: 1246:// including the empty string.
function _ZN7testing8internal6String13CStringEqualsEPKcS3_ called 2 returned 100% blocks executed 67%
        2: 1247:bool String::CStringEquals(const char* lhs, const char* rhs) {
       2*: 1248:  if (lhs == nullptr) return rhs == nullptr;
        2: 1248-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1248-block  1
        -: 1249:
       2*: 1250:  if (rhs == nullptr) return false;
        2: 1250-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1250-block  1
        -: 1251:
        2: 1252:  return strcmp(lhs, rhs) == 0;
        2: 1252-block  0
        -: 1253:}
        -: 1254:
        -: 1255:#if GTEST_HAS_STD_WSTRING
        -: 1256:
        -: 1257:// Converts an array of wide chars to a narrow string using the UTF-8
        -: 1258:// encoding, and streams the result to the given Message object.
function _ZN7testing8internalL24StreamWideCharsToMessageEPKwyPNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 1259:static void StreamWideCharsToMessage(const wchar_t* wstr, size_t length,
        -: 1260:                                     Message* msg) {
    #####: 1261:  for (size_t i = 0; i != length;) {  // NOLINT
    %%%%%: 1261-block  0
    %%%%%: 1261-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1262:    if (wstr[i] != L'\0') {
    %%%%%: 1262-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1263:      *msg << WideStringToUtf8(wstr + i, static_cast<int>(length - i));
    %%%%%: 1263-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1263-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1263-block  2
call    6 never executed
    $$$$$: 1263-block  3
call    7 never executed
    $$$$$: 1263-block  4
call    8 never executed
    #####: 1264:      while (i != length && wstr[i] != L'\0') i++;
    %%%%%: 1264-block  0
    %%%%%: 1264-block  1
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1264-block  2
branch  2 never executed
branch  3 never executed
        -: 1265:    } else {
    #####: 1266:      *msg << '\0';
    %%%%%: 1266-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1267:      i++;
    %%%%%: 1267-block  0
        -: 1268:    }
        -: 1269:  }
    #####: 1270:}
    %%%%%: 1270-block  0
        -: 1271:
        -: 1272:#endif  // GTEST_HAS_STD_WSTRING
        -: 1273:
function _ZN7testing8internal11SplitStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcPSt6vectorIS6_SaIS6_EE called 13 returned 100% blocks executed 68%
       13: 1274:void SplitString(const ::std::string& str, char delimiter,
        -: 1275:                 ::std::vector< ::std::string>* dest) {
       13: 1276:  ::std::vector< ::std::string> parsed;
       13: 1277:  ::std::string::size_type pos = 0;
       24: 1278:  while (::testing::internal::AlwaysTrue()) {
       13: 1278-block  0
       24: 1278-block  1
call    0 returned 24
branch  1 taken 24 (fallthrough)
branch  2 taken 0 (throw)
       24: 1278-block  2
branch  3 taken 24
branch  4 taken 0 (fallthrough)
       24: 1279:    const ::std::string::size_type colon = str.find(delimiter, pos);
       24: 1279-block  0
call    0 returned 24
       24: 1280:    if (colon == ::std::string::npos) {
branch  0 taken 13 (fallthrough)
branch  1 taken 11
       13: 1281:      parsed.push_back(str.substr(pos));
       13: 1281-block  0
call    0 returned 13
branch  1 taken 13 (fallthrough)
branch  2 taken 0 (throw)
       13: 1281-block  1
call    3 returned 13
branch  4 taken 13 (fallthrough)
branch  5 taken 0 (throw)
       13: 1281-block  2
call    6 returned 13
    $$$$$: 1281-block  3
call    7 never executed
    $$$$$: 1281-block  4
       13: 1282:      break;
        -: 1283:    } else {
       11: 1284:      parsed.push_back(str.substr(pos, colon - pos));
       11: 1284-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11: 1284-block  1
call    3 returned 11
branch  4 taken 11 (fallthrough)
branch  5 taken 0 (throw)
       11: 1284-block  2
call    6 returned 11
    $$$$$: 1284-block  3
call    7 never executed
    $$$$$: 1284-block  4
       11: 1285:      pos = colon + 1;
        -: 1286:    }
        -: 1287:  }
       13: 1288:  dest->swap(parsed);
       13: 1288-block  0
call    0 returned 13
       13: 1289:}
call    0 returned 13
    $$$$$: 1289-block  0
call    1 never executed
        -: 1290:
        -: 1291:}  // namespace internal
        -: 1292:
        -: 1293:// Constructs an empty Message.
        -: 1294:// We allocate the stringstream separately because otherwise each use of
        -: 1295:// ASSERT/EXPECT in a procedure adds over 200 bytes to the procedure's
        -: 1296:// stack frame leading to huge stack frames in some cases; gcc does not reuse
        -: 1297:// the stack space.
function _ZN7testing7MessageC2Ev called 167 returned 100% blocks executed 80%
      167: 1298:Message::Message() : ss_(new ::std::stringstream) {
      167: 1298-block  0
call    0 returned 167
call    1 returned 167
branch  2 taken 167 (fallthrough)
branch  3 taken 0 (throw)
      167: 1298-block  1
call    4 returned 167
    $$$$$: 1298-block  2
branch  5 never executed (fallthrough)
branch  6 never executed
    $$$$$: 1298-block  3
call    7 never executed
        -: 1299:  // By default, we want there to be enough precision when printing
        -: 1300:  // a double to a Message.
      167: 1301:  *ss_ << std::setprecision(std::numeric_limits<double>::digits10 + 2);
call    0 returned 167
call    1 returned 167
call    2 returned 167
      167: 1302:}
        -: 1303:
        -: 1304:// These two overloads allow streaming a wide C string to a Message
        -: 1305:// using the UTF-8 encoding.
function _ZN7testing7MessagelsEPKw called 0 returned 0% blocks executed 0%
    #####: 1306:Message& Message::operator<<(const wchar_t* wide_c_str) {
    #####: 1307:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1307-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1307-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1307-block  2
    %%%%%: 1307-block  3
call    6 never executed
    %%%%%: 1307-block  4
    $$$$$: 1307-block  5
call    7 never executed
        -: 1308:}
function _ZN7testing7MessagelsEPw called 0 returned 0% blocks executed 0%
    #####: 1309:Message& Message::operator<<(wchar_t* wide_c_str) {
    #####: 1310:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1310-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1310-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1310-block  2
    %%%%%: 1310-block  3
call    6 never executed
    %%%%%: 1310-block  4
    $$$$$: 1310-block  5
call    7 never executed
        -: 1311:}
        -: 1312:
        -: 1313:#if GTEST_HAS_STD_WSTRING
        -: 1314:// Converts the given wide string to a narrow string using the UTF-8
        -: 1315:// encoding, and streams the result to this Message object.
function _ZN7testing7MessagelsERKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE called 0 returned 0% blocks executed 0%
    #####: 1316:Message& Message::operator<<(const ::std::wstring& wstr) {
    #####: 1317:  internal::StreamWideCharsToMessage(wstr.c_str(), wstr.length(), this);
    %%%%%: 1317-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1318:  return *this;
        -: 1319:}
        -: 1320:#endif  // GTEST_HAS_STD_WSTRING
        -: 1321:
        -: 1322:// Gets the text streamed to this object so far as an std::string.
        -: 1323:// Each '\0' character in the buffer is replaced with "\\0".
function _ZNK7testing7Message9GetStringB5cxx11Ev called 167 returned 100% blocks executed 100%
      167: 1324:std::string Message::GetString() const {
      167: 1325:  return internal::StringStreamToString(ss_.get());
      167: 1325-block  0
call    0 returned 167
call    1 returned 167
        -: 1326:}
        -: 1327:
        -: 1328:namespace internal {
        -: 1329:
        -: 1330:namespace edit_distance {
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorIySaIyEES6_ called 0 returned 0% blocks executed 0%
    #####: 1331:std::vector<EditType> CalculateOptimalEdits(const std::vector<size_t>& left,
    %%%%%: 1331-block  0
        -: 1332:                                            const std::vector<size_t>& right) {
        -: 1333:  std::vector<std::vector<double> > costs(
    #####: 1334:      left.size() + 1, std::vector<double>(right.size() + 1));
    %%%%%: 1334-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1334-block  1
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1334-block  2
call    8 never executed
    %%%%%: 1334-block  3
    %%%%%: 1334-block  4
    $$$$$: 1334-block  5
call    9 never executed
    $$$$$: 1334-block  6
    $$$$$: 1334-block  7
    $$$$$: 1334-block  8
        -: 1335:  std::vector<std::vector<EditType> > best_move(
    #####: 1336:      left.size() + 1, std::vector<EditType>(right.size() + 1));
    %%%%%: 1336-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1336-block  1
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1336-block  2
call    8 never executed
    %%%%%: 1336-block  3
    $$$$$: 1336-block  4
call    9 never executed
    $$$$$: 1336-block  5
    $$$$$: 1336-block  6
    $$$$$: 1336-block  7
        -: 1337:
        -: 1338:  // Populate for empty right.
    #####: 1339:  for (size_t l_i = 0; l_i < costs.size(); ++l_i) {
    %%%%%: 1339-block  0
    %%%%%: 1339-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1340:    costs[l_i][0] = static_cast<double>(l_i);
    %%%%%: 1340-block  0
call    0 never executed
call    1 never executed
    #####: 1341:    best_move[l_i][0] = kRemove;
call    0 never executed
call    1 never executed
        -: 1342:  }
        -: 1343:  // Populate for empty left.
    #####: 1344:  for (size_t r_i = 1; r_i < costs[0].size(); ++r_i) {
    %%%%%: 1344-block  0
    %%%%%: 1344-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed (fallthrough)
    #####: 1345:    costs[0][r_i] = static_cast<double>(r_i);
    %%%%%: 1345-block  0
call    0 never executed
call    1 never executed
    #####: 1346:    best_move[0][r_i] = kAdd;
call    0 never executed
call    1 never executed
        -: 1347:  }
        -: 1348:
    #####: 1349:  for (size_t l_i = 0; l_i < left.size(); ++l_i) {
    %%%%%: 1349-block  0
    %%%%%: 1349-block  1
    %%%%%: 1349-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1350:    for (size_t r_i = 0; r_i < right.size(); ++r_i) {
    %%%%%: 1350-block  0
    %%%%%: 1350-block  1
    %%%%%: 1350-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1351:      if (left[l_i] == right[r_i]) {
    %%%%%: 1351-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 1352:        // Found a match. Consume it.
    #####: 1353:        costs[l_i + 1][r_i + 1] = costs[l_i][r_i];
    %%%%%: 1353-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1354:        best_move[l_i + 1][r_i + 1] = kMatch;
call    0 never executed
call    1 never executed
    #####: 1355:        continue;
        -: 1356:      }
        -: 1357:
    #####: 1358:      const double add = costs[l_i + 1][r_i];
    %%%%%: 1358-block  0
call    0 never executed
call    1 never executed
    #####: 1359:      const double remove = costs[l_i][r_i + 1];
call    0 never executed
call    1 never executed
    #####: 1360:      const double replace = costs[l_i][r_i];
call    0 never executed
call    1 never executed
    #####: 1361:      if (add < remove && add < replace) {
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1361-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1362:        costs[l_i + 1][r_i + 1] = add + 1;
    %%%%%: 1362-block  0
call    0 never executed
call    1 never executed
    #####: 1363:        best_move[l_i + 1][r_i + 1] = kAdd;
call    0 never executed
call    1 never executed
    #####: 1364:      } else if (remove < add && remove < replace) {
    %%%%%: 1364-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1364-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1365:        costs[l_i + 1][r_i + 1] = remove + 1;
    %%%%%: 1365-block  0
call    0 never executed
call    1 never executed
    #####: 1366:        best_move[l_i + 1][r_i + 1] = kRemove;
call    0 never executed
call    1 never executed
        -: 1367:      } else {
        -: 1368:        // We make replace a little more expensive than add/remove to lower
        -: 1369:        // their priority.
    #####: 1370:        costs[l_i + 1][r_i + 1] = replace + 1.00001;
    %%%%%: 1370-block  0
call    0 never executed
call    1 never executed
    #####: 1371:        best_move[l_i + 1][r_i + 1] = kReplace;
call    0 never executed
call    1 never executed
        -: 1372:      }
        -: 1373:    }
        -: 1374:  }
        -: 1375:
        -: 1376:  // Reconstruct the best path. We do it in reverse order.
    #####: 1377:  std::vector<EditType> best_path;
    #####: 1378:  for (size_t l_i = left.size(), r_i = right.size(); l_i > 0 || r_i > 0;) {
    %%%%%: 1378-block  0
call    0 never executed
call    1 never executed
    %%%%%: 1378-block  1
branch  2 never executed
branch  3 never executed (fallthrough)
    %%%%%: 1378-block  2
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 1379:    EditType move = best_move[l_i][r_i];
    %%%%%: 1379-block  0
call    0 never executed
call    1 never executed
    #####: 1380:    best_path.push_back(move);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1381:    l_i -= move != kAdd;
    #####: 1382:    r_i -= move != kRemove;
    %%%%%: 1382-block  0
        -: 1383:  }
    #####: 1384:  std::reverse(best_path.begin(), best_path.end());
    %%%%%: 1384-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 1385:  return best_path;
    %%%%%: 1385-block  0
    %%%%%: 1385-block  1
    #####: 1386:}
    %%%%%: 1386-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1386-block  1
call    2 never executed
    $$$$$: 1386-block  2
call    3 never executed
    $$$$$: 1386-block  3
call    4 never executed
        -: 1387:
        -: 1388:namespace {
        -: 1389:
        -: 1390:// Helper class to convert string into ids with deduplication.
        -: 1391:class InternalStrings {
        -: 1392: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_115InternalStrings5GetIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1393:  size_t GetId(const std::string& str) {
    #####: 1394:    IdMap::iterator it = ids_.find(str);
    %%%%%: 1394-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1395:    if (it != ids_.end()) return it->second;
    %%%%%: 1395-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1395-block  1
call    4 never executed
    #####: 1396:    size_t id = ids_.size();
    %%%%%: 1396-block  0
call    0 never executed
    #####: 1397:    return ids_[str] = id;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1397-block  0
        -: 1398:  }
        -: 1399:
        -: 1400: private:
        -: 1401:  typedef std::map<std::string, size_t> IdMap;
        -: 1402:  IdMap ids_;
        -: 1403:};
        -: 1404:
        -: 1405:}  // namespace
        -: 1406:
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_ called 0 returned 0% blocks executed 0%
    #####: 1407:std::vector<EditType> CalculateOptimalEdits(
        -: 1408:    const std::vector<std::string>& left,
        -: 1409:    const std::vector<std::string>& right) {
    #####: 1410:  std::vector<size_t> left_ids, right_ids;
        -: 1411:  {
    #####: 1412:    InternalStrings intern_table;
    %%%%%: 1412-block  0
call    0 never executed
    #####: 1413:    for (size_t i = 0; i < left.size(); ++i) {
    %%%%%: 1413-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1414:      left_ids.push_back(intern_table.GetId(left[i]));
    %%%%%: 1414-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1414-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 1414-block  2
    $$$$$: 1414-block  3
        -: 1415:    }
    #####: 1416:    for (size_t i = 0; i < right.size(); ++i) {
    %%%%%: 1416-block  0
    %%%%%: 1416-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1417:      right_ids.push_back(intern_table.GetId(right[i]));
    %%%%%: 1417-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1417-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 1417-block  2
    $$$$$: 1417-block  3
        -: 1418:    }
    #####: 1419:  }
    %%%%%: 1419-block  0
call    0 never executed
    $$$$$: 1419-block  1
call    1 never executed
    #####: 1420:  return CalculateOptimalEdits(left_ids, right_ids);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1420-block  0
    #####: 1421:}
    %%%%%: 1421-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1421-block  1
call    2 never executed
    $$$$$: 1421-block  2
call    3 never executed
        -: 1422:
        -: 1423:namespace {
        -: 1424:
        -: 1425:// Helper class that holds the state for one hunk and prints it out to the
        -: 1426:// stream.
        -: 1427:// It reorders adds/removes when possible to group all removes before all
        -: 1428:// adds. It also adds the hunk header before printint into the stream.
        -: 1429:class Hunk {
        -: 1430: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14HunkC2Eyy called 0 returned 0% blocks executed 0%
    #####: 1431:  Hunk(size_t left_start, size_t right_start)
    #####: 1432:      : left_start_(left_start),
    #####: 1433:        right_start_(right_start),
    #####: 1434:        adds_(),
    #####: 1435:        removes_(),
    #####: 1436:        common_() {}
    %%%%%: 1436-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1437:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk8PushLineEcPKc called 0 returned 0% blocks executed 0%
    #####: 1438:  void PushLine(char edit, const char* line) {
    #####: 1439:    switch (edit) {
    %%%%%: 1439-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1440:      case ' ':
    #####: 1441:        ++common_;
    #####: 1442:        FlushEdits();
    %%%%%: 1442-block  0
call    0 never executed
    #####: 1443:        hunk_.push_back(std::make_pair(' ', line));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 1443-block  0
    $$$$$: 1443-block  1
call    4 never executed
    #####: 1444:        break;
    %%%%%: 1444-block  0
    #####: 1445:      case '-':
    #####: 1446:        ++removes_;
    #####: 1447:        hunk_removes_.push_back(std::make_pair('-', line));
    %%%%%: 1447-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 1447-block  1
    $$$$$: 1447-block  2
call    4 never executed
    #####: 1448:        break;
    %%%%%: 1448-block  0
    #####: 1449:      case '+':
    #####: 1450:        ++adds_;
    #####: 1451:        hunk_adds_.push_back(std::make_pair('+', line));
    %%%%%: 1451-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 1451-block  1
    #####: 1452:        break;
    %%%%%: 1452-block  0
        -: 1453:    }
    #####: 1454:  }
    %%%%%: 1454-block  0
        -: 1455:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk7PrintToEPSo called 0 returned 0% blocks executed 0%
    #####: 1456:  void PrintTo(std::ostream* os) {
    #####: 1457:    PrintHeader(os);
    %%%%%: 1457-block  0
call    0 never executed
    #####: 1458:    FlushEdits();
call    0 never executed
    #####: 1459:    for (std::list<std::pair<char, const char*> >::const_iterator it =
    #####: 1460:             hunk_.begin();
call    0 never executed
call    1 never executed
    #####: 1461:         it != hunk_.end(); ++it) {
    %%%%%: 1461-block  0
call    0 never executed
    %%%%%: 1461-block  1
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 1462:      *os << it->first << it->second << "\n";
    %%%%%: 1462-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1462-block  1
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1462-block  2
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
        -: 1463:    }
    #####: 1464:  }
    %%%%%: 1464-block  0
        -: 1465:
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk9has_editsEv called 0 returned 0% blocks executed 0%
    #####: 1466:  bool has_edits() const { return adds_ || removes_; }
    %%%%%: 1466-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1466-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1466-block  2
    %%%%%: 1466-block  3
    %%%%%: 1466-block  4
        -: 1467:
        -: 1468: private:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk10FlushEditsEv called 0 returned 0% blocks executed 0%
    #####: 1469:  void FlushEdits() {
    #####: 1470:    hunk_.splice(hunk_.end(), hunk_removes_);
    %%%%%: 1470-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1471:    hunk_.splice(hunk_.end(), hunk_adds_);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1472:  }
        -: 1473:
        -: 1474:  // Print a unified diff header for one hunk.
        -: 1475:  // The format is
        -: 1476:  //   "@@ -<left_start>,<left_length> +<right_start>,<right_length> @@"
        -: 1477:  // where the left/right parts are omitted if unnecessary.
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk11PrintHeaderEPSo called 0 returned 0% blocks executed 0%
    #####: 1478:  void PrintHeader(std::ostream* ss) const {
    #####: 1479:    *ss << "@@ ";
    %%%%%: 1479-block  0
call    0 never executed
    #####: 1480:    if (removes_) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1481:      *ss << "-" << left_start_ << "," << (removes_ + common_);
    %%%%%: 1481-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1482:    }
    #####: 1483:    if (removes_ && adds_) {
    %%%%%: 1483-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1483-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1484:      *ss << " ";
    %%%%%: 1484-block  0
call    0 never executed
        -: 1485:    }
    #####: 1486:    if (adds_) {
    %%%%%: 1486-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1487:      *ss << "+" << right_start_ << "," << (adds_ + common_);
    %%%%%: 1487-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1488:    }
    #####: 1489:    *ss << " @@\n";
    %%%%%: 1489-block  0
call    0 never executed
    #####: 1490:  }
        -: 1491:
        -: 1492:  size_t left_start_, right_start_;
        -: 1493:  size_t adds_, removes_, common_;
        -: 1494:  std::list<std::pair<char, const char*> > hunk_, hunk_adds_, hunk_removes_;
        -: 1495:};
        -: 1496:
        -: 1497:}  // namespace
        -: 1498:
        -: 1499:// Create a list of diff hunks in Unified diff format.
        -: 1500:// Each hunk has a header generated by PrintHeader above plus a body with
        -: 1501:// lines prefixed with ' ' for no change, '-' for deletion and '+' for
        -: 1502:// addition.
        -: 1503:// 'context' represents the desired unchanged prefix/suffix around the diff.
        -: 1504:// If two hunks are close enough that their contexts overlap, then they are
        -: 1505:// joined into one hunk.
function _ZN7testing8internal13edit_distance17CreateUnifiedDiffERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_y called 0 returned 0% blocks executed 0%
    #####: 1506:std::string CreateUnifiedDiff(const std::vector<std::string>& left,
        -: 1507:                              const std::vector<std::string>& right,
        -: 1508:                              size_t context) {
    #####: 1509:  const std::vector<EditType> edits = CalculateOptimalEdits(left, right);
    %%%%%: 1509-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1510:
    #####: 1511:  size_t l_i = 0, r_i = 0, edit_i = 0;
    #####: 1512:  std::stringstream ss;
    %%%%%: 1512-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1513:  while (edit_i < edits.size()) {
    %%%%%: 1513-block  0
    %%%%%: 1513-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -: 1514:    // Find first edit.
    #####: 1515:    while (edit_i < edits.size() && edits[edit_i] == kMatch) {
    %%%%%: 1515-block  0
    %%%%%: 1515-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1515-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 1515-block  3
    %%%%%: 1515-block  4
    %%%%%: 1515-block  5
branch  6 never executed
branch  7 never executed (fallthrough)
    #####: 1516:      ++l_i;
    #####: 1517:      ++r_i;
    #####: 1518:      ++edit_i;
    %%%%%: 1518-block  0
        -: 1519:    }
        -: 1520:
        -: 1521:    // Find the first line to include in the hunk.
    #####: 1522:    const size_t prefix_context = std::min(l_i, context);
    %%%%%: 1522-block  0
call    0 never executed
    #####: 1523:    Hunk hunk(l_i - prefix_context + 1, r_i - prefix_context + 1);
call    0 never executed
    #####: 1524:    for (size_t i = prefix_context; i > 0; --i) {
    %%%%%: 1524-block  0
    %%%%%: 1524-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1525:      hunk.PushLine(' ', left[l_i - i].c_str());
    %%%%%: 1525-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
        -: 1526:    }
        -: 1527:
        -: 1528:    // Iterate the edits until we found enough suffix for the hunk or the input
        -: 1529:    // is over.
    #####: 1530:    size_t n_suffix = 0;
    #####: 1531:    for (; edit_i < edits.size(); ++edit_i) {
    %%%%%: 1531-block  0
    %%%%%: 1531-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1532:      if (n_suffix >= context) {
    %%%%%: 1532-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1533:        // Continue only if the next hunk is very close.
    #####: 1534:        auto it = edits.begin() + static_cast<int>(edit_i);
    %%%%%: 1534-block  0
call    0 never executed
call    1 never executed
    #####: 1535:        while (it != edits.end() && *it == kMatch) ++it;
    %%%%%: 1535-block  0
call    0 never executed
    %%%%%: 1535-block  1
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1535-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 1535-block  3
    %%%%%: 1535-block  4
    %%%%%: 1535-block  5
branch  8 never executed
branch  9 never executed (fallthrough)
    #####: 1536:        if (it == edits.end() ||
    %%%%%: 1536-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1536-block  1
    %%%%%: 1536-block  2
    #####: 1537:            static_cast<size_t>(it - edits.begin()) - edit_i >= context) {
    %%%%%: 1537-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1537-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
        -: 1538:          // There is no next edit or it is too far away.
    #####: 1539:          break;
    %%%%%: 1539-block  0
        -: 1540:        }
        -: 1541:      }
        -: 1542:
    #####: 1543:      EditType edit = edits[edit_i];
    %%%%%: 1543-block  0
call    0 never executed
        -: 1544:      // Reset count when a non match is found.
    #####: 1545:      n_suffix = edit == kMatch ? n_suffix + 1 : 0;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1545-block  0
    %%%%%: 1545-block  1
        -: 1546:
    #####: 1547:      if (edit == kMatch || edit == kRemove || edit == kReplace) {
    %%%%%: 1547-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1547-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1547-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 1548:        hunk.PushLine(edit == kMatch ? ' ' : '-', left[l_i].c_str());
    %%%%%: 1548-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1548-block  1
    %%%%%: 1548-block  2
    %%%%%: 1548-block  3
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
        -: 1549:      }
    #####: 1550:      if (edit == kAdd || edit == kReplace) {
    %%%%%: 1550-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1550-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1551:        hunk.PushLine('+', right[r_i].c_str());
    %%%%%: 1551-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
        -: 1552:      }
        -: 1553:
        -: 1554:      // Advance indices, depending on edit type.
    #####: 1555:      l_i += edit != kAdd;
    #####: 1556:      r_i += edit != kRemove;
    %%%%%: 1556-block  0
        -: 1557:    }
        -: 1558:
    #####: 1559:    if (!hunk.has_edits()) {
    %%%%%: 1559-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1560:      // We are done. We don't want this hunk.
    #####: 1561:      break;
    %%%%%: 1561-block  0
        -: 1562:    }
        -: 1563:
    #####: 1564:    hunk.PrintTo(&ss);
    %%%%%: 1564-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1565:  }
    %%%%%: 1565-block  0
    %%%%%: 1565-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    $$$$$: 1565-block  2
call    3 never executed
    #####: 1566:  return ss.str();
    %%%%%: 1566-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1566-block  1
    #####: 1567:}
    %%%%%: 1567-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1567-block  1
call    2 never executed
    $$$$$: 1567-block  2
call    3 never executed
        -: 1568:
        -: 1569:}  // namespace edit_distance
        -: 1570:
        -: 1571:namespace {
        -: 1572:
        -: 1573:// The string representation of the values received in EqFailure() are already
        -: 1574:// escaped. Split them on escaped '\n' boundaries. Leave all other escaped
        -: 1575:// characters the same.
function _ZN7testing8internal12_GLOBAL__N_118SplitEscapedStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 14 returned 100% blocks executed 63%
       14: 1576:std::vector<std::string> SplitEscapedString(const std::string& str) {
       14: 1577:  std::vector<std::string> lines;
       14: 1578:  size_t start = 0, end = str.size();
       14: 1578-block  0
call    0 returned 14
       14: 1579:  if (end > 2 && str[0] == '"' && str[end - 1] == '"') {
branch  0 taken 14 (fallthrough)
branch  1 taken 0
       14: 1579-block  0
call    2 returned 14
branch  3 taken 2 (fallthrough)
branch  4 taken 12
        2: 1579-block  1
call    5 returned 2
branch  6 taken 2 (fallthrough)
branch  7 taken 0
        2: 1579-block  2
       12: 1579-block  3
       14: 1579-block  4
branch  8 taken 2 (fallthrough)
branch  9 taken 12
        2: 1580:    ++start;
        2: 1581:    --end;
        2: 1581-block  0
        -: 1582:  }
       14: 1583:  bool escaped = false;
     1645: 1584:  for (size_t i = start; i + 1 < end; ++i) {
       14: 1584-block  0
     1631: 1584-block  1
     1645: 1584-block  2
branch  0 taken 1631
branch  1 taken 14 (fallthrough)
     1631: 1585:    if (escaped) {
     1631: 1585-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1631
    #####: 1586:      escaped = false;
    #####: 1587:      if (str[i] == 'n') {
    %%%%%: 1587-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1588:        lines.push_back(str.substr(start, i - start - 1));
    %%%%%: 1588-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1588-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1588-block  2
call    6 never executed
    $$$$$: 1588-block  3
call    7 never executed
    $$$$$: 1588-block  4
    #####: 1589:        start = i + 1;
        -: 1590:      }
        -: 1591:    } else {
     1631: 1592:      escaped = str[i] == '\\';
     1631: 1592-block  0
call    0 returned 1631
        -: 1593:    }
        -: 1594:  }
       14: 1595:  lines.push_back(str.substr(start, end - start));
       14: 1595-block  0
call    0 returned 14
branch  1 taken 14 (fallthrough)
branch  2 taken 0 (throw)
       14: 1595-block  1
call    3 returned 14
branch  4 taken 14 (fallthrough)
branch  5 taken 0 (throw)
       14: 1595-block  2
call    6 returned 14
    $$$$$: 1595-block  3
call    7 never executed
    $$$$$: 1595-block  4
       14: 1596:  return lines;
       14: 1596-block  0
    =====: 1597:}
    $$$$$: 1597-block  0
call    0 never executed
        -: 1598:
        -: 1599:}  // namespace
        -: 1600:
        -: 1601:// Constructs and returns the message for an equality assertion
        -: 1602:// (e.g. ASSERT_EQ, EXPECT_STREQ, etc) failure.
        -: 1603://
        -: 1604:// The first four parameters are the expressions used in the assertion
        -: 1605:// and their values, as strings.  For example, for ASSERT_EQ(foo, bar)
        -: 1606:// where foo is 5 and bar is 6, we have:
        -: 1607://
        -: 1608://   lhs_expression: "foo"
        -: 1609://   rhs_expression: "bar"
        -: 1610://   lhs_value:      "5"
        -: 1611://   rhs_value:      "6"
        -: 1612://
        -: 1613:// The ignoring_case parameter is true if and only if the assertion is a
        -: 1614:// *_STRCASEEQ*.  When it's true, the string "Ignoring case" will
        -: 1615:// be inserted into the message.
function _ZN7testing8internal9EqFailureEPKcS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 7 returned 100% blocks executed 66%
        7: 1616:AssertionResult EqFailure(const char* lhs_expression,
        -: 1617:                          const char* rhs_expression,
        -: 1618:                          const std::string& lhs_value,
        -: 1619:                          const std::string& rhs_value, bool ignoring_case) {
        7: 1620:  Message msg;
        7: 1620-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 1621:  msg << "Expected equality of these values:";
        7: 1621-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 1622:  msg << "\n  " << lhs_expression;
        7: 1622-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 1622-block  1
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        7: 1623:  if (lhs_value != lhs_expression) {
        7: 1623-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 1623-block  1
branch  3 taken 7 (fallthrough)
branch  4 taken 0
        7: 1624:    msg << "\n    Which is: " << lhs_value;
        7: 1624-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 1624-block  1
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        -: 1625:  }
        7: 1626:  msg << "\n  " << rhs_expression;
        7: 1626-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 1626-block  1
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        7: 1627:  if (rhs_value != rhs_expression) {
        7: 1627-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 1627-block  1
branch  3 taken 7 (fallthrough)
branch  4 taken 0
        7: 1628:    msg << "\n    Which is: " << rhs_value;
        7: 1628-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 1628-block  1
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        -: 1629:  }
        -: 1630:
        7: 1631:  if (ignoring_case) {
        7: 1631-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 7
    #####: 1632:    msg << "\nIgnoring case";
    %%%%%: 1632-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1633:  }
        -: 1634:
       7*: 1635:  if (!lhs_value.empty() && !rhs_value.empty()) {
        7: 1635-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0
        7: 1635-block  1
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0
        7: 1635-block  2
    %%%%%: 1635-block  3
        7: 1635-block  4
branch  6 taken 7 (fallthrough)
branch  7 taken 0
        7: 1636:    const std::vector<std::string> lhs_lines = SplitEscapedString(lhs_value);
        7: 1636-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 1637:    const std::vector<std::string> rhs_lines = SplitEscapedString(rhs_value);
        7: 1637-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
       7*: 1638:    if (lhs_lines.size() > 1 || rhs_lines.size() > 1) {
        7: 1638-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0
        7: 1638-block  1
call    3 returned 7
branch  4 taken 0 (fallthrough)
branch  5 taken 7
    %%%%%: 1638-block  2
        7: 1638-block  3
        7: 1638-block  4
branch  6 taken 0 (fallthrough)
branch  7 taken 7
    #####: 1639:      msg << "\nWith diff:\n"
    %%%%%: 1639-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1640:          << edit_distance::CreateUnifiedDiff(lhs_lines, rhs_lines);
    %%%%%: 1640-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1640-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1640-block  2
call    6 never executed
    $$$$$: 1640-block  3
call    7 never executed
    $$$$$: 1640-block  4
        -: 1641:    }
        7: 1642:  }
        7: 1642-block  0
call    0 returned 7
call    1 returned 7
    $$$$$: 1642-block  1
call    2 never executed
    $$$$$: 1642-block  2
call    3 never executed
        -: 1643:
       14: 1644:  return AssertionFailure() << msg;
        7: 1644-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 1644-block  1
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        7: 1644-block  2
call    6 returned 7
branch  7 taken 7 (fallthrough)
branch  8 taken 0 (throw)
        7: 1644-block  3
        7: 1644-block  4
call    9 returned 7
        7: 1644-block  5
    $$$$$: 1644-block  6
call   10 never executed
    $$$$$: 1644-block  7
        7: 1645:}
call    0 returned 7
    $$$$$: 1645-block  0
call    1 never executed
        -: 1646:
        -: 1647:// Constructs a failure message for Boolean assertions such as EXPECT_TRUE.
function _ZN7testing8internal30GetBoolAssertionFailureMessageB5cxx11ERKNS_15AssertionResultEPKcS5_S5_ called 0 returned 0% blocks executed 0%
    #####: 1648:std::string GetBoolAssertionFailureMessage(
        -: 1649:    const AssertionResult& assertion_result, const char* expression_text,
        -: 1650:    const char* actual_predicate_value, const char* expected_predicate_value) {
    #####: 1651:  const char* actual_message = assertion_result.message();
    %%%%%: 1651-block  0
call    0 never executed
    #####: 1652:  Message msg;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1653:  msg << "Value of: " << expression_text
    %%%%%: 1653-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1653-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 1654:      << "\n  Actual: " << actual_predicate_value;
    %%%%%: 1654-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1654-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 1655:  if (actual_message[0] != '\0') msg << " (" << actual_message << ")";
    %%%%%: 1655-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1655-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 1655-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1655-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    #####: 1656:  msg << "\nExpected: " << expected_predicate_value;
    %%%%%: 1656-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1656-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 1657:  return msg.GetString();
    %%%%%: 1657-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1657-block  1
    #####: 1658:}
    %%%%%: 1658-block  0
call    0 never executed
    $$$$$: 1658-block  1
call    1 never executed
        -: 1659:
        -: 1660:// Helper function for implementing ASSERT_NEAR.
function _ZN7testing8internal20DoubleNearPredFormatEPKcS2_S2_ddd called 0 returned 0% blocks executed 0%
    #####: 1661:AssertionResult DoubleNearPredFormat(const char* expr1, const char* expr2,
        -: 1662:                                     const char* abs_error_expr, double val1,
        -: 1663:                                     double val2, double abs_error) {
    #####: 1664:  const double diff = fabs(val1 - val2);
    #####: 1665:  if (diff <= abs_error) return AssertionSuccess();
    %%%%%: 1665-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1665-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 1665-block  2
        -: 1666:
        -: 1667:  // Find the value which is closest to zero.
    #####: 1668:  const double min_abs = std::min(fabs(val1), fabs(val2));
    %%%%%: 1668-block  0
call    0 never executed
        -: 1669:  // Find the distance to the next double from that value.
        -: 1670:  const double epsilon =
    #####: 1671:      nextafter(min_abs, std::numeric_limits<double>::infinity()) - min_abs;
call    0 never executed
        -: 1672:  // Detect the case where abs_error is so small that EXPECT_NEAR is
        -: 1673:  // effectively the same as EXPECT_EQUAL, and give an informative error
        -: 1674:  // message so that the situation can be more easily understood without
        -: 1675:  // requiring exotic floating-point knowledge.
        -: 1676:  // Don't do an epsilon check if abs_error is zero because that implies
        -: 1677:  // that an equality check was actually intended.
    #####: 1678:  if (!(std::isnan)(val1) && !(std::isnan)(val2) && abs_error > 0 &&
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1678-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 1678-block  1
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 1678-block  2
    %%%%%: 1678-block  3
    %%%%%: 1678-block  4
branch  8 never executed (fallthrough)
branch  9 never executed
    #####: 1679:      abs_error < epsilon) {
    %%%%%: 1679-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1680:    return AssertionFailure()
    %%%%%: 1680-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1680-block  1
call    3 never executed
    $$$$$: 1680-block  2
call    4 never executed
    $$$$$: 1680-block  3
    #####: 1681:           << "The difference between " << expr1 << " and " << expr2 << " is "
    %%%%%: 1681-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1681-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1681-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1681-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1681-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    #####: 1682:           << diff << ", where\n"
    %%%%%: 1682-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1682-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 1683:           << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1683-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1683-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1683-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1683-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1684:           << expr2 << " evaluates to " << val2 << ".\nThe abs_error parameter "
    %%%%%: 1684-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1684-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1684-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1684-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1685:           << abs_error_expr << " evaluates to " << abs_error
    %%%%%: 1685-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1685-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1685-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 1686:           << " which is smaller than the minimum distance between doubles for "
    #####: 1687:              "numbers of this magnitude which is "
    %%%%%: 1687-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1688:           << epsilon
    %%%%%: 1688-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1689:           << ", thus making this EXPECT_NEAR check equivalent to "
    #####: 1690:              "EXPECT_EQUAL. Consider using EXPECT_DOUBLE_EQ instead.";
    %%%%%: 1690-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1690-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 1691:  }
    #####: 1692:  return AssertionFailure()
    %%%%%: 1692-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1692-block  1
call    3 never executed
    $$$$$: 1692-block  2
call    4 never executed
    $$$$$: 1692-block  3
    #####: 1693:         << "The difference between " << expr1 << " and " << expr2 << " is "
    %%%%%: 1693-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1693-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1693-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1693-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1693-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    #####: 1694:         << diff << ", which exceeds " << abs_error_expr << ", where\n"
    %%%%%: 1694-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1694-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1694-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1694-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1695:         << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1695-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1695-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1695-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1695-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1696:         << expr2 << " evaluates to " << val2 << ", and\n"
    %%%%%: 1696-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1696-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1696-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1696-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1697:         << abs_error_expr << " evaluates to " << abs_error << ".";
    %%%%%: 1697-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1697-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1697-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1697-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1697-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1697-block  5
        -: 1698:}
        -: 1699:
        -: 1700:// Helper template for implementing FloatLE() and DoubleLE().
        -: 1701:template <typename RawType>
    #####: 1702:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1703:                                RawType val1, RawType val2) {
        -: 1704:  // Returns success if val1 is less than val2,
    #####: 1705:  if (val1 < val2) {
    #####: 1706:    return AssertionSuccess();
        -: 1707:  }
        -: 1708:
        -: 1709:  // or if val1 is almost equal to val2.
    #####: 1710:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    #####: 1711:  if (lhs.AlmostEquals(rhs)) {
    #####: 1712:    return AssertionSuccess();
        -: 1713:  }
        -: 1714:
        -: 1715:  // Note that the above two checks will both fail if either val1 or
        -: 1716:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1717:  // any predicate involving a NaN must return false.
        -: 1718:
    #####: 1719:  ::std::stringstream val1_ss;
    #####: 1720:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1721:          << val1;
        -: 1722:
    #####: 1723:  ::std::stringstream val2_ss;
    #####: 1724:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1725:          << val2;
        -: 1726:
        -: 1727:  return AssertionFailure()
    #####: 1728:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    #####: 1729:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    #####: 1730:         << StringStreamToString(&val2_ss);
    #####: 1731:}
------------------
_ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1702:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1703:                                RawType val1, RawType val2) {
        -: 1704:  // Returns success if val1 is less than val2,
    #####: 1705:  if (val1 < val2) {
    %%%%%: 1705-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1706:    return AssertionSuccess();
    %%%%%: 1706-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1707:  }
        -: 1708:
        -: 1709:  // or if val1 is almost equal to val2.
    #####: 1710:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1710-block  0
call    0 never executed
call    1 never executed
    #####: 1711:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1711-block  0
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 1712:    return AssertionSuccess();
    %%%%%: 1712-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1713:  }
        -: 1714:
        -: 1715:  // Note that the above two checks will both fail if either val1 or
        -: 1716:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1717:  // any predicate involving a NaN must return false.
        -: 1718:
    #####: 1719:  ::std::stringstream val1_ss;
    %%%%%: 1719-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1720:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1720-block  0
call    0 never executed
call    1 never executed
    #####: 1721:          << val1;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1722:
    #####: 1723:  ::std::stringstream val2_ss;
    %%%%%: 1723-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1724:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1724-block  0
call    0 never executed
call    1 never executed
    #####: 1725:          << val2;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1726:
        -: 1727:  return AssertionFailure()
    #####: 1728:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1728-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1728-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1728-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1728-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1728-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1728-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    $$$$$: 1728-block  6
call   18 never executed
    $$$$$: 1728-block  7
    #####: 1729:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1729-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1729-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1729-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1729-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
call   12 never executed
    $$$$$: 1729-block  4
call   13 never executed
    $$$$$: 1729-block  5
    #####: 1730:         << StringStreamToString(&val2_ss);
    %%%%%: 1730-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1730-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1730-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1730-block  3
    %%%%%: 1730-block  4
call    9 never executed
call   10 never executed
    $$$$$: 1730-block  5
call   11 never executed
    $$$$$: 1730-block  6
    #####: 1731:}
call    0 never executed
call    1 never executed
    $$$$$: 1731-block  0
call    2 never executed
    $$$$$: 1731-block  1
call    3 never executed
------------------
_ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1702:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1703:                                RawType val1, RawType val2) {
        -: 1704:  // Returns success if val1 is less than val2,
    #####: 1705:  if (val1 < val2) {
    %%%%%: 1705-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1706:    return AssertionSuccess();
    %%%%%: 1706-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1707:  }
        -: 1708:
        -: 1709:  // or if val1 is almost equal to val2.
    #####: 1710:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1710-block  0
call    0 never executed
call    1 never executed
    #####: 1711:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1711-block  0
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 1712:    return AssertionSuccess();
    %%%%%: 1712-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1713:  }
        -: 1714:
        -: 1715:  // Note that the above two checks will both fail if either val1 or
        -: 1716:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1717:  // any predicate involving a NaN must return false.
        -: 1718:
    #####: 1719:  ::std::stringstream val1_ss;
    %%%%%: 1719-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1720:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1720-block  0
call    0 never executed
call    1 never executed
    #####: 1721:          << val1;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1722:
    #####: 1723:  ::std::stringstream val2_ss;
    %%%%%: 1723-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1724:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1724-block  0
call    0 never executed
call    1 never executed
    #####: 1725:          << val2;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1726:
        -: 1727:  return AssertionFailure()
    #####: 1728:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1728-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1728-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1728-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1728-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1728-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1728-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    $$$$$: 1728-block  6
call   18 never executed
    $$$$$: 1728-block  7
    #####: 1729:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1729-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1729-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1729-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1729-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
call   12 never executed
    $$$$$: 1729-block  4
call   13 never executed
    $$$$$: 1729-block  5
    #####: 1730:         << StringStreamToString(&val2_ss);
    %%%%%: 1730-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1730-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1730-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1730-block  3
    %%%%%: 1730-block  4
call    9 never executed
call   10 never executed
    $$$$$: 1730-block  5
call   11 never executed
    $$$$$: 1730-block  6
    #####: 1731:}
call    0 never executed
call    1 never executed
    $$$$$: 1731-block  0
call    2 never executed
    $$$$$: 1731-block  1
call    3 never executed
------------------
        -: 1732:
        -: 1733:}  // namespace internal
        -: 1734:
        -: 1735:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1736:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing7FloatLEEPKcS1_ff called 0 returned 0% blocks executed 0%
    #####: 1737:AssertionResult FloatLE(const char* expr1, const char* expr2, float val1,
        -: 1738:                        float val2) {
    #####: 1739:  return internal::FloatingPointLE<float>(expr1, expr2, val1, val2);
    %%%%%: 1739-block  0
call    0 never executed
        -: 1740:}
        -: 1741:
        -: 1742:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1743:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing8DoubleLEEPKcS1_dd called 0 returned 0% blocks executed 0%
    #####: 1744:AssertionResult DoubleLE(const char* expr1, const char* expr2, double val1,
        -: 1745:                         double val2) {
    #####: 1746:  return internal::FloatingPointLE<double>(expr1, expr2, val1, val2);
    %%%%%: 1746-block  0
call    0 never executed
        -: 1747:}
        -: 1748:
        -: 1749:namespace internal {
        -: 1750:
        -: 1751:// The helper function for {ASSERT|EXPECT}_STREQ.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1752:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 1753:                               const char* rhs_expression, const char* lhs,
        -: 1754:                               const char* rhs) {
    #####: 1755:  if (String::CStringEquals(lhs, rhs)) {
    %%%%%: 1755-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1756:    return AssertionSuccess();
    %%%%%: 1756-block  0
call    0 never executed
        -: 1757:  }
        -: 1758:
    #####: 1759:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
    %%%%%: 1759-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1759-block  1
call    3 never executed
    $$$$$: 1759-block  2
call    4 never executed
    $$$$$: 1759-block  3
    #####: 1760:                   PrintToString(rhs), false);
    %%%%%: 1760-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1760-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 1760-block  2
call    7 never executed
        -: 1761:}
        -: 1762:
        -: 1763:// The helper function for {ASSERT|EXPECT}_STRCASEEQ.
function _ZN7testing8internal18CmpHelperSTRCASEEQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1764:AssertionResult CmpHelperSTRCASEEQ(const char* lhs_expression,
        -: 1765:                                   const char* rhs_expression, const char* lhs,
        -: 1766:                                   const char* rhs) {
    #####: 1767:  if (String::CaseInsensitiveCStringEquals(lhs, rhs)) {
    %%%%%: 1767-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1768:    return AssertionSuccess();
    %%%%%: 1768-block  0
call    0 never executed
        -: 1769:  }
        -: 1770:
    #####: 1771:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
    %%%%%: 1771-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1771-block  1
call    3 never executed
    $$$$$: 1771-block  2
call    4 never executed
    $$$$$: 1771-block  3
    #####: 1772:                   PrintToString(rhs), true);
    %%%%%: 1772-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1772-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 1772-block  2
call    7 never executed
        -: 1773:}
        -: 1774:
        -: 1775:// The helper function for {ASSERT|EXPECT}_STRNE.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1776:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 1777:                               const char* s2_expression, const char* s1,
        -: 1778:                               const char* s2) {
    #####: 1779:  if (!String::CStringEquals(s1, s2)) {
    %%%%%: 1779-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1780:    return AssertionSuccess();
    %%%%%: 1780-block  0
call    0 never executed
        -: 1781:  } else {
    #####: 1782:    return AssertionFailure()
    %%%%%: 1782-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1782-block  1
call    3 never executed
    $$$$$: 1782-block  2
call    4 never executed
    #####: 1783:           << "Expected: (" << s1_expression << ") != (" << s2_expression
    %%%%%: 1783-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1783-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1783-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1783-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1784:           << "), actual: \"" << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1784-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1784-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1784-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1784-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1784-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1784-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 1784-block  6
        -: 1785:  }
        -: 1786:}
        -: 1787:
        -: 1788:// The helper function for {ASSERT|EXPECT}_STRCASENE.
function _ZN7testing8internal18CmpHelperSTRCASENEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1789:AssertionResult CmpHelperSTRCASENE(const char* s1_expression,
        -: 1790:                                   const char* s2_expression, const char* s1,
        -: 1791:                                   const char* s2) {
    #####: 1792:  if (!String::CaseInsensitiveCStringEquals(s1, s2)) {
    %%%%%: 1792-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1793:    return AssertionSuccess();
    %%%%%: 1793-block  0
call    0 never executed
        -: 1794:  } else {
    #####: 1795:    return AssertionFailure()
    %%%%%: 1795-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1795-block  1
call    3 never executed
    $$$$$: 1795-block  2
call    4 never executed
    #####: 1796:           << "Expected: (" << s1_expression << ") != (" << s2_expression
    %%%%%: 1796-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1796-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1796-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1796-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1797:           << ") (ignoring case), actual: \"" << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1797-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1797-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1797-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1797-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1797-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1797-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 1797-block  6
        -: 1798:  }
        -: 1799:}
        -: 1800:
        -: 1801:}  // namespace internal
        -: 1802:
        -: 1803:namespace {
        -: 1804:
        -: 1805:// Helper functions for implementing IsSubString() and IsNotSubstring().
        -: 1806:
        -: 1807:// This group of overloaded functions return true if and only if needle
        -: 1808:// is a substring of haystack.  NULL is considered a substring of
        -: 1809:// itself only.
        -: 1810:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 1811:bool IsSubstringPred(const char* needle, const char* haystack) {
    #####: 1812:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1812-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1812-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1812-block  2
        -: 1813:
    #####: 1814:  return strstr(haystack, needle) != nullptr;
    %%%%%: 1814-block  0
        -: 1815:}
        -: 1816:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKwS2_ called 0 returned 0% blocks executed 0%
    #####: 1817:bool IsSubstringPred(const wchar_t* needle, const wchar_t* haystack) {
    #####: 1818:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1818-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1818-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1818-block  2
        -: 1819:
    #####: 1820:  return wcsstr(haystack, needle) != nullptr;
    %%%%%: 1820-block  0
call    0 never executed
        -: 1821:}
        -: 1822:
        -: 1823:// StringType here can be either ::std::string or ::std::wstring.
        -: 1824:template <typename StringType>
    #####: 1825:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1826:  return haystack.find(needle) != StringType::npos;
        -: 1827:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1825:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1826:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1826-block  0
call    0 never executed
        -: 1827:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1825:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1826:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1826-block  0
call    0 never executed
        -: 1827:}
------------------
        -: 1828:
        -: 1829:// This function implements either IsSubstring() or IsNotSubstring(),
        -: 1830:// depending on the value of the expected_to_be_substring parameter.
        -: 1831:// StringType here can be const char*, const wchar_t*, ::std::string,
        -: 1832:// or ::std::wstring.
        -: 1833:template <typename StringType>
    #####: 1834:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1835:                                const char* needle_expr,
        -: 1836:                                const char* haystack_expr,
        -: 1837:                                const StringType& needle,
        -: 1838:                                const StringType& haystack) {
    #####: 1839:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    #####: 1840:    return AssertionSuccess();
        -: 1841:
    #####: 1842:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1843:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1844:  return AssertionFailure()
    #####: 1845:         << "Value of: " << needle_expr << "\n"
    #####: 1846:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    #####: 1847:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    #####: 1848:         << "a substring of " << haystack_expr << "\n"
    #####: 1849:         << "Which is: " << begin_string_quote << haystack << "\"";
        -: 1850:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1834:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1835:                                const char* needle_expr,
        -: 1836:                                const char* haystack_expr,
        -: 1837:                                const StringType& needle,
        -: 1838:                                const StringType& haystack) {
    #####: 1839:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1839-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1840:    return AssertionSuccess();
    %%%%%: 1840-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1841:
    #####: 1842:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1843:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1844:  return AssertionFailure()
    #####: 1845:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1845-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1845-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1845-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1845-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    $$$$$: 1845-block  4
call   12 never executed
    $$$$$: 1845-block  5
    #####: 1846:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1846-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1846-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1846-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1846-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1847:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1847-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1847-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1847-block  2
    %%%%%: 1847-block  3
    %%%%%: 1847-block  4
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1847-block  5
call    8 never executed
    $$$$$: 1847-block  6
    #####: 1848:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1848-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1848-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1848-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 1849:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1849-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1849-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1849-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1849-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1849-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1849-block  5
        -: 1850:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1834:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1835:                                const char* needle_expr,
        -: 1836:                                const char* haystack_expr,
        -: 1837:                                const StringType& needle,
        -: 1838:                                const StringType& haystack) {
    #####: 1839:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1839-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1840:    return AssertionSuccess();
    %%%%%: 1840-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1841:
    #####: 1842:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1843:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1844:  return AssertionFailure()
    #####: 1845:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1845-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1845-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1845-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1845-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    $$$$$: 1845-block  4
call   12 never executed
    $$$$$: 1845-block  5
    #####: 1846:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1846-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1846-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1846-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1846-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1847:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1847-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1847-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1847-block  2
    %%%%%: 1847-block  3
    %%%%%: 1847-block  4
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1847-block  5
call    8 never executed
    $$$$$: 1847-block  6
    #####: 1848:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1848-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1848-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1848-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 1849:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1849-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1849-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1849-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1849-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1849-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1849-block  5
        -: 1850:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_ called 0 returned 0% blocks executed 0%
    #####: 1834:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1835:                                const char* needle_expr,
        -: 1836:                                const char* haystack_expr,
        -: 1837:                                const StringType& needle,
        -: 1838:                                const StringType& haystack) {
    #####: 1839:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1839-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1840:    return AssertionSuccess();
    %%%%%: 1840-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1841:
    #####: 1842:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1843:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1844:  return AssertionFailure()
    #####: 1845:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1845-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1845-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1845-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1845-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    $$$$$: 1845-block  4
call   12 never executed
    $$$$$: 1845-block  5
    #####: 1846:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1846-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1846-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1846-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1846-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1847:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1847-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1847-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1847-block  2
    %%%%%: 1847-block  3
    %%%%%: 1847-block  4
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1847-block  5
call    8 never executed
    $$$$$: 1847-block  6
    #####: 1848:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1848-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1848-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1848-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 1849:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1849-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1849-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1849-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1849-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1849-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1849-block  5
        -: 1850:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_ called 0 returned 0% blocks executed 0%
    #####: 1834:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1835:                                const char* needle_expr,
        -: 1836:                                const char* haystack_expr,
        -: 1837:                                const StringType& needle,
        -: 1838:                                const StringType& haystack) {
    #####: 1839:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1839-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1840:    return AssertionSuccess();
    %%%%%: 1840-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1841:
    #####: 1842:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1843:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1844:  return AssertionFailure()
    #####: 1845:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1845-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1845-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1845-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1845-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    $$$$$: 1845-block  4
call   12 never executed
    $$$$$: 1845-block  5
    #####: 1846:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1846-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1846-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1846-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1846-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1847:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1847-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1847-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1847-block  2
    %%%%%: 1847-block  3
    %%%%%: 1847-block  4
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1847-block  5
call    8 never executed
    $$$$$: 1847-block  6
    #####: 1848:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1848-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1848-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1848-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 1849:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1849-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1849-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1849-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1849-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1849-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1849-block  5
        -: 1850:}
------------------
        -: 1851:
        -: 1852:}  // namespace
        -: 1853:
        -: 1854:// IsSubstring() and IsNotSubstring() check whether needle is a
        -: 1855:// substring of haystack (NULL is considered a substring of itself
        -: 1856:// only), and return an appropriate error message when they fail.
        -: 1857:
function _ZN7testing11IsSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1858:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1859:                            const char* needle, const char* haystack) {
    #####: 1860:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1860-block  0
call    0 never executed
        -: 1861:}
        -: 1862:
function _ZN7testing11IsSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1863:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1864:                            const wchar_t* needle, const wchar_t* haystack) {
    #####: 1865:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1865-block  0
call    0 never executed
        -: 1866:}
        -: 1867:
function _ZN7testing14IsNotSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1868:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1869:                               const char* haystack_expr, const char* needle,
        -: 1870:                               const char* haystack) {
    #####: 1871:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1871-block  0
call    0 never executed
        -: 1872:}
        -: 1873:
function _ZN7testing14IsNotSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1874:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1875:                               const char* haystack_expr, const wchar_t* needle,
        -: 1876:                               const wchar_t* haystack) {
    #####: 1877:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1877-block  0
call    0 never executed
        -: 1878:}
        -: 1879:
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1880:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1881:                            const ::std::string& needle,
        -: 1882:                            const ::std::string& haystack) {
    #####: 1883:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1883-block  0
call    0 never executed
        -: 1884:}
        -: 1885:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1886:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1887:                               const char* haystack_expr,
        -: 1888:                               const ::std::string& needle,
        -: 1889:                               const ::std::string& haystack) {
    #####: 1890:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1890-block  0
call    0 never executed
        -: 1891:}
        -: 1892:
        -: 1893:#if GTEST_HAS_STD_WSTRING
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1894:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1895:                            const ::std::wstring& needle,
        -: 1896:                            const ::std::wstring& haystack) {
    #####: 1897:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1897-block  0
call    0 never executed
        -: 1898:}
        -: 1899:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1900:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1901:                               const char* haystack_expr,
        -: 1902:                               const ::std::wstring& needle,
        -: 1903:                               const ::std::wstring& haystack) {
    #####: 1904:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1904-block  0
call    0 never executed
        -: 1905:}
        -: 1906:#endif  // GTEST_HAS_STD_WSTRING
        -: 1907:
        -: 1908:namespace internal {
        -: 1909:
        -: 1910:#ifdef GTEST_OS_WINDOWS
        -: 1911:
        -: 1912:namespace {
        -: 1913:
        -: 1914:// Helper function for IsHRESULT{SuccessFailure} predicates
function _ZN7testing8internal12_GLOBAL__N_120HRESULTFailureHelperEPKcS3_l called 0 returned 0% blocks executed 0%
    #####: 1915:AssertionResult HRESULTFailureHelper(const char* expr, const char* expected,
        -: 1916:                                     long hr) {  // NOLINT
        -: 1917:#if defined(GTEST_OS_WINDOWS_MOBILE) || defined(GTEST_OS_WINDOWS_TV_TITLE)
        -: 1918:
        -: 1919:  // Windows CE doesn't support FormatMessage.
        -: 1920:  const char error_text[] = "";
        -: 1921:
        -: 1922:#else
        -: 1923:
        -: 1924:  // Looks up the human-readable system message for the HRESULT code
        -: 1925:  // and since we're not passing any params to FormatMessage, we don't
        -: 1926:  // want inserts expanded.
    #####: 1927:  const DWORD kFlags =
        -: 1928:      FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS;
    #####: 1929:  const DWORD kBufSize = 4096;
        -: 1930:  // Gets the system's human readable message string for this HRESULT.
    #####: 1931:  char error_text[kBufSize] = {'\0'};
    #####: 1932:  DWORD message_length = ::FormatMessageA(kFlags,
    %%%%%: 1932-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1933:                                          0,  // no source, we're asking system
        -: 1934:                                          static_cast<DWORD>(hr),  // the error
        -: 1935:                                          0,  // no line width restrictions
        -: 1936:                                          error_text,  // output buffer
        -: 1937:                                          kBufSize,    // buf size
        -: 1938:                                          nullptr);  // no arguments for inserts
        -: 1939:  // Trims tailing white space (FormatMessage leaves a trailing CR-LF)
    #####: 1940:  for (; message_length && IsSpace(error_text[message_length - 1]);
    %%%%%: 1940-block  0
    %%%%%: 1940-block  1
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1940-block  2
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1940-block  3
    %%%%%: 1940-block  4
    %%%%%: 1940-block  5
branch  5 never executed
branch  6 never executed (fallthrough)
        -: 1941:       --message_length) {
    #####: 1942:    error_text[message_length - 1] = '\0';
    %%%%%: 1942-block  0
        -: 1943:  }
        -: 1944:
        -: 1945:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1946:
    #####: 1947:  const std::string error_hex("0x" + String::FormatHexInt(hr));
    %%%%%: 1947-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1947-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1947-block  2
call    6 never executed
    $$$$$: 1947-block  3
call    7 never executed
    $$$$$: 1947-block  4
    #####: 1948:  return ::testing::AssertionFailure()
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1948-block  0
call    3 never executed
    $$$$$: 1948-block  1
call    4 never executed
    $$$$$: 1948-block  2
    #####: 1949:         << "Expected: " << expr << " " << expected << ".\n"
    %%%%%: 1949-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1949-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1949-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1949-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1949-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    #####: 1950:         << "  Actual: " << error_hex << " " << error_text << "\n";
    %%%%%: 1950-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1950-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1950-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1950-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1950-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1950-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 1950-block  6
    %%%%%: 1950-block  7
    #####: 1951:}
call    0 never executed
    $$$$$: 1951-block  0
call    1 never executed
        -: 1952:
        -: 1953:}  // namespace
        -: 1954:
function _ZN7testing8internal16IsHRESULTSuccessEPKcl called 0 returned 0% blocks executed 0%
    #####: 1955:AssertionResult IsHRESULTSuccess(const char* expr, long hr) {  // NOLINT
    #####: 1956:  if (SUCCEEDED(hr)) {
    %%%%%: 1956-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1957:    return AssertionSuccess();
    %%%%%: 1957-block  0
call    0 never executed
        -: 1958:  }
    #####: 1959:  return HRESULTFailureHelper(expr, "succeeds", hr);
    %%%%%: 1959-block  0
call    0 never executed
        -: 1960:}
        -: 1961:
function _ZN7testing8internal16IsHRESULTFailureEPKcl called 0 returned 0% blocks executed 0%
    #####: 1962:AssertionResult IsHRESULTFailure(const char* expr, long hr) {  // NOLINT
    #####: 1963:  if (FAILED(hr)) {
    %%%%%: 1963-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1964:    return AssertionSuccess();
    %%%%%: 1964-block  0
call    0 never executed
        -: 1965:  }
    #####: 1966:  return HRESULTFailureHelper(expr, "fails", hr);
    %%%%%: 1966-block  0
call    0 never executed
        -: 1967:}
        -: 1968:
        -: 1969:#endif  // GTEST_OS_WINDOWS
        -: 1970:
        -: 1971:// Utility functions for encoding Unicode text (wide strings) in
        -: 1972:// UTF-8.
        -: 1973:
        -: 1974:// A Unicode code-point can have up to 21 bits, and is encoded in UTF-8
        -: 1975:// like this:
        -: 1976://
        -: 1977:// Code-point length   Encoding
        -: 1978://   0 -  7 bits       0xxxxxxx
        -: 1979://   8 - 11 bits       110xxxxx 10xxxxxx
        -: 1980://  12 - 16 bits       1110xxxx 10xxxxxx 10xxxxxx
        -: 1981://  17 - 21 bits       11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
        -: 1982:
        -: 1983:// The maximum code-point a one-byte UTF-8 sequence can represent.
        -: 1984:constexpr uint32_t kMaxCodePoint1 = (static_cast<uint32_t>(1) << 7) - 1;
        -: 1985:
        -: 1986:// The maximum code-point a two-byte UTF-8 sequence can represent.
        -: 1987:constexpr uint32_t kMaxCodePoint2 = (static_cast<uint32_t>(1) << (5 + 6)) - 1;
        -: 1988:
        -: 1989:// The maximum code-point a three-byte UTF-8 sequence can represent.
        -: 1990:constexpr uint32_t kMaxCodePoint3 =
        -: 1991:    (static_cast<uint32_t>(1) << (4 + 2 * 6)) - 1;
        -: 1992:
        -: 1993:// The maximum code-point a four-byte UTF-8 sequence can represent.
        -: 1994:constexpr uint32_t kMaxCodePoint4 =
        -: 1995:    (static_cast<uint32_t>(1) << (3 + 3 * 6)) - 1;
        -: 1996:
        -: 1997:// Chops off the n lowest bits from a bit pattern.  Returns the n
        -: 1998:// lowest bits.  As a side effect, the original bit pattern will be
        -: 1999:// shifted to the right by n bits.
function _ZN7testing8internal11ChopLowBitsEPji called 0 returned 0% blocks executed 0%
    #####: 2000:inline uint32_t ChopLowBits(uint32_t* bits, int n) {
    #####: 2001:  const uint32_t low_bits = *bits & ((static_cast<uint32_t>(1) << n) - 1);
    #####: 2002:  *bits >>= n;
    #####: 2003:  return low_bits;
    %%%%%: 2003-block  0
        -: 2004:}
        -: 2005:
        -: 2006:// Converts a Unicode code point to a narrow string in UTF-8 encoding.
        -: 2007:// code_point parameter is of type uint32_t because wchar_t may not be
        -: 2008:// wide enough to contain a code point.
        -: 2009:// If the code_point is not a valid Unicode code point
        -: 2010:// (i.e. outside of Unicode range U+0 to U+10FFFF) it will be converted
        -: 2011:// to "(Invalid Unicode 0xXXXXXXXX)".
function _ZN7testing8internal15CodePointToUtf8B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 2012:std::string CodePointToUtf8(uint32_t code_point) {
    #####: 2013:  if (code_point > kMaxCodePoint4) {
    %%%%%: 2013-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2014:    return "(Invalid Unicode 0x" + String::FormatHexUInt32(code_point) + ")";
    %%%%%: 2014-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2014-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2014-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2014-block  3
    %%%%%: 2014-block  4
call    9 never executed
call   10 never executed
    $$$$$: 2014-block  5
call   11 never executed
    $$$$$: 2014-block  6
call   12 never executed
    $$$$$: 2014-block  7
    $$$$$: 2014-block  8
        -: 2015:  }
        -: 2016:
        -: 2017:  char str[5];  // Big enough for the largest valid code point.
    #####: 2018:  if (code_point <= kMaxCodePoint1) {
    %%%%%: 2018-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2019:    str[1] = '\0';
    #####: 2020:    str[0] = static_cast<char>(code_point);  // 0xxxxxxx
    %%%%%: 2020-block  0
    #####: 2021:  } else if (code_point <= kMaxCodePoint2) {
    %%%%%: 2021-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2022:    str[2] = '\0';
    #####: 2023:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 2023-block  0
call    0 never executed
    #####: 2024:    str[0] = static_cast<char>(0xC0 | code_point);                   // 110xxxxx
    #####: 2025:  } else if (code_point <= kMaxCodePoint3) {
    %%%%%: 2025-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2026:    str[3] = '\0';
    #####: 2027:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 2027-block  0
call    0 never executed
    #####: 2028:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 2029:    str[0] = static_cast<char>(0xE0 | code_point);                   // 1110xxxx
        -: 2030:  } else {  // code_point <= kMaxCodePoint4
    #####: 2031:    str[4] = '\0';
    #####: 2032:    str[3] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 2032-block  0
call    0 never executed
    #####: 2033:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 2034:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 2035:    str[0] = static_cast<char>(0xF0 | code_point);                   // 11110xxx
        -: 2036:  }
    #####: 2037:  return str;
    %%%%%: 2037-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2037-block  1
    $$$$$: 2037-block  2
        -: 2038:}
        -: 2039:
        -: 2040:// The following two functions only make sense if the system
        -: 2041:// uses UTF-16 for wide string encoding. All supported systems
        -: 2042:// with 16 bit wchar_t (Windows, Cygwin) do use UTF-16.
        -: 2043:
        -: 2044:// Determines if the arguments constitute UTF-16 surrogate pair
        -: 2045:// and thus should be combined into a single Unicode code point
        -: 2046:// using CreateCodePointFromUtf16SurrogatePair.
function _ZN7testing8internal20IsUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 2047:inline bool IsUtf16SurrogatePair(wchar_t first, wchar_t second) {
    #####: 2048:  return sizeof(wchar_t) == 2 && (first & 0xFC00) == 0xD800 &&
    %%%%%: 2048-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2048-block  1
    %%%%%: 2048-block  2
    #####: 2049:         (second & 0xFC00) == 0xDC00;
    %%%%%: 2049-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2049-block  1
        -: 2050:}
        -: 2051:
        -: 2052:// Creates a Unicode code point from UTF16 surrogate pair.
function _ZN7testing8internal37CreateCodePointFromUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 2053:inline uint32_t CreateCodePointFromUtf16SurrogatePair(wchar_t first,
        -: 2054:                                                      wchar_t second) {
    #####: 2055:  const auto first_u = static_cast<uint32_t>(first);
    #####: 2056:  const auto second_u = static_cast<uint32_t>(second);
    #####: 2057:  const uint32_t mask = (1 << 10) - 1;
        -: 2058:  return (sizeof(wchar_t) == 2)
    #####: 2059:             ? (((first_u & mask) << 10) | (second_u & mask)) + 0x10000
        -: 2060:             :
        -: 2061:             // This function should not be called when the condition is
        -: 2062:             // false, but we provide a sensible default in case it is.
    #####: 2063:             first_u;
    %%%%%: 2063-block  0
        -: 2064:}
        -: 2065:
        -: 2066:// Converts a wide string to a narrow string in UTF-8 encoding.
        -: 2067:// The wide string is assumed to have the following encoding:
        -: 2068://   UTF-16 if sizeof(wchar_t) == 2 (on Windows, Cygwin)
        -: 2069://   UTF-32 if sizeof(wchar_t) == 4 (on Linux)
        -: 2070:// Parameter str points to a null-terminated wide string.
        -: 2071:// Parameter num_chars may additionally limit the number
        -: 2072:// of wchar_t characters processed. -1 is used when the entire string
        -: 2073:// should be processed.
        -: 2074:// If the string contains code points that are not valid Unicode code points
        -: 2075:// (i.e. outside of Unicode range U+0 to U+10FFFF) they will be output
        -: 2076:// as '(Invalid Unicode 0xXXXXXXXX)'. If the string is in UTF16 encoding
        -: 2077:// and contains invalid UTF-16 surrogate pairs, values in those pairs
        -: 2078:// will be encoded as individual Unicode characters from Basic Normal Plane.
function _ZN7testing8internal16WideStringToUtf8B5cxx11EPKwi called 0 returned 0% blocks executed 0%
    #####: 2079:std::string WideStringToUtf8(const wchar_t* str, int num_chars) {
    #####: 2080:  if (num_chars == -1) num_chars = static_cast<int>(wcslen(str));
    %%%%%: 2080-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2080-block  1
call    2 never executed
        -: 2081:
    #####: 2082:  ::std::stringstream stream;
    %%%%%: 2082-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2083:  for (int i = 0; i < num_chars; ++i) {
    %%%%%: 2083-block  0
    %%%%%: 2083-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
        -: 2084:    uint32_t unicode_code_point;
        -: 2085:
    #####: 2086:    if (str[i] == L'\0') {
    %%%%%: 2086-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2087:      break;
    %%%%%: 2087-block  0
    #####: 2088:    } else if (i + 1 < num_chars && IsUtf16SurrogatePair(str[i], str[i + 1])) {
    %%%%%: 2088-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2088-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2088-block  2
    %%%%%: 2088-block  3
    %%%%%: 2088-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 2089:      unicode_code_point =
    #####: 2090:          CreateCodePointFromUtf16SurrogatePair(str[i], str[i + 1]);
    %%%%%: 2090-block  0
call    0 never executed
    #####: 2091:      i++;
        -: 2092:    } else {
    #####: 2093:      unicode_code_point = static_cast<uint32_t>(str[i]);
    %%%%%: 2093-block  0
        -: 2094:    }
        -: 2095:
    #####: 2096:    stream << CodePointToUtf8(unicode_code_point);
    %%%%%: 2096-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2096-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2096-block  2
call    6 never executed
    $$$$$: 2096-block  3
call    7 never executed
    $$$$$: 2096-block  4
        -: 2097:  }
    #####: 2098:  return StringStreamToString(&stream);
    %%%%%: 2098-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2098-block  1
    #####: 2099:}
    %%%%%: 2099-block  0
call    0 never executed
    $$$$$: 2099-block  1
call    1 never executed
        -: 2100:
        -: 2101:// Converts a wide C string to an std::string using the UTF-8 encoding.
        -: 2102:// NULL will be converted to "(null)".
function _ZN7testing8internal6String15ShowWideCStringB5cxx11EPKw called 0 returned 0% blocks executed 0%
    #####: 2103:std::string String::ShowWideCString(const wchar_t* wide_c_str) {
    #####: 2104:  if (wide_c_str == nullptr) return "(null)";
    %%%%%: 2104-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2104-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 2104-block  2
        -: 2105:
    #####: 2106:  return internal::WideStringToUtf8(wide_c_str, -1);
    %%%%%: 2106-block  0
call    0 never executed
        -: 2107:}
        -: 2108:
        -: 2109:// Compares two wide C strings.  Returns true if and only if they have the
        -: 2110:// same content.
        -: 2111://
        -: 2112:// Unlike wcscmp(), this function can handle NULL argument(s).  A NULL
        -: 2113:// C string is considered different to any non-NULL C string,
        -: 2114:// including the empty string.
function _ZN7testing8internal6String17WideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2115:bool String::WideCStringEquals(const wchar_t* lhs, const wchar_t* rhs) {
    #####: 2116:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2116-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2116-block  1
        -: 2117:
    #####: 2118:  if (rhs == nullptr) return false;
    %%%%%: 2118-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2118-block  1
        -: 2119:
    #####: 2120:  return wcscmp(lhs, rhs) == 0;
    %%%%%: 2120-block  0
call    0 never executed
        -: 2121:}
        -: 2122:
        -: 2123:// Helper function for *_STREQ on wide strings.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2124:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 2125:                               const char* rhs_expression, const wchar_t* lhs,
        -: 2126:                               const wchar_t* rhs) {
    #####: 2127:  if (String::WideCStringEquals(lhs, rhs)) {
    %%%%%: 2127-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2128:    return AssertionSuccess();
    %%%%%: 2128-block  0
call    0 never executed
        -: 2129:  }
        -: 2130:
    #####: 2131:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
    %%%%%: 2131-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2131-block  1
call    3 never executed
    $$$$$: 2131-block  2
call    4 never executed
    $$$$$: 2131-block  3
    #####: 2132:                   PrintToString(rhs), false);
    %%%%%: 2132-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2132-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 2132-block  2
call    7 never executed
        -: 2133:}
        -: 2134:
        -: 2135:// Helper function for *_STRNE on wide strings.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2136:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 2137:                               const char* s2_expression, const wchar_t* s1,
        -: 2138:                               const wchar_t* s2) {
    #####: 2139:  if (!String::WideCStringEquals(s1, s2)) {
    %%%%%: 2139-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2140:    return AssertionSuccess();
    %%%%%: 2140-block  0
call    0 never executed
        -: 2141:  }
        -: 2142:
    #####: 2143:  return AssertionFailure()
    %%%%%: 2143-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2143-block  1
call    3 never executed
    #####: 2144:         << "Expected: (" << s1_expression << ") != (" << s2_expression
    %%%%%: 2144-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2144-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2144-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2144-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 2145:         << "), actual: " << PrintToString(s1) << " vs " << PrintToString(s2);
    %%%%%: 2145-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2145-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2145-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2145-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 2145-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 2145-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 2145-block  6
call   18 never executed
branch 19 never executed (fallthrough)
branch 20 never executed (throw)
    %%%%%: 2145-block  7
    %%%%%: 2145-block  8
call   21 never executed
call   22 never executed
call   23 never executed
    $$$$$: 2145-block  9
call   24 never executed
    $$$$$: 2145-block 10
    $$$$$: 2145-block 11
call   25 never executed
    $$$$$: 2145-block 12
        -: 2146:}
        -: 2147:
        -: 2148:// Compares two C strings, ignoring case.  Returns true if and only if they have
        -: 2149:// the same content.
        -: 2150://
        -: 2151:// Unlike strcasecmp(), this function can handle NULL argument(s).  A
        -: 2152:// NULL C string is considered different to any non-NULL C string,
        -: 2153:// including the empty string.
function _ZN7testing8internal6String28CaseInsensitiveCStringEqualsEPKcS3_ called 4 returned 100% blocks executed 71%
        4: 2154:bool String::CaseInsensitiveCStringEquals(const char* lhs, const char* rhs) {
       4*: 2155:  if (lhs == nullptr) return rhs == nullptr;
        4: 2155-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2155-block  1
       4*: 2156:  if (rhs == nullptr) return false;
        4: 2156-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2156-block  1
        4: 2157:  return posix::StrCaseCmp(lhs, rhs) == 0;
        4: 2157-block  0
call    0 returned 4
        -: 2158:}
        -: 2159:
        -: 2160:// Compares two wide C strings, ignoring case.  Returns true if and only if they
        -: 2161:// have the same content.
        -: 2162://
        -: 2163:// Unlike wcscasecmp(), this function can handle NULL argument(s).
        -: 2164:// A NULL C string is considered different to any non-NULL wide C string,
        -: 2165:// including the empty string.
        -: 2166:// NB: The implementations on different platforms slightly differ.
        -: 2167:// On windows, this method uses _wcsicmp which compares according to LC_CTYPE
        -: 2168:// environment variable. On GNU platform this method uses wcscasecmp
        -: 2169:// which compares according to LC_CTYPE category of the current locale.
        -: 2170:// On MacOS X, it uses towlower, which also uses LC_CTYPE category of the
        -: 2171:// current locale.
function _ZN7testing8internal6String32CaseInsensitiveWideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2172:bool String::CaseInsensitiveWideCStringEquals(const wchar_t* lhs,
        -: 2173:                                              const wchar_t* rhs) {
    #####: 2174:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2174-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2174-block  1
        -: 2175:
    #####: 2176:  if (rhs == nullptr) return false;
    %%%%%: 2176-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2176-block  1
        -: 2177:
        -: 2178:#ifdef GTEST_OS_WINDOWS
    #####: 2179:  return _wcsicmp(lhs, rhs) == 0;
    %%%%%: 2179-block  0
call    0 never executed
        -: 2180:#elif defined(GTEST_OS_LINUX) && !defined(GTEST_OS_LINUX_ANDROID)
        -: 2181:  return wcscasecmp(lhs, rhs) == 0;
        -: 2182:#else
        -: 2183:  // Android, Mac OS X and Cygwin don't define wcscasecmp.
        -: 2184:  // Other unknown OSes may not define it either.
        -: 2185:  wint_t left, right;
        -: 2186:  do {
        -: 2187:    left = towlower(static_cast<wint_t>(*lhs++));
        -: 2188:    right = towlower(static_cast<wint_t>(*rhs++));
        -: 2189:  } while (left && left == right);
        -: 2190:  return left == right;
        -: 2191:#endif  // OS selector
        -: 2192:}
        -: 2193:
        -: 2194:// Returns true if and only if str ends with the given suffix, ignoring case.
        -: 2195:// Any string is considered to end with an empty suffix.
function _ZN7testing8internal6String23EndsWithCaseInsensitiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 2196:bool String::EndsWithCaseInsensitive(const std::string& str,
        -: 2197:                                     const std::string& suffix) {
    #####: 2198:  const size_t str_len = str.length();
    %%%%%: 2198-block  0
call    0 never executed
    #####: 2199:  const size_t suffix_len = suffix.length();
call    0 never executed
    #####: 2200:  return (str_len >= suffix_len) &&
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2200-block  0
    %%%%%: 2200-block  1
    #####: 2201:         CaseInsensitiveCStringEquals(str.c_str() + str_len - suffix_len,
    %%%%%: 2201-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 2202:                                      suffix.c_str());
    %%%%%: 2202-block  0
        -: 2203:}
        -: 2204:
        -: 2205:// Formats an int value as "%02d".
function _ZN7testing8internal6String15FormatIntWidth2B5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2206:std::string String::FormatIntWidth2(int value) {
    #####: 2207:  return FormatIntWidthN(value, 2);
    %%%%%: 2207-block  0
call    0 never executed
        -: 2208:}
        -: 2209:
        -: 2210:// Formats an int value to given width with leading zeros.
function _ZN7testing8internal6String15FormatIntWidthNB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 2211:std::string String::FormatIntWidthN(int value, int width) {
    #####: 2212:  std::stringstream ss;
    %%%%%: 2212-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2213:  ss << std::setfill('0') << std::setw(width) << value;
    %%%%%: 2213-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2213-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2214:  return ss.str();
    %%%%%: 2214-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2214-block  1
    #####: 2215:}
    %%%%%: 2215-block  0
call    0 never executed
    $$$$$: 2215-block  1
call    1 never executed
        -: 2216:
        -: 2217:// Formats an int value as "%X".
function _ZN7testing8internal6String15FormatHexUInt32B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 2218:std::string String::FormatHexUInt32(uint32_t value) {
    #####: 2219:  std::stringstream ss;
    %%%%%: 2219-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2220:  ss << std::hex << std::uppercase << value;
    %%%%%: 2220-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2220-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2220-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2221:  return ss.str();
    %%%%%: 2221-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2221-block  1
    #####: 2222:}
    %%%%%: 2222-block  0
call    0 never executed
    $$$$$: 2222-block  1
call    1 never executed
        -: 2223:
        -: 2224:// Formats an int value as "%X".
function _ZN7testing8internal6String12FormatHexIntB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2225:std::string String::FormatHexInt(int value) {
    #####: 2226:  return FormatHexUInt32(static_cast<uint32_t>(value));
    %%%%%: 2226-block  0
call    0 never executed
        -: 2227:}
        -: 2228:
        -: 2229:// Formats a byte as "%02X".
function _ZN7testing8internal6String10FormatByteB5cxx11Eh called 0 returned 0% blocks executed 0%
    #####: 2230:std::string String::FormatByte(unsigned char value) {
    #####: 2231:  std::stringstream ss;
    %%%%%: 2231-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2232:  ss << std::setfill('0') << std::setw(2) << std::hex << std::uppercase
    %%%%%: 2232-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2232-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2232-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 2233:     << static_cast<unsigned int>(value);
    %%%%%: 2233-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2234:  return ss.str();
    %%%%%: 2234-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2234-block  1
    #####: 2235:}
    %%%%%: 2235-block  0
call    0 never executed
    $$$$$: 2235-block  1
call    1 never executed
        -: 2236:
        -: 2237:// Converts the buffer in a stringstream to an std::string, converting NUL
        -: 2238:// bytes to "\\0" along the way.
function _ZN7testing8internal20StringStreamToStringEPNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE called 167 returned 100% blocks executed 75%
      167: 2239:std::string StringStreamToString(::std::stringstream* ss) {
      167: 2240:  const ::std::string& str = ss->str();
      167: 2240-block  0
call    0 returned 167
branch  1 taken 167 (fallthrough)
branch  2 taken 0 (throw)
      167: 2241:  const char* const start = str.c_str();
      167: 2241-block  0
call    0 returned 167
      167: 2242:  const char* const end = start + str.length();
call    0 returned 167
        -: 2243:
      167: 2244:  std::string result;
call    0 returned 167
      167: 2245:  result.reserve(static_cast<size_t>(2 * (end - start)));
call    0 returned 167
branch  1 taken 167 (fallthrough)
branch  2 taken 0 (throw)
    10580: 2246:  for (const char* ch = start; ch != end; ++ch) {
      167: 2246-block  0
    10413: 2246-block  1
    10580: 2246-block  2
branch  0 taken 10413
branch  1 taken 167 (fallthrough)
    10413: 2247:    if (*ch == '\0') {
    10413: 2247-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10413
    #####: 2248:      result += "\\0";  // Replaces NUL with "\\0";
    %%%%%: 2248-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2249:    } else {
    10413: 2250:      result += *ch;
    10413: 2250-block  0
call    0 returned 10413
branch  1 taken 10413 (fallthrough)
branch  2 taken 0 (throw)
        -: 2251:    }
        -: 2252:  }
        -: 2253:
      334: 2254:  return result;
      167: 2254-block  0
      167: 2254-block  1
      167: 2255:}
      167: 2255-block  0
call    0 returned 167
    $$$$$: 2255-block  1
call    1 never executed
    $$$$$: 2255-block  2
call    2 never executed
        -: 2256:
        -: 2257:// Appends the user-supplied message to the Google-Test-generated message.
function _ZN7testing8internal17AppendUserMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_7MessageE called 7 returned 100% blocks executed 39%
        7: 2258:std::string AppendUserMessage(const std::string& gtest_msg,
        -: 2259:                              const Message& user_msg) {
        -: 2260:  // Appends the user message if it's non-empty.
        7: 2261:  const std::string user_msg_string = user_msg.GetString();
        7: 2261-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 2262:  if (user_msg_string.empty()) {
        7: 2262-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0
        7: 2263:    return gtest_msg;
        7: 2263-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        -: 2264:  }
    #####: 2265:  if (gtest_msg.empty()) {
    %%%%%: 2265-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2266:    return user_msg_string;
    %%%%%: 2266-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2267:  }
    #####: 2268:  return gtest_msg + "\n" + user_msg_string;
    %%%%%: 2268-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2268-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2268-block  2
    %%%%%: 2268-block  3
call    6 never executed
    $$$$$: 2268-block  4
call    7 never executed
    $$$$$: 2268-block  5
        7: 2269:}
        7: 2269-block  0
call    0 returned 7
    $$$$$: 2269-block  1
call    1 never executed
        -: 2270:
        -: 2271:}  // namespace internal
        -: 2272:
        -: 2273:// class TestResult
        -: 2274:
        -: 2275:// Creates an empty TestResult.
function _ZN7testing10TestResultC2Ev called 54 returned 100% blocks executed 100%
       54: 2276:TestResult::TestResult()
       54: 2277:    : death_test_count_(0), start_timestamp_(0), elapsed_time_(0) {}
       54: 2277-block  0
call    0 returned 54
call    1 returned 54
call    2 returned 54
        -: 2278:
        -: 2279:// D'tor.
function _ZN7testing10TestResultD2Ev called 0 returned 0% blocks executed 0%
    #####: 2280:TestResult::~TestResult() = default;
    %%%%%: 2280-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2281:
        -: 2282:// Returns the i-th test part result among all the results. i can
        -: 2283:// range from 0 to total_part_count() - 1. If i is not in that range,
        -: 2284:// aborts the program.
function _ZNK7testing10TestResult17GetTestPartResultEi called 84 returned 100% blocks executed 80%
       84: 2285:const TestPartResult& TestResult::GetTestPartResult(int i) const {
      84*: 2286:  if (i < 0 || i >= total_part_count()) internal::posix::Abort();
       84: 2286-block  0
branch  0 taken 84 (fallthrough)
branch  1 taken 0
       84: 2286-block  1
call    2 returned 84
branch  3 taken 0 (fallthrough)
branch  4 taken 84
    %%%%%: 2286-block  2
       84: 2286-block  3
       84: 2286-block  4
branch  5 taken 0 (fallthrough)
branch  6 taken 84
    %%%%%: 2286-block  5
call    7 never executed
       84: 2287:  return test_part_results_.at(static_cast<size_t>(i));
       84: 2287-block  0
call    0 returned 84
        -: 2288:}
        -: 2289:
        -: 2290:// Returns the i-th test property. i can range from 0 to
        -: 2291:// test_property_count() - 1. If i is not in that range, aborts the
        -: 2292:// program.
function _ZNK7testing10TestResult15GetTestPropertyEi called 0 returned 0% blocks executed 0%
    #####: 2293:const TestProperty& TestResult::GetTestProperty(int i) const {
    #####: 2294:  if (i < 0 || i >= test_property_count()) internal::posix::Abort();
    %%%%%: 2294-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2294-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2294-block  2
    %%%%%: 2294-block  3
    %%%%%: 2294-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 2294-block  5
call    7 never executed
    #####: 2295:  return test_properties_.at(static_cast<size_t>(i));
    %%%%%: 2295-block  0
call    0 never executed
        -: 2296:}
        -: 2297:
        -: 2298:// Clears the test part results.
function _ZN7testing10TestResult20ClearTestPartResultsEv called 0 returned 0% blocks executed 0%
    #####: 2299:void TestResult::ClearTestPartResults() { test_part_results_.clear(); }
    %%%%%: 2299-block  0
call    0 never executed
        -: 2300:
        -: 2301:// Adds a test part result to the list.
function _ZN7testing10TestResult17AddTestPartResultERKNS_14TestPartResultE called 7 returned 100% blocks executed 100%
        7: 2302:void TestResult::AddTestPartResult(const TestPartResult& test_part_result) {
        7: 2303:  test_part_results_.push_back(test_part_result);
        7: 2303-block  0
call    0 returned 7
        7: 2304:}
        -: 2305:
        -: 2306:// Adds a test property to the list. If a property with the same key as the
        -: 2307:// supplied property is already represented, the value of this test_property
        -: 2308:// replaces the old value for that key.
function _ZN7testing10TestResult14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2309:void TestResult::RecordProperty(const std::string& xml_element,
        -: 2310:                                const TestProperty& test_property) {
    #####: 2311:  if (!ValidateTestProperty(xml_element, test_property)) {
    %%%%%: 2311-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2311-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 2312:    return;
    %%%%%: 2312-block  0
    %%%%%: 2312-block  1
        -: 2313:  }
    #####: 2314:  internal::MutexLock lock(&test_properties_mutex_);
    %%%%%: 2314-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2315:  const std::vector<TestProperty>::iterator property_with_matching_key =
    #####: 2316:      std::find_if(test_properties_.begin(), test_properties_.end(),
    %%%%%: 2316-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 2317:                   internal::TestPropertyKeyIs(test_property.key()));
    %%%%%: 2317-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2317-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 2317-block  2
call    7 never executed
call    8 never executed
    $$$$$: 2317-block  3
call    9 never executed
    $$$$$: 2317-block  4
call   10 never executed
    $$$$$: 2317-block  5
    $$$$$: 2317-block  6
    $$$$$: 2317-block  7
    #####: 2318:  if (property_with_matching_key == test_properties_.end()) {
    %%%%%: 2318-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 2319:    test_properties_.push_back(test_property);
    %%%%%: 2319-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2320:    return;
    %%%%%: 2320-block  0
        -: 2321:  }
    #####: 2322:  property_with_matching_key->SetValue(test_property.value());
    %%%%%: 2322-block  0
call    0 never executed
    %%%%%: 2322-block  1
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 2322-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 2322-block  3
call    8 never executed
    $$$$$: 2322-block  4
call    9 never executed
    $$$$$: 2322-block  5
    $$$$$: 2322-block  6
    #####: 2323:}
    %%%%%: 2323-block  0
    %%%%%: 2323-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    $$$$$: 2323-block  2
call    3 never executed
        -: 2324:
        -: 2325:// The list of reserved attributes used in the <testsuites> element of XML
        -: 2326:// output.
        -: 2327:static const char* const kReservedTestSuitesAttributes[] = {
        -: 2328:    "disabled",    "errors", "failures", "name",
        -: 2329:    "random_seed", "tests",  "time",     "timestamp"};
        -: 2330:
        -: 2331:// The list of reserved attributes used in the <testsuite> element of XML
        -: 2332:// output.
        -: 2333:static const char* const kReservedTestSuiteAttributes[] = {
        -: 2334:    "disabled", "errors", "failures",  "name",
        -: 2335:    "tests",    "time",   "timestamp", "skipped"};
        -: 2336:
        -: 2337:// The list of reserved attributes used in the <testcase> element of XML output.
        -: 2338:static const char* const kReservedTestCaseAttributes[] = {
        -: 2339:    "classname",  "name",        "status", "time",
        -: 2340:    "type_param", "value_param", "file",   "line"};
        -: 2341:
        -: 2342:// Use a slightly different set for allowed output to ensure existing tests can
        -: 2343:// still RecordProperty("result") or "RecordProperty(timestamp")
        -: 2344:static const char* const kReservedOutputTestCaseAttributes[] = {
        -: 2345:    "classname",   "name", "status", "time",   "type_param",
        -: 2346:    "value_param", "file", "line",   "result", "timestamp"};
        -: 2347:
        -: 2348:template <size_t kSize>
    #####: 2349:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2350:  return std::vector<std::string>(array, array + kSize);
        -: 2351:}
------------------
_ZN7testing13ArrayAsVectorILy10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILy10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2349:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    %%%%%: 2349-block  0
    #####: 2350:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2350-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2350-block  1
    %%%%%: 2350-block  2
        -: 2351:}
------------------
_ZN7testing13ArrayAsVectorILy8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILy8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2349:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    %%%%%: 2349-block  0
    #####: 2350:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2350-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2350-block  1
    %%%%%: 2350-block  2
        -: 2351:}
------------------
        -: 2352:
function _ZN7testingL31GetReservedAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2353:static std::vector<std::string> GetReservedAttributesForElement(
        -: 2354:    const std::string& xml_element) {
    #####: 2355:  if (xml_element == "testsuites") {
    %%%%%: 2355-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2356:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2356-block  0
call    0 never executed
    #####: 2357:  } else if (xml_element == "testsuite") {
    %%%%%: 2357-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2358:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2358-block  0
call    0 never executed
    #####: 2359:  } else if (xml_element == "testcase") {
    %%%%%: 2359-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2360:    return ArrayAsVector(kReservedTestCaseAttributes);
    %%%%%: 2360-block  0
call    0 never executed
        -: 2361:  } else {
    #####: 2362:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2362-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 2362-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2362-block  2
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 2362-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 2362-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 2362-block  5
call   16 never executed
    $$$$$: 2362-block  6
call   17 never executed
        -: 2363:  }
        -: 2364:  // This code is unreachable but some compilers may not realizes that.
    #####: 2365:  return std::vector<std::string>();
    %%%%%: 2365-block  0
call    0 never executed
        -: 2366:}
        -: 2367:
        -: 2368:#if GTEST_HAS_FILE_SYSTEM
        -: 2369:// TODO(jdesprez): Merge the two getReserved attributes once skip is improved
        -: 2370:// This function is only used when file systems are enabled.
function _ZN7testingL37GetReservedOutputAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2371:static std::vector<std::string> GetReservedOutputAttributesForElement(
        -: 2372:    const std::string& xml_element) {
    #####: 2373:  if (xml_element == "testsuites") {
    %%%%%: 2373-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2374:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2374-block  0
call    0 never executed
    #####: 2375:  } else if (xml_element == "testsuite") {
    %%%%%: 2375-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2376:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2376-block  0
call    0 never executed
    #####: 2377:  } else if (xml_element == "testcase") {
    %%%%%: 2377-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2378:    return ArrayAsVector(kReservedOutputTestCaseAttributes);
    %%%%%: 2378-block  0
call    0 never executed
        -: 2379:  } else {
    #####: 2380:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2380-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 2380-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2380-block  2
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 2380-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 2380-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 2380-block  5
call   16 never executed
    $$$$$: 2380-block  6
call   17 never executed
        -: 2381:  }
        -: 2382:  // This code is unreachable but some compilers may not realizes that.
    #####: 2383:  return std::vector<std::string>();
    %%%%%: 2383-block  0
call    0 never executed
        -: 2384:}
        -: 2385:#endif
        -: 2386:
function _ZN7testingL14FormatWordListERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EE called 0 returned 0% blocks executed 0%
    #####: 2387:static std::string FormatWordList(const std::vector<std::string>& words) {
    #####: 2388:  Message word_list;
    %%%%%: 2388-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2389:  for (size_t i = 0; i < words.size(); ++i) {
    %%%%%: 2389-block  0
    %%%%%: 2389-block  1
    %%%%%: 2389-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2390:    if (i > 0 && words.size() > 2) {
    %%%%%: 2390-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2390-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2390-block  2
    %%%%%: 2390-block  3
    %%%%%: 2390-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
    #####: 2391:      word_list << ", ";
    %%%%%: 2391-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2392:    }
    #####: 2393:    if (i == words.size() - 1) {
    %%%%%: 2393-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2394:      word_list << "and ";
    %%%%%: 2394-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2395:    }
    #####: 2396:    word_list << "'" << words[i] << "'";
    %%%%%: 2396-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2396-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 2396-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
        -: 2397:  }
    #####: 2398:  return word_list.GetString();
    %%%%%: 2398-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2398-block  1
    #####: 2399:}
    %%%%%: 2399-block  0
call    0 never executed
    $$$$$: 2399-block  1
call    1 never executed
        -: 2400:
function _ZN7testingL24ValidateTestPropertyNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS5_SaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 2401:static bool ValidateTestPropertyName(
        -: 2402:    const std::string& property_name,
        -: 2403:    const std::vector<std::string>& reserved_names) {
    #####: 2404:  if (std::find(reserved_names.begin(), reserved_names.end(), property_name) !=
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    $$$$$: 2404-block  0
    #####: 2405:      reserved_names.end()) {
    %%%%%: 2405-block  0
call    0 never executed
    %%%%%: 2405-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    $$$$$: 2405-block  2
call    4 never executed
    #####: 2406:    ADD_FAILURE() << "Reserved key used in RecordProperty(): " << property_name
    %%%%%: 2406-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2406-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2406-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2406-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 2406-block  4
call   12 never executed
    $$$$$: 2406-block  5
call   13 never executed
    $$$$$: 2406-block  6
    $$$$$: 2406-block  7
call   14 never executed
    #####: 2407:                  << " (" << FormatWordList(reserved_names)
    %%%%%: 2407-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2407-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2407-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
    $$$$$: 2407-block  3
call   11 never executed
    $$$$$: 2407-block  4
    #####: 2408:                  << " are reserved by " << GTEST_NAME_ << ")";
    %%%%%: 2408-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2408-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2408-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2408-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 2409:    return false;
        -: 2410:  }
    #####: 2411:  return true;
    %%%%%: 2411-block  0
        -: 2412:}
        -: 2413:
        -: 2414:// Adds a failure if the key is a reserved attribute of the element named
        -: 2415:// xml_element.  Returns true if the property is valid.
function _ZN7testing10TestResult20ValidateTestPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2416:bool TestResult::ValidateTestProperty(const std::string& xml_element,
        -: 2417:                                      const TestProperty& test_property) {
    #####: 2418:  return ValidateTestPropertyName(test_property.key(),
    %%%%%: 2418-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2418-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 2418-block  2
call    7 never executed
    $$$$$: 2418-block  3
call    8 never executed
    $$$$$: 2418-block  4
    $$$$$: 2418-block  5
    #####: 2419:                                  GetReservedAttributesForElement(xml_element));
    %%%%%: 2419-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2419-block  1
    %%%%%: 2419-block  2
call    3 never executed
    %%%%%: 2419-block  3
    $$$$$: 2419-block  4
call    4 never executed
        -: 2420:}
        -: 2421:
        -: 2422:// Clears the object.
function _ZN7testing10TestResult5ClearEv called 53 returned 100% blocks executed 100%
       53: 2423:void TestResult::Clear() {
       53: 2424:  test_part_results_.clear();
       53: 2424-block  0
call    0 returned 53
       53: 2425:  test_properties_.clear();
call    0 returned 53
       53: 2426:  death_test_count_ = 0;
       53: 2427:  elapsed_time_ = 0;
       53: 2428:}
        -: 2429:
        -: 2430:// Returns true off the test part was skipped.
function _ZN7testingL15TestPartSkippedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2431:static bool TestPartSkipped(const TestPartResult& result) {
    #####: 2432:  return result.skipped();
    %%%%%: 2432-block  0
call    0 never executed
        -: 2433:}
        -: 2434:
        -: 2435:// Returns true if and only if the test was skipped.
function _ZNK7testing10TestResult7SkippedEv called 233 returned 100% blocks executed 88%
      233: 2436:bool TestResult::Skipped() const {
     233*: 2437:  return !Failed() && CountIf(test_part_results_, TestPartSkipped) > 0;
      233: 2437-block  0
call    0 returned 233
branch  1 taken 205 (fallthrough)
branch  2 taken 28
      205: 2437-block  1
call    3 returned 205
branch  4 taken 0 (fallthrough)
branch  5 taken 205
    %%%%%: 2437-block  2
      233: 2437-block  3
      233: 2437-block  4
        -: 2438:}
        -: 2439:
        -: 2440:// Returns true if and only if the test failed.
function _ZNK7testing10TestResult6FailedEv called 580 returned 100% blocks executed 90%
      580: 2441:bool TestResult::Failed() const {
     580*: 2442:  for (int i = 0; i < total_part_count(); ++i) {
      580: 2442-block  0
    %%%%%: 2442-block  1
      580: 2442-block  2
call    0 returned 580
branch  1 taken 84
branch  2 taken 496 (fallthrough)
       84: 2443:    if (GetTestPartResult(i).failed()) return true;
       84: 2443-block  0
call    0 returned 84
call    1 returned 84
branch  2 taken 84 (fallthrough)
branch  3 taken 0
       84: 2443-block  1
        -: 2444:  }
      496: 2445:  return false;
      496: 2445-block  0
        -: 2446:}
        -: 2447:
        -: 2448:// Returns true if and only if the test part fatally failed.
function _ZN7testingL21TestPartFatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2449:static bool TestPartFatallyFailed(const TestPartResult& result) {
    #####: 2450:  return result.fatally_failed();
    %%%%%: 2450-block  0
call    0 never executed
        -: 2451:}
        -: 2452:
        -: 2453:// Returns true if and only if the test fatally failed.
function _ZNK7testing10TestResult15HasFatalFailureEv called 87 returned 100% blocks executed 100%
       87: 2454:bool TestResult::HasFatalFailure() const {
       87: 2455:  return CountIf(test_part_results_, TestPartFatallyFailed) > 0;
       87: 2455-block  0
call    0 returned 87
        -: 2456:}
        -: 2457:
        -: 2458:// Returns true if and only if the test part non-fatally failed.
function _ZN7testingL24TestPartNonfatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2459:static bool TestPartNonfatallyFailed(const TestPartResult& result) {
    #####: 2460:  return result.nonfatally_failed();
    %%%%%: 2460-block  0
call    0 never executed
        -: 2461:}
        -: 2462:
        -: 2463:// Returns true if and only if the test has a non-fatal failure.
function _ZNK7testing10TestResult18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2464:bool TestResult::HasNonfatalFailure() const {
    #####: 2465:  return CountIf(test_part_results_, TestPartNonfatallyFailed) > 0;
    %%%%%: 2465-block  0
call    0 never executed
        -: 2466:}
        -: 2467:
        -: 2468:// Gets the number of all test parts.  This is the sum of the number
        -: 2469:// of successful test parts and the number of failed test parts.
function _ZNK7testing10TestResult16total_part_countEv called 664 returned 100% blocks executed 100%
      664: 2470:int TestResult::total_part_count() const {
      664: 2471:  return static_cast<int>(test_part_results_.size());
      664: 2471-block  0
call    0 returned 664
        -: 2472:}
        -: 2473:
        -: 2474:// Returns the number of the test properties.
function _ZNK7testing10TestResult19test_property_countEv called 0 returned 0% blocks executed 0%
    #####: 2475:int TestResult::test_property_count() const {
    #####: 2476:  return static_cast<int>(test_properties_.size());
    %%%%%: 2476-block  0
call    0 never executed
        -: 2477:}
        -: 2478:
        -: 2479:// class Test
        -: 2480:
        -: 2481:// Creates a Test object.
        -: 2482:
        -: 2483:// The c'tor saves the states of all flags.
function _ZN7testing4TestC2Ev called 43 returned 100% blocks executed 71%
       43: 2484:Test::Test() : gtest_flag_saver_(new GTEST_FLAG_SAVER_) {}
       43: 2484-block  0
call    0 returned 43
call    1 returned 43
branch  2 taken 43 (fallthrough)
branch  3 taken 0 (throw)
       43: 2484-block  1
call    4 returned 43
    $$$$$: 2484-block  2
branch  5 never executed (fallthrough)
branch  6 never executed
    $$$$$: 2484-block  3
call    7 never executed
        -: 2485:
        -: 2486:// The d'tor restores the states of all flags.  The actual work is
        -: 2487:// done by the d'tor of the gtest_flag_saver_ field, and thus not
        -: 2488:// visible here.
      43*: 2489:Test::~Test() = default;
------------------
_ZN7testing4TestD0Ev:
function _ZN7testing4TestD0Ev called 0 returned 0% blocks executed 0%
    #####: 2489:Test::~Test() = default;
    %%%%%: 2489-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing4TestD2Ev:
function _ZN7testing4TestD2Ev called 43 returned 100% blocks executed 100%
       43: 2489:Test::~Test() = default;
       43: 2489-block  0
call    0 returned 43
------------------
        -: 2490:
        -: 2491:// Sets up the test fixture.
        -: 2492://
        -: 2493:// A sub-class may override this.
function _ZN7testing4Test5SetUpEv called 43 returned 100% blocks executed 100%
       43: 2494:void Test::SetUp() {}
        -: 2495:
        -: 2496:// Tears down the test fixture.
        -: 2497://
        -: 2498:// A sub-class may override this.
function _ZN7testing4Test8TearDownEv called 43 returned 100% blocks executed 100%
       43: 2499:void Test::TearDown() {}
        -: 2500:
        -: 2501:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 2502:void Test::RecordProperty(const std::string& key, const std::string& value) {
    #####: 2503:  UnitTest::GetInstance()->RecordProperty(key, value);
    %%%%%: 2503-block  0
call    0 never executed
call    1 never executed
    #####: 2504:}
        -: 2505:
        -: 2506:namespace internal {
        -: 2507:
function _ZN7testing8internal30ReportFailureInUnknownLocationENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2508:void ReportFailureInUnknownLocation(TestPartResult::Type result_type,
        -: 2509:                                    const std::string& message) {
        -: 2510:  // This function is a friend of UnitTest and as such has access to
        -: 2511:  // AddTestPartResult.
    #####: 2512:  UnitTest::GetInstance()->AddTestPartResult(
    %%%%%: 2512-block  0
call    0 never executed
    %%%%%: 2512-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2512-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 2512-block  3
call    7 never executed
    $$$$$: 2512-block  4
call    8 never executed
    $$$$$: 2512-block  5
        -: 2513:      result_type,
        -: 2514:      nullptr,  // No info about the source file where the exception occurred.
        -: 2515:      -1,       // We have no info on which line caused the exception.
        -: 2516:      message,
        -: 2517:      "");  // No stack trace, either.
    #####: 2518:}
    %%%%%: 2518-block  0
        -: 2519:
        -: 2520:}  // namespace internal
        -: 2521:
        -: 2522:// Google Test requires all tests in the same test suite to use the same test
        -: 2523:// fixture class.  This function checks if the current test has the
        -: 2524:// same fixture class as the first test in the current test suite.  If
        -: 2525:// yes, it returns true; otherwise it generates a Google Test failure and
        -: 2526:// returns false.
function _ZN7testing4Test19HasSameFixtureClassEv called 43 returned 100% blocks executed 15%
       43: 2527:bool Test::HasSameFixtureClass() {
       43: 2528:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       43: 2528-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43: 2529:  const TestSuite* const test_suite = impl->current_test_suite();
       43: 2529-block  0
call    0 returned 43
        -: 2530:
        -: 2531:  // Info about the first test in the current test suite.
       43: 2532:  const TestInfo* const first_test_info = test_suite->test_info_list()[0];
call    0 returned 43
call    1 returned 43
       43: 2533:  const internal::TypeId first_fixture_id = first_test_info->fixture_class_id_;
       43: 2534:  const char* const first_test_name = first_test_info->name();
call    0 returned 43
        -: 2535:
        -: 2536:  // Info about the current test.
       43: 2537:  const TestInfo* const this_test_info = impl->current_test_info();
call    0 returned 43
       43: 2538:  const internal::TypeId this_fixture_id = this_test_info->fixture_class_id_;
       43: 2539:  const char* const this_test_name = this_test_info->name();
call    0 returned 43
        -: 2540:
       43: 2541:  if (this_fixture_id != first_fixture_id) {
branch  0 taken 0 (fallthrough)
branch  1 taken 43
        -: 2542:    // Is the first test defined using TEST?
    #####: 2543:    const bool first_is_TEST = first_fixture_id == internal::GetTestTypeId();
    %%%%%: 2543-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2544:    // Is this test defined using TEST?
    #####: 2545:    const bool this_is_TEST = this_fixture_id == internal::GetTestTypeId();
    %%%%%: 2545-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2546:
    #####: 2547:    if (first_is_TEST || this_is_TEST) {
    %%%%%: 2547-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2547-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 2548:      // Both TEST and TEST_F appear in same test suite, which is incorrect.
        -: 2549:      // Tell the user how to fix this.
        -: 2550:
        -: 2551:      // Gets the name of the TEST and the name of the TEST_F.  Note
        -: 2552:      // that first_is_TEST and this_is_TEST cannot both be true, as
        -: 2553:      // the fixture IDs are different for the two tests.
    #####: 2554:      const char* const TEST_name =
    %%%%%: 2554-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2554-block  1
    %%%%%: 2554-block  2
        -: 2555:          first_is_TEST ? first_test_name : this_test_name;
    #####: 2556:      const char* const TEST_F_name =
    %%%%%: 2556-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2556-block  1
    %%%%%: 2556-block  2
        -: 2557:          first_is_TEST ? this_test_name : first_test_name;
        -: 2558:
    #####: 2559:      ADD_FAILURE()
    %%%%%: 2559-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2559-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2559-block  2
call    6 never executed
    $$$$$: 2559-block  3
call    7 never executed
    $$$$$: 2559-block  4
    $$$$$: 2559-block  5
call    8 never executed
    $$$$$: 2559-block  6
    #####: 2560:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2560-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2561:          << "class, so mixing TEST_F and TEST in the same test suite is\n"
    %%%%%: 2561-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2562:          << "illegal.  In test suite " << this_test_info->test_suite_name()
    %%%%%: 2562-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2562-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
    $$$$$: 2562-block  2
    #####: 2563:          << ",\n"
    %%%%%: 2563-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2564:          << "test " << TEST_F_name << " is defined using TEST_F but\n"
    %%%%%: 2564-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2564-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2564-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2565:          << "test " << TEST_name << " is defined using TEST.  You probably\n"
    %%%%%: 2565-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2565-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2565-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2566:          << "want to change the TEST to TEST_F or move it to another test\n"
    %%%%%: 2566-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2567:          << "case.";
    %%%%%: 2567-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2567-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 2568:    } else {
        -: 2569:      // Two fixture classes with the same name appear in two different
        -: 2570:      // namespaces, which is not allowed. Tell the user how to fix this.
    #####: 2571:      ADD_FAILURE()
    %%%%%: 2571-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2571-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2571-block  2
call    6 never executed
    $$$$$: 2571-block  3
call    7 never executed
    $$$$$: 2571-block  4
    $$$$$: 2571-block  5
call    8 never executed
    $$$$$: 2571-block  6
    #####: 2572:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2572-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2573:          << "class.  However, in test suite "
    %%%%%: 2573-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2574:          << this_test_info->test_suite_name() << ",\n"
    %%%%%: 2574-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2574-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
    $$$$$: 2574-block  2
    #####: 2575:          << "you defined test " << first_test_name << " and test "
    %%%%%: 2575-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2575-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2575-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2576:          << this_test_name << "\n"
    %%%%%: 2576-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2576-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 2577:          << "using two different test fixture classes.  This can happen if\n"
    %%%%%: 2577-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2578:          << "the two classes are from different namespaces or translation\n"
    %%%%%: 2578-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2579:          << "units and have the same name.  You should probably rename one\n"
    %%%%%: 2579-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2580:          << "of the classes to put the tests into different test suites.";
    %%%%%: 2580-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2580-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 2581:    }
    #####: 2582:    return false;
    %%%%%: 2582-block  0
        -: 2583:  }
        -: 2584:
       43: 2585:  return true;
       43: 2585-block  0
        -: 2586:}
        -: 2587:
        -: 2588:namespace internal {
        -: 2589:
        -: 2590:#if GTEST_HAS_EXCEPTIONS
        -: 2591:
        -: 2592:// Adds an "exception thrown" fatal failure to the current test.
function _ZN7testing8internalL25FormatCxxExceptionMessageEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 2593:static std::string FormatCxxExceptionMessage(const char* description,
        -: 2594:                                             const char* location) {
    #####: 2595:  Message message;
    %%%%%: 2595-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2596:  if (description != nullptr) {
    %%%%%: 2596-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2597:    message << "C++ exception with description \"" << description << "\"";
    %%%%%: 2597-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2597-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2597-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 2598:  } else {
    #####: 2599:    message << "Unknown C++ exception";
    %%%%%: 2599-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2600:  }
    #####: 2601:  message << " thrown in " << location << ".";
    %%%%%: 2601-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2601-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2601-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 2602:
    #####: 2603:  return message.GetString();
    %%%%%: 2603-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2603-block  1
    #####: 2604:}
    %%%%%: 2604-block  0
call    0 never executed
    $$$$$: 2604-block  1
call    1 never executed
        -: 2605:
        -: 2606:static std::string PrintTestPartResultToString(
        -: 2607:    const TestPartResult& test_part_result);
        -: 2608:
function _ZN7testing8internal26GoogleTestFailureExceptionC2ERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2609:GoogleTestFailureException::GoogleTestFailureException(
    #####: 2610:    const TestPartResult& failure)
    #####: 2611:    : ::std::runtime_error(PrintTestPartResultToString(failure).c_str()) {}
    %%%%%: 2611-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2611-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 2611-block  2
call    7 never executed
    $$$$$: 2611-block  3
call    8 never executed
        -: 2612:
        -: 2613:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2614:
        -: 2615:// We put these helper functions in the internal namespace as IBM's xlC
        -: 2616:// compiler rejects the code if they were declared static.
        -: 2617:
        -: 2618:// Runs the given method and handles SEH exceptions it throws, when
        -: 2619:// SEH is supported; returns the 0-value for type Result in case of an
        -: 2620:// SEH exception.  (Microsoft compilers cannot handle SEH and C++
        -: 2621:// exceptions in the same function.  Therefore, we provide a separate
        -: 2622:// wrapper function for handling SEH exceptions.)
        -: 2623:template <class T, typename Result>
      236: 2624:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2625:                                              const char* location) {
        -: 2626:#if GTEST_HAS_SEH
        -: 2627:  __try {
        -: 2628:    return (object->*method)();
        -: 2629:  } __except (internal::UnitTestOptions::GTestProcessSEH(  // NOLINT
        -: 2630:      GetExceptionCode(), location)) {
        -: 2631:    return static_cast<Result>(0);
        -: 2632:  }
        -: 2633:#else
        -: 2634:  (void)location;
     236*: 2635:  return (object->*method)();
        -: 2636:#endif  // GTEST_HAS_SEH
        -: 2637:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 83%
        1: 2624:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2625:                                              const char* location) {
        -: 2626:#if GTEST_HAS_SEH
        -: 2627:  __try {
        -: 2628:    return (object->*method)();
        -: 2629:  } __except (internal::UnitTestOptions::GTestProcessSEH(  // NOLINT
        -: 2630:      GetExceptionCode(), location)) {
        -: 2631:    return static_cast<Result>(0);
        -: 2632:  }
        -: 2633:#else
        -: 2634:  (void)location;
       1*: 2635:  return (object->*method)();
        1: 2635-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 2635-block  1
        1: 2635-block  2
        1: 2635-block  3
call    2 returned 1
        -: 2636:#endif  // GTEST_HAS_SEH
        -: 2637:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 20 returned 100% blocks executed 80%
       20: 2624:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2625:                                              const char* location) {
        -: 2626:#if GTEST_HAS_SEH
        -: 2627:  __try {
        -: 2628:    return (object->*method)();
        -: 2629:  } __except (internal::UnitTestOptions::GTestProcessSEH(  // NOLINT
        -: 2630:      GetExceptionCode(), location)) {
        -: 2631:    return static_cast<Result>(0);
        -: 2632:  }
        -: 2633:#else
        -: 2634:  (void)location;
      20*: 2635:  return (object->*method)();
       20: 2635-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    %%%%%: 2635-block  1
       20: 2635-block  2
       20: 2635-block  3
call    2 returned 20
        -: 2636:#endif  // GTEST_HAS_SEH
        -: 2637:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 43 returned 100% blocks executed 83%
       43: 2624:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2625:                                              const char* location) {
        -: 2626:#if GTEST_HAS_SEH
        -: 2627:  __try {
        -: 2628:    return (object->*method)();
        -: 2629:  } __except (internal::UnitTestOptions::GTestProcessSEH(  // NOLINT
        -: 2630:      GetExceptionCode(), location)) {
        -: 2631:    return static_cast<Result>(0);
        -: 2632:  }
        -: 2633:#else
        -: 2634:  (void)location;
      43*: 2635:  return (object->*method)();
       43: 2635-block  0
branch  0 taken 43 (fallthrough)
branch  1 taken 0
       43: 2635-block  1
    %%%%%: 2635-block  2
       43: 2635-block  3
call    2 returned 43
        -: 2636:#endif  // GTEST_HAS_SEH
        -: 2637:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 172 returned 100% blocks executed 100%
      172: 2624:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2625:                                              const char* location) {
        -: 2626:#if GTEST_HAS_SEH
        -: 2627:  __try {
        -: 2628:    return (object->*method)();
        -: 2629:  } __except (internal::UnitTestOptions::GTestProcessSEH(  // NOLINT
        -: 2630:      GetExceptionCode(), location)) {
        -: 2631:    return static_cast<Result>(0);
        -: 2632:  }
        -: 2633:#else
        -: 2634:  (void)location;
      172: 2635:  return (object->*method)();
      172: 2635-block  0
branch  0 taken 129 (fallthrough)
branch  1 taken 43
      129: 2635-block  1
       43: 2635-block  2
      172: 2635-block  3
call    2 returned 172
        -: 2636:#endif  // GTEST_HAS_SEH
        -: 2637:}
------------------
        -: 2638:
        -: 2639:// Runs the given method and catches and reports C++ and/or SEH-style
        -: 2640:// exceptions, if they are supported; returns the 0-value for type
        -: 2641:// Result in case of an SEH exception.
        -: 2642:template <class T, typename Result>
      236: 2643:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2644:                                           const char* location) {
        -: 2645:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2646:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2647:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2648:  // after the exception is caught and either report or re-throw the
        -: 2649:  // exception based on the flag's value:
        -: 2650:  //
        -: 2651:  // try {
        -: 2652:  //   // Perform the test method.
        -: 2653:  // } catch (...) {
        -: 2654:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2655:  //     // Report the exception as failure.
        -: 2656:  //   else
        -: 2657:  //     throw;  // Re-throws the original exception.
        -: 2658:  // }
        -: 2659:  //
        -: 2660:  // However, the purpose of this flag is to allow the program to drop into
        -: 2661:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2662:  // control enters the catch block, the exception origin information is
        -: 2663:  // lost and the debugger will stop the program at the point of the
        -: 2664:  // re-throw in this function -- instead of at the point of the original
        -: 2665:  // throw statement in the code under test.  For this reason, we perform
        -: 2666:  // the check early, sacrificing the ability to affect Google Test's
        -: 2667:  // exception handling in the method where the exception is thrown.
      236: 2668:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        -: 2669:#if GTEST_HAS_EXCEPTIONS
        -: 2670:    try {
      236: 2671:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
    =====: 2672:    } catch (const AssertionException&) {  // NOLINT
        -: 2673:      // This failure was reported already.
    =====: 2674:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
        -: 2675:      // This exception type can only be thrown by a failed Google
        -: 2676:      // Test assertion with the intention of letting another testing
        -: 2677:      // framework catch it.  Therefore we just re-throw it.
    =====: 2678:      throw;
    =====: 2679:    } catch (const std::exception& e) {  // NOLINT
    =====: 2680:      internal::ReportFailureInUnknownLocation(
        -: 2681:          TestPartResult::kFatalFailure,
    =====: 2682:          FormatCxxExceptionMessage(e.what(), location));
    =====: 2683:    } catch (...) {  // NOLINT
    =====: 2684:      internal::ReportFailureInUnknownLocation(
        -: 2685:          TestPartResult::kFatalFailure,
        -: 2686:          FormatCxxExceptionMessage(nullptr, location));
        -: 2687:    }
    =====: 2688:    return static_cast<Result>(0);
        -: 2689:#else
        -: 2690:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2691:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2692:  } else {
    #####: 2693:    return (object->*method)();
        -: 2694:  }
        -: 2695:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 18%
        1: 2643:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2644:                                           const char* location) {
        -: 2645:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2646:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2647:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2648:  // after the exception is caught and either report or re-throw the
        -: 2649:  // exception based on the flag's value:
        -: 2650:  //
        -: 2651:  // try {
        -: 2652:  //   // Perform the test method.
        -: 2653:  // } catch (...) {
        -: 2654:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2655:  //     // Report the exception as failure.
        -: 2656:  //   else
        -: 2657:  //     throw;  // Re-throws the original exception.
        -: 2658:  // }
        -: 2659:  //
        -: 2660:  // However, the purpose of this flag is to allow the program to drop into
        -: 2661:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2662:  // control enters the catch block, the exception origin information is
        -: 2663:  // lost and the debugger will stop the program at the point of the
        -: 2664:  // re-throw in this function -- instead of at the point of the original
        -: 2665:  // throw statement in the code under test.  For this reason, we perform
        -: 2666:  // the check early, sacrificing the ability to affect Google Test's
        -: 2667:  // exception handling in the method where the exception is thrown.
        1: 2668:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        1: 2668-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -: 2669:#if GTEST_HAS_EXCEPTIONS
        -: 2670:    try {
        1: 2671:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        1: 2671-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2671-block  1
    =====: 2672:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2672-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2672-block  1
call    4 never executed
call    5 never executed
        -: 2673:      // This failure was reported already.
    =====: 2674:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2674-block  0
call    0 never executed
    $$$$$: 2674-block  1
call    1 never executed
        -: 2675:      // This exception type can only be thrown by a failed Google
        -: 2676:      // Test assertion with the intention of letting another testing
        -: 2677:      // framework catch it.  Therefore we just re-throw it.
    =====: 2678:      throw;
call    0 never executed
    =====: 2679:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2679-block  0
call    0 never executed
    $$$$$: 2679-block  1
call    1 never executed
    =====: 2680:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2680-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2680-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2680-block  2
call    8 never executed
    $$$$$: 2680-block  3
        -: 2681:          TestPartResult::kFatalFailure,
    =====: 2682:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2683:    } catch (...) {  // NOLINT
    $$$$$: 2683-block  0
call    0 never executed
    $$$$$: 2683-block  1
call    1 never executed
    =====: 2684:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2684-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2684-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2684-block  2
call    8 never executed
    $$$$$: 2684-block  3
        -: 2685:          TestPartResult::kFatalFailure,
        -: 2686:          FormatCxxExceptionMessage(nullptr, location));
        -: 2687:    }
    =====: 2688:    return static_cast<Result>(0);
    $$$$$: 2688-block  0
        -: 2689:#else
        -: 2690:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2691:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2692:  } else {
    #####: 2693:    return (object->*method)();
    %%%%%: 2693-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2693-block  1
    %%%%%: 2693-block  2
    %%%%%: 2693-block  3
call    2 never executed
        -: 2694:  }
        -: 2695:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 20 returned 100% blocks executed 18%
       20: 2643:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2644:                                           const char* location) {
        -: 2645:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2646:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2647:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2648:  // after the exception is caught and either report or re-throw the
        -: 2649:  // exception based on the flag's value:
        -: 2650:  //
        -: 2651:  // try {
        -: 2652:  //   // Perform the test method.
        -: 2653:  // } catch (...) {
        -: 2654:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2655:  //     // Report the exception as failure.
        -: 2656:  //   else
        -: 2657:  //     throw;  // Re-throws the original exception.
        -: 2658:  // }
        -: 2659:  //
        -: 2660:  // However, the purpose of this flag is to allow the program to drop into
        -: 2661:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2662:  // control enters the catch block, the exception origin information is
        -: 2663:  // lost and the debugger will stop the program at the point of the
        -: 2664:  // re-throw in this function -- instead of at the point of the original
        -: 2665:  // throw statement in the code under test.  For this reason, we perform
        -: 2666:  // the check early, sacrificing the ability to affect Google Test's
        -: 2667:  // exception handling in the method where the exception is thrown.
       20: 2668:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
       20: 2668-block  0
call    0 returned 20
call    1 returned 20
branch  2 taken 20 (fallthrough)
branch  3 taken 0
        -: 2669:#if GTEST_HAS_EXCEPTIONS
        -: 2670:    try {
       20: 2671:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
       20: 2671-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20: 2671-block  1
    =====: 2672:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2672-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2672-block  1
call    4 never executed
call    5 never executed
        -: 2673:      // This failure was reported already.
    =====: 2674:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2674-block  0
call    0 never executed
    $$$$$: 2674-block  1
call    1 never executed
        -: 2675:      // This exception type can only be thrown by a failed Google
        -: 2676:      // Test assertion with the intention of letting another testing
        -: 2677:      // framework catch it.  Therefore we just re-throw it.
    =====: 2678:      throw;
call    0 never executed
    =====: 2679:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2679-block  0
call    0 never executed
    $$$$$: 2679-block  1
call    1 never executed
    =====: 2680:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2680-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2680-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2680-block  2
call    8 never executed
    $$$$$: 2680-block  3
        -: 2681:          TestPartResult::kFatalFailure,
    =====: 2682:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2683:    } catch (...) {  // NOLINT
    $$$$$: 2683-block  0
call    0 never executed
    $$$$$: 2683-block  1
call    1 never executed
    =====: 2684:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2684-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2684-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2684-block  2
call    8 never executed
    $$$$$: 2684-block  3
        -: 2685:          TestPartResult::kFatalFailure,
        -: 2686:          FormatCxxExceptionMessage(nullptr, location));
        -: 2687:    }
    =====: 2688:    return static_cast<Result>(0);
    $$$$$: 2688-block  0
        -: 2689:#else
        -: 2690:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2691:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2692:  } else {
    #####: 2693:    return (object->*method)();
    %%%%%: 2693-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2693-block  1
    %%%%%: 2693-block  2
    %%%%%: 2693-block  3
call    2 never executed
        -: 2694:  }
        -: 2695:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 43 returned 100% blocks executed 18%
       43: 2643:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2644:                                           const char* location) {
        -: 2645:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2646:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2647:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2648:  // after the exception is caught and either report or re-throw the
        -: 2649:  // exception based on the flag's value:
        -: 2650:  //
        -: 2651:  // try {
        -: 2652:  //   // Perform the test method.
        -: 2653:  // } catch (...) {
        -: 2654:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2655:  //     // Report the exception as failure.
        -: 2656:  //   else
        -: 2657:  //     throw;  // Re-throws the original exception.
        -: 2658:  // }
        -: 2659:  //
        -: 2660:  // However, the purpose of this flag is to allow the program to drop into
        -: 2661:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2662:  // control enters the catch block, the exception origin information is
        -: 2663:  // lost and the debugger will stop the program at the point of the
        -: 2664:  // re-throw in this function -- instead of at the point of the original
        -: 2665:  // throw statement in the code under test.  For this reason, we perform
        -: 2666:  // the check early, sacrificing the ability to affect Google Test's
        -: 2667:  // exception handling in the method where the exception is thrown.
       43: 2668:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
       43: 2668-block  0
call    0 returned 43
call    1 returned 43
branch  2 taken 43 (fallthrough)
branch  3 taken 0
        -: 2669:#if GTEST_HAS_EXCEPTIONS
        -: 2670:    try {
       43: 2671:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
       43: 2671-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43: 2671-block  1
    =====: 2672:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2672-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2672-block  1
call    4 never executed
call    5 never executed
        -: 2673:      // This failure was reported already.
    =====: 2674:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2674-block  0
call    0 never executed
    $$$$$: 2674-block  1
call    1 never executed
        -: 2675:      // This exception type can only be thrown by a failed Google
        -: 2676:      // Test assertion with the intention of letting another testing
        -: 2677:      // framework catch it.  Therefore we just re-throw it.
    =====: 2678:      throw;
call    0 never executed
    =====: 2679:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2679-block  0
call    0 never executed
    $$$$$: 2679-block  1
call    1 never executed
    =====: 2680:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2680-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2680-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2680-block  2
call    8 never executed
    $$$$$: 2680-block  3
        -: 2681:          TestPartResult::kFatalFailure,
    =====: 2682:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2683:    } catch (...) {  // NOLINT
    $$$$$: 2683-block  0
call    0 never executed
    $$$$$: 2683-block  1
call    1 never executed
    =====: 2684:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2684-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2684-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2684-block  2
call    8 never executed
    $$$$$: 2684-block  3
        -: 2685:          TestPartResult::kFatalFailure,
        -: 2686:          FormatCxxExceptionMessage(nullptr, location));
        -: 2687:    }
    =====: 2688:    return static_cast<Result>(0);
    $$$$$: 2688-block  0
        -: 2689:#else
        -: 2690:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2691:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2692:  } else {
    #####: 2693:    return (object->*method)();
    %%%%%: 2693-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2693-block  1
    %%%%%: 2693-block  2
    %%%%%: 2693-block  3
call    2 never executed
        -: 2694:  }
        -: 2695:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 172 returned 100% blocks executed 18%
      172: 2643:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2644:                                           const char* location) {
        -: 2645:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2646:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2647:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2648:  // after the exception is caught and either report or re-throw the
        -: 2649:  // exception based on the flag's value:
        -: 2650:  //
        -: 2651:  // try {
        -: 2652:  //   // Perform the test method.
        -: 2653:  // } catch (...) {
        -: 2654:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2655:  //     // Report the exception as failure.
        -: 2656:  //   else
        -: 2657:  //     throw;  // Re-throws the original exception.
        -: 2658:  // }
        -: 2659:  //
        -: 2660:  // However, the purpose of this flag is to allow the program to drop into
        -: 2661:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2662:  // control enters the catch block, the exception origin information is
        -: 2663:  // lost and the debugger will stop the program at the point of the
        -: 2664:  // re-throw in this function -- instead of at the point of the original
        -: 2665:  // throw statement in the code under test.  For this reason, we perform
        -: 2666:  // the check early, sacrificing the ability to affect Google Test's
        -: 2667:  // exception handling in the method where the exception is thrown.
      172: 2668:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
      172: 2668-block  0
call    0 returned 172
call    1 returned 172
branch  2 taken 172 (fallthrough)
branch  3 taken 0
        -: 2669:#if GTEST_HAS_EXCEPTIONS
        -: 2670:    try {
      172: 2671:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
      172: 2671-block  0
call    0 returned 172
branch  1 taken 172 (fallthrough)
branch  2 taken 0 (throw)
      172: 2671-block  1
    =====: 2672:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2672-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2672-block  1
call    4 never executed
call    5 never executed
        -: 2673:      // This failure was reported already.
    =====: 2674:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2674-block  0
call    0 never executed
    $$$$$: 2674-block  1
call    1 never executed
        -: 2675:      // This exception type can only be thrown by a failed Google
        -: 2676:      // Test assertion with the intention of letting another testing
        -: 2677:      // framework catch it.  Therefore we just re-throw it.
    =====: 2678:      throw;
call    0 never executed
    =====: 2679:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2679-block  0
call    0 never executed
    $$$$$: 2679-block  1
call    1 never executed
    =====: 2680:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2680-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2680-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2680-block  2
call    8 never executed
    $$$$$: 2680-block  3
        -: 2681:          TestPartResult::kFatalFailure,
    =====: 2682:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2683:    } catch (...) {  // NOLINT
    $$$$$: 2683-block  0
call    0 never executed
    $$$$$: 2683-block  1
call    1 never executed
    =====: 2684:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2684-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2684-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2684-block  2
call    8 never executed
    $$$$$: 2684-block  3
        -: 2685:          TestPartResult::kFatalFailure,
        -: 2686:          FormatCxxExceptionMessage(nullptr, location));
        -: 2687:    }
    =====: 2688:    return static_cast<Result>(0);
    $$$$$: 2688-block  0
        -: 2689:#else
        -: 2690:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2691:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2692:  } else {
    #####: 2693:    return (object->*method)();
    %%%%%: 2693-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2693-block  1
    %%%%%: 2693-block  2
    %%%%%: 2693-block  3
call    2 never executed
        -: 2694:  }
        -: 2695:}
------------------
        -: 2696:
        -: 2697:}  // namespace internal
        -: 2698:
        -: 2699:// Runs the test and updates the test result.
function _ZN7testing4Test3RunEv called 43 returned 100% blocks executed 90%
       43: 2700:void Test::Run() {
      43*: 2701:  if (!HasSameFixtureClass()) return;
       43: 2701-block  0
call    0 returned 43
branch  1 taken 0 (fallthrough)
branch  2 taken 43
    %%%%%: 2701-block  1
        -: 2702:
       43: 2703:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       43: 2703-block  0
call    0 returned 43
       43: 2704:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 43
call    1 returned 43
       43: 2705:  internal::HandleExceptionsInMethodIfSupported(this, &Test::SetUp, "SetUp()");
call    0 returned 43
        -: 2706:  // We will run the test only if SetUp() was successful and didn't call
        -: 2707:  // GTEST_SKIP().
      43*: 2708:  if (!HasFatalFailure() && !IsSkipped()) {
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0
       43: 2708-block  0
call    3 returned 43
branch  4 taken 43 (fallthrough)
branch  5 taken 0
       43: 2708-block  1
    %%%%%: 2708-block  2
       43: 2708-block  3
branch  6 taken 43 (fallthrough)
branch  7 taken 0
       43: 2709:    impl->os_stack_trace_getter()->UponLeavingGTest();
       43: 2709-block  0
call    0 returned 43
call    1 returned 43
       43: 2710:    internal::HandleExceptionsInMethodIfSupported(this, &Test::TestBody,
call    0 returned 43
        -: 2711:                                                  "the test body");
        -: 2712:  }
        -: 2713:
        -: 2714:  // However, we want to clean up as much as possible.  Hence we will
        -: 2715:  // always call TearDown(), even if SetUp() or the test body has
        -: 2716:  // failed.
       43: 2717:  impl->os_stack_trace_getter()->UponLeavingGTest();
       43: 2717-block  0
call    0 returned 43
call    1 returned 43
       43: 2718:  internal::HandleExceptionsInMethodIfSupported(this, &Test::TearDown,
call    0 returned 43
        -: 2719:                                                "TearDown()");
        -: 2720:}
        -: 2721:
        -: 2722:// Returns true if and only if the current test has a fatal failure.
function _ZN7testing4Test15HasFatalFailureEv called 87 returned 100% blocks executed 100%
       87: 2723:bool Test::HasFatalFailure() {
       87: 2724:  return internal::GetUnitTestImpl()->current_test_result()->HasFatalFailure();
       87: 2724-block  0
call    0 returned 87
call    1 returned 87
call    2 returned 87
        -: 2725:}
        -: 2726:
        -: 2727:// Returns true if and only if the current test has a non-fatal failure.
function _ZN7testing4Test18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2728:bool Test::HasNonfatalFailure() {
        -: 2729:  return internal::GetUnitTestImpl()
        -: 2730:      ->current_test_result()
    #####: 2731:      ->HasNonfatalFailure();
    %%%%%: 2731-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2732:}
        -: 2733:
        -: 2734:// Returns true if and only if the current test was skipped.
function _ZN7testing4Test9IsSkippedEv called 87 returned 100% blocks executed 100%
       87: 2735:bool Test::IsSkipped() {
       87: 2736:  return internal::GetUnitTestImpl()->current_test_result()->Skipped();
       87: 2736-block  0
call    0 returned 87
call    1 returned 87
call    2 returned 87
        -: 2737:}
        -: 2738:
        -: 2739:// class TestInfo
        -: 2740:
        -: 2741:// Constructs a TestInfo object. It assumes ownership of the test factory
        -: 2742:// object.
function _ZN7testing8TestInfoC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_PKcSA_NS_8internal12CodeLocationEPKvPNSB_15TestFactoryBaseE called 43 returned 100% blocks executed 30%
       43: 2743:TestInfo::TestInfo(const std::string& a_test_suite_name,
        -: 2744:                   const std::string& a_name, const char* a_type_param,
        -: 2745:                   const char* a_value_param,
        -: 2746:                   internal::CodeLocation a_code_location,
        -: 2747:                   internal::TypeId fixture_class_id,
       43: 2748:                   internal::TestFactoryBase* factory)
       43: 2749:    : test_suite_name_(a_test_suite_name),
       43: 2749-block  0
call    0 returned 43
        -: 2750:      // begin()/end() is MSVC 17.3.3 ASAN crash workaround (GitHub issue #3997)
       86: 2751:      name_(a_name.begin(), a_name.end()),
       43: 2751-block  0
call    0 returned 43
call    1 returned 43
call    2 returned 43
branch  3 taken 43 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$: 2751-block  1
      43*: 2752:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
       43: 2752-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 43
    %%%%%: 2752-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 2752-block  2
    %%%%%: 2752-block  3
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 2752-block  4
       43: 2752-block  5
       43: 2752-block  6
call    8 returned 43
branch  9 taken 0 (fallthrough)
branch 10 taken 43
    $$$$$: 2752-block  7
branch 11 never executed (fallthrough)
branch 12 never executed
    $$$$$: 2752-block  8
    $$$$$: 2752-block  9
branch 13 never executed (fallthrough)
branch 14 never executed
    $$$$$: 2752-block 10
branch 15 never executed (fallthrough)
branch 16 never executed
    $$$$$: 2752-block 11
call   17 never executed
      43*: 2753:      value_param_(a_value_param ? new std::string(a_value_param) : nullptr),
       43: 2753-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 43
    %%%%%: 2753-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 2753-block  2
    %%%%%: 2753-block  3
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 2753-block  4
       43: 2753-block  5
       43: 2753-block  6
call    8 returned 43
branch  9 taken 0 (fallthrough)
branch 10 taken 43
    $$$$$: 2753-block  7
branch 11 never executed (fallthrough)
branch 12 never executed
    $$$$$: 2753-block  8
    $$$$$: 2753-block  9
branch 13 never executed (fallthrough)
branch 14 never executed
    $$$$$: 2753-block 10
branch 15 never executed (fallthrough)
branch 16 never executed
    $$$$$: 2753-block 11
call   17 never executed
       43: 2754:      location_(a_code_location),
       43: 2754-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43: 2755:      fixture_class_id_(fixture_class_id),
       43: 2756:      should_run_(false),
       43: 2757:      is_disabled_(false),
       43: 2758:      matches_filter_(false),
       43: 2759:      is_in_another_shard_(false),
       43: 2760:      factory_(factory),
       43: 2761:      result_() {}
       43: 2761-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43: 2761-block  1
    $$$$$: 2761-block  2
call    3 never executed
    $$$$$: 2761-block  3
call    4 never executed
    $$$$$: 2761-block  4
call    5 never executed
    $$$$$: 2761-block  5
call    6 never executed
    $$$$$: 2761-block  6
call    7 never executed
        -: 2762:
        -: 2763:// Destructs a TestInfo object.
function _ZN7testing8TestInfoD2Ev called 0 returned 0% blocks executed 0%
    #####: 2764:TestInfo::~TestInfo() { delete factory_; }
    %%%%%: 2764-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2764-block  1
call    2 never executed
    %%%%%: 2764-block  2
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -: 2765:
        -: 2766:namespace internal {
        -: 2767:
        -: 2768:// Creates a new TestInfo object and registers it with Google Test;
        -: 2769:// returns the created object.
        -: 2770://
        -: 2771:// Arguments:
        -: 2772://
        -: 2773://   test_suite_name:  name of the test suite
        -: 2774://   name:             name of the test
        -: 2775://   type_param:       the name of the test's type parameter, or NULL if
        -: 2776://                     this is not a typed or a type-parameterized test.
        -: 2777://   value_param:      text representation of the test's value parameter,
        -: 2778://                     or NULL if this is not a value-parameterized test.
        -: 2779://   code_location:    code location where the test is defined
        -: 2780://   fixture_class_id: ID of the test fixture class
        -: 2781://   set_up_tc:        pointer to the function that sets up the test suite
        -: 2782://   tear_down_tc:     pointer to the function that tears down the test suite
        -: 2783://   factory:          pointer to the factory that creates a test object.
        -: 2784://                     The newly created TestInfo instance will assume
        -: 2785://                     ownership of the factory object.
function _ZN7testing8internal23MakeAndRegisterTestInfoEPKcS2_S2_S2_NS0_12CodeLocationEPKvPFvvES7_PNS0_15TestFactoryBaseE called 43 returned 100% blocks executed 53%
       43: 2786:TestInfo* MakeAndRegisterTestInfo(
        -: 2787:    const char* test_suite_name, const char* name, const char* type_param,
        -: 2788:    const char* value_param, CodeLocation code_location,
        -: 2789:    TypeId fixture_class_id, SetUpTestSuiteFunc set_up_tc,
        -: 2790:    TearDownTestSuiteFunc tear_down_tc, TestFactoryBase* factory) {
        -: 2791:  TestInfo* const test_info =
        -: 2792:      new TestInfo(test_suite_name, name, type_param, value_param,
      215: 2793:                   code_location, fixture_class_id, factory);
       43: 2793-block  0
call    0 returned 43
call    1 returned 43
branch  2 taken 43 (fallthrough)
branch  3 taken 0 (throw)
       43: 2793-block  1
call    4 returned 43
branch  5 taken 43 (fallthrough)
branch  6 taken 0 (throw)
       43: 2793-block  2
call    7 returned 43
branch  8 taken 43 (fallthrough)
branch  9 taken 0 (throw)
       43: 2793-block  3
call   10 returned 43
branch 11 taken 43 (fallthrough)
branch 12 taken 0 (throw)
       43: 2793-block  4
call   13 returned 43
       43: 2793-block  5
call   14 returned 43
       43: 2793-block  6
call   15 returned 43
    $$$$$: 2793-block  7
call   16 never executed
    $$$$$: 2793-block  8
    $$$$$: 2793-block  9
    $$$$$: 2793-block 10
call   17 never executed
    $$$$$: 2793-block 11
    $$$$$: 2793-block 12
    $$$$$: 2793-block 13
call   18 never executed
    $$$$$: 2793-block 14
    $$$$$: 2793-block 15
branch 19 never executed (fallthrough)
branch 20 never executed
    $$$$$: 2793-block 16
call   21 never executed
       43: 2794:  GetUnitTestImpl()->AddTestInfo(set_up_tc, tear_down_tc, test_info);
call    0 returned 43
call    1 returned 43
       43: 2795:  return test_info;
       43: 2795-block  0
        -: 2796:}
        -: 2797:
function _ZN7testing8internal26ReportInvalidTestSuiteTypeEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####: 2798:void ReportInvalidTestSuiteType(const char* test_suite_name,
        -: 2799:                                CodeLocation code_location) {
    #####: 2800:  Message errors;
    %%%%%: 2800-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2801:  errors
    #####: 2802:      << "Attempted redefinition of test suite " << test_suite_name << ".\n"
    %%%%%: 2802-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2802-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2802-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2803:      << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2803-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2804:      << "class.  However, in test suite " << test_suite_name << ", you tried\n"
    %%%%%: 2804-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2804-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2804-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2805:      << "to define a test using a fixture class different from the one\n"
    %%%%%: 2805-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2806:      << "used earlier. This can happen if the two fixture classes are\n"
    %%%%%: 2806-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2807:      << "from different namespaces and have the same name. You should\n"
    %%%%%: 2807-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2808:      << "probably rename one of the classes to put the tests into different\n"
    %%%%%: 2808-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2809:      << "test suites.";
    %%%%%: 2809-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2810:
    #####: 2811:  GTEST_LOG_(ERROR) << FormatFileLocation(code_location.file.c_str(),
    %%%%%: 2811-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2811-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
call    8 never executed
    $$$$$: 2811-block  2
call    9 never executed
    $$$$$: 2811-block  3
    $$$$$: 2811-block  4
call   10 never executed
    $$$$$: 2811-block  5
        -: 2812:                                          code_location.line)
    #####: 2813:                    << " " << errors.GetString();
    %%%%%: 2813-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2813-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2813-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2813-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 2813-block  4
call   12 never executed
call   13 never executed
    $$$$$: 2813-block  5
call   14 never executed
    $$$$$: 2813-block  6
    #####: 2814:}
call    0 never executed
    $$$$$: 2814-block  0
call    1 never executed
        -: 2815:
        -: 2816:// This method expands all parameterized tests registered with macros TEST_P
        -: 2817:// and INSTANTIATE_TEST_SUITE_P into regular tests and registers those.
        -: 2818:// This will be done just once during the program runtime.
function _ZN7testing8internal12UnitTestImpl26RegisterParameterizedTestsEv called 1 returned 100% blocks executed 100%
        1: 2819:void UnitTestImpl::RegisterParameterizedTests() {
        1: 2820:  if (!parameterized_tests_registered_) {
        1: 2820-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2821:    parameterized_test_registry_.RegisterTests();
        1: 2821-block  0
call    0 returned 1
        1: 2822:    type_parameterized_test_registry_.CheckForInstantiations();
call    0 returned 1
        1: 2823:    parameterized_tests_registered_ = true;
        -: 2824:  }
        1: 2825:}
        -: 2826:
        -: 2827:}  // namespace internal
        -: 2828:
        -: 2829:// Creates the test object, runs it, records its result, and then
        -: 2830:// deletes it.
function _ZN7testing8TestInfo3RunEv called 43 returned 100% blocks executed 86%
       43: 2831:void TestInfo::Run() {
       43: 2832:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
       43: 2832-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43: 2832-block  1
call    3 returned 43
call    4 returned 43
       43: 2833:  if (!should_run_) {
branch  0 taken 0 (fallthrough)
branch  1 taken 43
    #####: 2834:    if (is_disabled_ && matches_filter_) repeater->OnTestDisabled(*this);
    %%%%%: 2834-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2834-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 2834-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    #####: 2835:    return;
    %%%%%: 2835-block  0
        -: 2836:  }
        -: 2837:
        -: 2838:  // Tells UnitTest where to store test result.
       43: 2839:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       43: 2839-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43: 2840:  impl->set_current_test_info(this);
       43: 2840-block  0
call    0 returned 43
        -: 2841:
        -: 2842:  // Notifies the unit test event listeners that a test is about to start.
       43: 2843:  repeater->OnTestStart(*this);
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43: 2844:  result_.set_start_timestamp(internal::GetTimeInMillis());
       43: 2844-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43: 2844-block  1
call    3 returned 43
       43: 2845:  internal::Timer timer;
call    0 returned 43
       43: 2846:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43: 2846-block  0
call    3 returned 43
branch  4 taken 43 (fallthrough)
branch  5 taken 0 (throw)
        -: 2847:
        -: 2848:  // Creates the test object.
       86: 2849:  Test* const test = internal::HandleExceptionsInMethodIfSupported(
       43: 2850:      factory_, &internal::TestFactoryBase::CreateTest,
       43: 2850-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
        -: 2851:      "the test fixture's constructor");
        -: 2852:
        -: 2853:  // Runs the test if the constructor didn't generate a fatal failure or invoke
        -: 2854:  // GTEST_SKIP().
        -: 2855:  // Note that the object will not be null
      43*: 2856:  if (!Test::HasFatalFailure() && !Test::IsSkipped()) {
       43: 2856-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43: 2856-block  1
branch  3 taken 43 (fallthrough)
branch  4 taken 0
       43: 2856-block  2
call    5 returned 43
branch  6 taken 43 (fallthrough)
branch  7 taken 0 (throw)
       43: 2856-block  3
branch  8 taken 43 (fallthrough)
branch  9 taken 0
       43: 2856-block  4
    %%%%%: 2856-block  5
       43: 2856-block  6
branch 10 taken 43 (fallthrough)
branch 11 taken 0
        -: 2857:    // This doesn't throw as all user code that can throw are wrapped into
        -: 2858:    // exception handling code.
       43: 2859:    test->Run();
       43: 2859-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
        -: 2860:  }
        -: 2861:
       43: 2862:  if (test != nullptr) {
       43: 2862-block  0
branch  0 taken 43 (fallthrough)
branch  1 taken 0
        -: 2863:    // Deletes the test object.
       43: 2864:    impl->os_stack_trace_getter()->UponLeavingGTest();
       43: 2864-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43: 2864-block  1
call    3 returned 43
branch  4 taken 43 (fallthrough)
branch  5 taken 0 (throw)
       43: 2865:    internal::HandleExceptionsInMethodIfSupported(
       43: 2865-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
        -: 2866:        test, &Test::DeleteSelf_, "the test fixture's destructor");
        -: 2867:  }
        -: 2868:
       43: 2869:  result_.set_elapsed_time(timer.Elapsed());
       43: 2869-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43: 2869-block  1
call    3 returned 43
        -: 2870:
        -: 2871:  // Notifies the unit test event listener that a test has just finished.
       43: 2872:  repeater->OnTestEnd(*this);
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
        -: 2873:
        -: 2874:  // Tells UnitTest to stop associating assertion results to this
        -: 2875:  // test.
       43: 2876:  impl->set_current_test_info(nullptr);
       43: 2876-block  0
call    0 returned 43
        -: 2877:}
        -: 2878:
        -: 2879:// Skip and records a skipped test result for this object.
function _ZN7testing8TestInfo4SkipEv called 0 returned 0% blocks executed 0%
    #####: 2880:void TestInfo::Skip() {
    #####: 2881:  if (!should_run_) return;
    %%%%%: 2881-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2881-block  1
    %%%%%: 2881-block  2
        -: 2882:
    #####: 2883:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 2883-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2884:  impl->set_current_test_info(this);
    %%%%%: 2884-block  0
call    0 never executed
        -: 2885:
    #####: 2886:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2886-block  0
call    3 never executed
call    4 never executed
        -: 2887:
        -: 2888:  // Notifies the unit test event listeners that a test is about to start.
    #####: 2889:  repeater->OnTestStart(*this);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2890:
        -: 2891:  const TestPartResult test_part_result =
    #####: 2892:      TestPartResult(TestPartResult::kSkip, this->file(), this->line(), "");
    %%%%%: 2892-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 2893:  impl->GetTestPartResultReporterForCurrentThread()->ReportTestPartResult(
    %%%%%: 2893-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2893-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 2894:      test_part_result);
        -: 2895:
        -: 2896:  // Notifies the unit test event listener that a test has just finished.
    #####: 2897:  repeater->OnTestEnd(*this);
    %%%%%: 2897-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2898:  impl->set_current_test_info(nullptr);
    %%%%%: 2898-block  0
call    0 never executed
    #####: 2899:}
call    0 never executed
    $$$$$: 2899-block  0
call    1 never executed
        -: 2900:
        -: 2901:// class TestSuite
        -: 2902:
        -: 2903:// Gets the number of successful tests in this test suite.
function _ZNK7testing9TestSuite21successful_test_countEv called 10 returned 100% blocks executed 100%
       10: 2904:int TestSuite::successful_test_count() const {
       10: 2905:  return CountIf(test_info_list_, TestPassed);
       10: 2905-block  0
call    0 returned 10
        -: 2906:}
        -: 2907:
        -: 2908:// Gets the number of successful tests in this test suite.
function _ZNK7testing9TestSuite18skipped_test_countEv called 10 returned 100% blocks executed 100%
       10: 2909:int TestSuite::skipped_test_count() const {
       10: 2910:  return CountIf(test_info_list_, TestSkipped);
       10: 2910-block  0
call    0 returned 10
        -: 2911:}
        -: 2912:
        -: 2913:// Gets the number of failed tests in this test suite.
function _ZNK7testing9TestSuite17failed_test_countEv called 40 returned 100% blocks executed 100%
       40: 2914:int TestSuite::failed_test_count() const {
       40: 2915:  return CountIf(test_info_list_, TestFailed);
       40: 2915-block  0
call    0 returned 40
        -: 2916:}
        -: 2917:
        -: 2918:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing9TestSuite30reportable_disabled_test_countEv called 10 returned 100% blocks executed 100%
       10: 2919:int TestSuite::reportable_disabled_test_count() const {
       10: 2920:  return CountIf(test_info_list_, TestReportableDisabled);
       10: 2920-block  0
call    0 returned 10
        -: 2921:}
        -: 2922:
        -: 2923:// Gets the number of disabled tests in this test suite.
function _ZNK7testing9TestSuite19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2924:int TestSuite::disabled_test_count() const {
    #####: 2925:  return CountIf(test_info_list_, TestDisabled);
    %%%%%: 2925-block  0
call    0 never executed
        -: 2926:}
        -: 2927:
        -: 2928:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing9TestSuite21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2929:int TestSuite::reportable_test_count() const {
    #####: 2930:  return CountIf(test_info_list_, TestReportable);
    %%%%%: 2930-block  0
call    0 never executed
        -: 2931:}
        -: 2932:
        -: 2933:// Get the number of tests in this test suite that should run.
function _ZNK7testing9TestSuite17test_to_run_countEv called 40 returned 100% blocks executed 100%
       40: 2934:int TestSuite::test_to_run_count() const {
       40: 2935:  return CountIf(test_info_list_, ShouldRunTest);
       40: 2935-block  0
call    0 returned 40
        -: 2936:}
        -: 2937:
        -: 2938:// Gets the number of all tests.
function _ZNK7testing9TestSuite16total_test_countEv called 65 returned 100% blocks executed 100%
       65: 2939:int TestSuite::total_test_count() const {
       65: 2940:  return static_cast<int>(test_info_list_.size());
       65: 2940-block  0
call    0 returned 65
        -: 2941:}
        -: 2942:
        -: 2943:// Creates a TestSuite with the given name.
        -: 2944://
        -: 2945:// Arguments:
        -: 2946://
        -: 2947://   a_name:       name of the test suite
        -: 2948://   a_type_param: the name of the test suite's type parameter, or NULL if
        -: 2949://                 this is not a typed or a type-parameterized test suite.
        -: 2950://   set_up_tc:    pointer to the function that sets up the test suite
        -: 2951://   tear_down_tc: pointer to the function that tears down the test suite
function _ZN7testing9TestSuiteC2EPKcS2_PFvvES4_ called 10 returned 100% blocks executed 33%
       10: 2952:TestSuite::TestSuite(const char* a_name, const char* a_type_param,
        -: 2953:                     internal::SetUpTestSuiteFunc set_up_tc,
       10: 2954:                     internal::TearDownTestSuiteFunc tear_down_tc)
       10: 2955:    : name_(a_name),
       10: 2955-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$: 2955-block  1
call    3 never executed
      10*: 2956:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
       10: 2956-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10
    %%%%%: 2956-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 2956-block  2
    %%%%%: 2956-block  3
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 2956-block  4
       10: 2956-block  5
       10: 2956-block  6
call    8 returned 10
branch  9 taken 0 (fallthrough)
branch 10 taken 10
    $$$$$: 2956-block  7
branch 11 never executed (fallthrough)
branch 12 never executed
    $$$$$: 2956-block  8
    $$$$$: 2956-block  9
branch 13 never executed (fallthrough)
branch 14 never executed
    $$$$$: 2956-block 10
branch 15 never executed (fallthrough)
branch 16 never executed
    $$$$$: 2956-block 11
call   17 never executed
       10: 2957:      set_up_tc_(set_up_tc),
       10: 2958:      tear_down_tc_(tear_down_tc),
       10: 2959:      should_run_(false),
       10: 2960:      start_timestamp_(0),
       20: 2961:      elapsed_time_(0) {}
       10: 2961-block  0
       10: 2961-block  1
call    0 returned 10
call    1 returned 10
call    2 returned 10
branch  3 taken 10 (fallthrough)
branch  4 taken 0 (throw)
       10: 2961-block  2
    $$$$$: 2961-block  3
call    5 never executed
    $$$$$: 2961-block  4
call    6 never executed
    $$$$$: 2961-block  5
call    7 never executed
    $$$$$: 2961-block  6
call    8 never executed
        -: 2962:
        -: 2963:// Destructor of TestSuite.
    #####: 2964:TestSuite::~TestSuite() {
        -: 2965:  // Deletes every Test in the collection.
    #####: 2966:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    #####: 2967:}
------------------
_ZN7testing9TestSuiteD0Ev:
function _ZN7testing9TestSuiteD0Ev called 0 returned 0% blocks executed 0%
    #####: 2964:TestSuite::~TestSuite() {
        -: 2965:  // Deletes every Test in the collection.
        -: 2966:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    #####: 2967:}
    %%%%%: 2967-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing9TestSuiteD2Ev:
function _ZN7testing9TestSuiteD2Ev called 0 returned 0% blocks executed 0%
    #####: 2964:TestSuite::~TestSuite() {
        -: 2965:  // Deletes every Test in the collection.
    #####: 2966:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    %%%%%: 2966-block  0
call    0 never executed
    #####: 2967:}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
------------------
        -: 2968:
        -: 2969:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2970:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing9TestSuite11GetTestInfoEi called 10 returned 100% blocks executed 86%
       10: 2971:const TestInfo* TestSuite::GetTestInfo(int i) const {
       10: 2972:  const int index = GetElementOr(test_indices_, i, -1);
       10: 2972-block  0
call    0 returned 10
      10*: 2973:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10: 2973-block  0
call    2 returned 10
    %%%%%: 2973-block  1
       10: 2973-block  2
        -: 2974:}
        -: 2975:
        -: 2976:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2977:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing9TestSuite18GetMutableTestInfoEi called 43 returned 100% blocks executed 86%
       43: 2978:TestInfo* TestSuite::GetMutableTestInfo(int i) {
       43: 2979:  const int index = GetElementOr(test_indices_, i, -1);
       43: 2979-block  0
call    0 returned 43
      43*: 2980:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 taken 43 (fallthrough)
branch  1 taken 0
       43: 2980-block  0
call    2 returned 43
    %%%%%: 2980-block  1
       43: 2980-block  2
        -: 2981:}
        -: 2982:
        -: 2983:// Adds a test to this test suite.  Will delete the test upon
        -: 2984:// destruction of the TestSuite object.
function _ZN7testing9TestSuite11AddTestInfoEPNS_8TestInfoE called 43 returned 100% blocks executed 100%
       43: 2985:void TestSuite::AddTestInfo(TestInfo* test_info) {
       43: 2986:  test_info_list_.push_back(test_info);
       43: 2986-block  0
call    0 returned 43
       43: 2987:  test_indices_.push_back(static_cast<int>(test_indices_.size()));
call    0 returned 43
call    1 returned 43
branch  2 taken 43 (fallthrough)
branch  3 taken 0 (throw)
       43: 2988:}
       43: 2988-block  0
        -: 2989:
        -: 2990:// Runs every test in this TestSuite.
function _ZN7testing9TestSuite3RunEv called 10 returned 100% blocks executed 72%
       10: 2991:void TestSuite::Run() {
      10*: 2992:  if (!should_run_) return;
       10: 2992-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10
    %%%%%: 2992-block  1
    %%%%%: 2992-block  2
        -: 2993:
       10: 2994:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       10: 2994-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10: 2995:  impl->set_current_test_suite(this);
       10: 2995-block  0
call    0 returned 10
        -: 2996:
       10: 2997:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10: 2997-block  0
call    3 returned 10
call    4 returned 10
        -: 2998:
        -: 2999:  // Ensure our tests are in a deterministic order.
        -: 3000:  //
        -: 3001:  // We do this by sorting lexicographically on (file, line number), providing
        -: 3002:  // an order matching what the user can see in the source code.
        -: 3003:  //
        -: 3004:  // In the common case the line number comparison shouldn't be necessary,
        -: 3005:  // because the registrations made by the TEST macro are executed in order
        -: 3006:  // within a translation unit. But this is not true of the manual registration
        -: 3007:  // API, and in more exotic scenarios a single file may be part of multiple
        -: 3008:  // translation units.
       10: 3009:  std::stable_sort(test_info_list_.begin(), test_info_list_.end(),
call    0 returned 10
call    1 returned 10
call    2 returned 10
branch  3 taken 10 (fallthrough)
branch  4 taken 0 (throw)
function _ZZN7testing9TestSuite3RunEvENKUlPKNS_8TestInfoES3_E_clES3_S3_ called 67 returned 100% blocks executed 88%
       67: 3010:                   [](const TestInfo* const a, const TestInfo* const b) {
       67: 3011:                     if (const int result = std::strcmp(a->file(), b->file())) {
       67: 3011-block  0
call    0 returned 67
call    1 returned 67
branch  2 taken 0 (fallthrough)
branch  3 taken 67
    #####: 3012:                       return result < 0;
    %%%%%: 3012-block  0
        -: 3013:                     }
        -: 3014:
       67: 3015:                     return a->line() < b->line();
       67: 3015-block  0
call    0 returned 67
call    1 returned 67
        -: 3016:                   });
        -: 3017:
        -: 3018:  // Call both legacy and the new API
       10: 3019:  repeater->OnTestSuiteStart(*this);
       10: 3019-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
        -: 3020://  Legacy API is deprecated but still available
        -: 3021:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
       10: 3022:  repeater->OnTestCaseStart(*this);
       10: 3022-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
        -: 3023:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3024:
       10: 3025:  impl->os_stack_trace_getter()->UponLeavingGTest();
       10: 3025-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10: 3025-block  1
call    3 returned 10
branch  4 taken 10 (fallthrough)
branch  5 taken 0 (throw)
       10: 3026:  internal::HandleExceptionsInMethodIfSupported(
       10: 3026-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
        -: 3027:      this, &TestSuite::RunSetUpTestSuite, "SetUpTestSuite()");
        -: 3028:
        -: 3029:  const bool skip_all =
      10*: 3030:      ad_hoc_test_result().Failed() || ad_hoc_test_result().Skipped();
       10: 3030-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 10 (fallthrough)
branch  3 taken 0 (throw)
       10: 3030-block  1
branch  4 taken 10 (fallthrough)
branch  5 taken 0
       10: 3030-block  2
call    6 returned 10
call    7 returned 10
branch  8 taken 10 (fallthrough)
branch  9 taken 0 (throw)
       10: 3030-block  3
branch 10 taken 0 (fallthrough)
branch 11 taken 10
    %%%%%: 3030-block  4
       10: 3030-block  5
        -: 3031:
       10: 3032:  start_timestamp_ = internal::GetTimeInMillis();
       10: 3032-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10: 3033:  internal::Timer timer;
       10: 3033-block  0
call    0 returned 10
       53: 3034:  for (int i = 0; i < total_test_count(); i++) {
       43: 3034-block  0
       53: 3034-block  1
call    0 returned 53
branch  1 taken 43
branch  2 taken 10 (fallthrough)
       43: 3035:    if (skip_all) {
       43: 3035-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 43
    #####: 3036:      GetMutableTestInfo(i)->Skip();
    %%%%%: 3036-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3036-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 3037:    } else {
       43: 3038:      GetMutableTestInfo(i)->Run();
       43: 3038-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43: 3038-block  1
call    3 returned 43
branch  4 taken 43 (fallthrough)
branch  5 taken 0 (throw)
        -: 3039:    }
      43*: 3040:    if (GTEST_FLAG_GET(fail_fast) &&
       43: 3040-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 43
    %%%%%: 3040-block  1
       43: 3040-block  2
       43: 3040-block  3
branch  2 taken 0 (fallthrough)
branch  3 taken 43
    #####: 3041:        GetMutableTestInfo(i)->result()->Failed()) {
    %%%%%: 3041-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3041-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 3041-block  2
branch  7 never executed (fallthrough)
branch  8 never executed
    #####: 3042:      for (int j = i + 1; j < total_test_count(); j++) {
    %%%%%: 3042-block  0
    %%%%%: 3042-block  1
    %%%%%: 3042-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3043:        GetMutableTestInfo(j)->Skip();
    %%%%%: 3043-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3043-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 3044:      }
    #####: 3045:      break;
    %%%%%: 3045-block  0
        -: 3046:    }
        -: 3047:  }
       10: 3048:  elapsed_time_ = timer.Elapsed();
       10: 3048-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
        -: 3049:
       10: 3050:  impl->os_stack_trace_getter()->UponLeavingGTest();
       10: 3050-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10: 3050-block  1
call    3 returned 10
branch  4 taken 10 (fallthrough)
branch  5 taken 0 (throw)
       10: 3051:  internal::HandleExceptionsInMethodIfSupported(
       10: 3051-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
        -: 3052:      this, &TestSuite::RunTearDownTestSuite, "TearDownTestSuite()");
        -: 3053:
        -: 3054:  // Call both legacy and the new API
       10: 3055:  repeater->OnTestSuiteEnd(*this);
       10: 3055-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
        -: 3056://  Legacy API is deprecated but still available
        -: 3057:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
       10: 3058:  repeater->OnTestCaseEnd(*this);
       10: 3058-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
        -: 3059:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3060:
       10: 3061:  impl->set_current_test_suite(nullptr);
       10: 3061-block  0
call    0 returned 10
        -: 3062:}
        -: 3063:
        -: 3064:// Skips all tests under this TestSuite.
function _ZN7testing9TestSuite4SkipEv called 0 returned 0% blocks executed 0%
    #####: 3065:void TestSuite::Skip() {
    #####: 3066:  if (!should_run_) return;
    %%%%%: 3066-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3066-block  1
        -: 3067:
    #####: 3068:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 3068-block  0
call    0 never executed
    #####: 3069:  impl->set_current_test_suite(this);
call    0 never executed
        -: 3070:
    #####: 3071:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 never executed
call    1 never executed
call    2 never executed
        -: 3072:
        -: 3073:  // Call both legacy and the new API
    #####: 3074:  repeater->OnTestSuiteStart(*this);
call    0 never executed
        -: 3075://  Legacy API is deprecated but still available
        -: 3076:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3077:  repeater->OnTestCaseStart(*this);
call    0 never executed
        -: 3078:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3079:
    #####: 3080:  for (int i = 0; i < total_test_count(); i++) {
    %%%%%: 3080-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3081:    GetMutableTestInfo(i)->Skip();
    %%%%%: 3081-block  0
call    0 never executed
call    1 never executed
        -: 3082:  }
        -: 3083:
        -: 3084:  // Call both legacy and the new API
    #####: 3085:  repeater->OnTestSuiteEnd(*this);
    %%%%%: 3085-block  0
call    0 never executed
        -: 3086:  // Legacy API is deprecated but still available
        -: 3087:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3088:  repeater->OnTestCaseEnd(*this);
call    0 never executed
        -: 3089:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3090:
    #####: 3091:  impl->set_current_test_suite(nullptr);
call    0 never executed
        -: 3092:}
        -: 3093:
        -: 3094:// Clears the results of all tests in this test suite.
function _ZN7testing9TestSuite11ClearResultEv called 10 returned 100% blocks executed 100%
       10: 3095:void TestSuite::ClearResult() {
       10: 3096:  ad_hoc_test_result_.Clear();
       10: 3096-block  0
call    0 returned 10
       10: 3097:  ForEach(test_info_list_, TestInfo::ClearTestResult);
call    0 returned 10
       10: 3098:}
        -: 3099:
        -: 3100:// Shuffles the tests in this test suite.
function _ZN7testing9TestSuite12ShuffleTestsEPNS_8internal6RandomE called 0 returned 0% blocks executed 0%
    #####: 3101:void TestSuite::ShuffleTests(internal::Random* random) {
    #####: 3102:  Shuffle(random, &test_indices_);
    %%%%%: 3102-block  0
call    0 never executed
    #####: 3103:}
        -: 3104:
        -: 3105:// Restores the test order to before the first shuffle.
function _ZN7testing9TestSuite14UnshuffleTestsEv called 10 returned 100% blocks executed 100%
       10: 3106:void TestSuite::UnshuffleTests() {
       53: 3107:  for (size_t i = 0; i < test_indices_.size(); i++) {
       10: 3107-block  0
       53: 3107-block  1
call    0 returned 53
branch  1 taken 43
branch  2 taken 10 (fallthrough)
       43: 3108:    test_indices_[i] = static_cast<int>(i);
       43: 3108-block  0
call    0 returned 43
        -: 3109:  }
       10: 3110:}
        -: 3111:
        -: 3112:// Formats a countable noun.  Depending on its quantity, either the
        -: 3113:// singular form or the plural form is used. e.g.
        -: 3114://
        -: 3115:// FormatCountableNoun(1, "formula", "formuli") returns "1 formula".
        -: 3116:// FormatCountableNoun(5, "book", "books") returns "5 books".
function _ZN7testingL19FormatCountableNounEiPKcS1_ called 26 returned 100% blocks executed 71%
       26: 3117:static std::string FormatCountableNoun(int count, const char* singular_form,
        -: 3118:                                       const char* plural_form) {
       52: 3119:  return internal::StreamableToString(count) + " " +
       26: 3119-block  0
call    0 returned 26
branch  1 taken 26 (fallthrough)
branch  2 taken 0 (throw)
       26: 3119-block  1
call    3 returned 26
branch  4 taken 26 (fallthrough)
branch  5 taken 0 (throw)
       26: 3119-block  2
call    6 returned 26
call    7 returned 26
    $$$$$: 3119-block  3
call    8 never executed
    $$$$$: 3119-block  4
call    9 never executed
    $$$$$: 3119-block  5
       78: 3120:         (count == 1 ? singular_form : plural_form);
       26: 3120-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 24
        2: 3120-block  1
       24: 3120-block  2
       26: 3120-block  3
call    2 returned 26
branch  3 taken 26 (fallthrough)
branch  4 taken 0 (throw)
       26: 3120-block  4
        -: 3121:}
        -: 3122:
        -: 3123:// Formats the count of tests.
function _ZN7testingL15FormatTestCountEi called 4 returned 100% blocks executed 100%
        4: 3124:static std::string FormatTestCount(int test_count) {
        4: 3125:  return FormatCountableNoun(test_count, "test", "tests");
        4: 3125-block  0
call    0 returned 4
        -: 3126:}
        -: 3127:
        -: 3128:// Formats the count of test suites.
function _ZN7testingL20FormatTestSuiteCountEi called 2 returned 100% blocks executed 100%
        2: 3129:static std::string FormatTestSuiteCount(int test_suite_count) {
        2: 3130:  return FormatCountableNoun(test_suite_count, "test suite", "test suites");
        2: 3130-block  0
call    0 returned 2
        -: 3131:}
        -: 3132:
        -: 3133:// Converts a TestPartResult::Type enum to human-friendly string
        -: 3134:// representation.  Both kNonFatalFailure and kFatalFailure are translated
        -: 3135:// to "Failure", as the user usually doesn't care about the difference
        -: 3136:// between the two when viewing the test result.
function _ZN7testingL26TestPartResultTypeToStringENS_14TestPartResult4TypeE called 7 returned 100% blocks executed 50%
        7: 3137:static const char* TestPartResultTypeToString(TestPartResult::Type type) {
        7: 3138:  switch (type) {
        7: 3138-block  0
branch  0 taken 0
branch  1 taken 0
branch  2 taken 7
branch  3 taken 0
    #####: 3139:    case TestPartResult::kSkip:
    #####: 3140:      return "Skipped\n";
    %%%%%: 3140-block  0
    #####: 3141:    case TestPartResult::kSuccess:
    #####: 3142:      return "Success";
    %%%%%: 3142-block  0
        -: 3143:
        7: 3144:    case TestPartResult::kNonFatalFailure:
        -: 3145:    case TestPartResult::kFatalFailure:
        -: 3146:#ifdef _MSC_VER
        -: 3147:      return "error: ";
        -: 3148:#else
        7: 3149:      return "Failure\n";
        7: 3149-block  0
        -: 3150:#endif
    #####: 3151:    default:
    #####: 3152:      return "Unknown result type";
    %%%%%: 3152-block  0
        -: 3153:  }
        -: 3154:}
        -: 3155:
        -: 3156:namespace internal {
        -: 3157:namespace {
        -: 3158:enum class GTestColor { kDefault, kRed, kGreen, kYellow };
        -: 3159:}  // namespace
        -: 3160:
        -: 3161:// Prints a TestPartResult to an std::string.
function _ZN7testing8internalL27PrintTestPartResultToStringERKNS_14TestPartResultE called 7 returned 100% blocks executed 72%
        7: 3162:static std::string PrintTestPartResultToString(
        -: 3163:    const TestPartResult& test_part_result) {
       14: 3164:  return (Message() << internal::FormatFileLocation(
        7: 3164-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 3164-block  1
call    3 returned 7
call    4 returned 7
call    5 returned 7
branch  6 taken 7 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 7
    $$$$$: 3164-block  2
call    9 never executed
    $$$$$: 3164-block  3
    $$$$$: 3164-block  4
call   10 never executed
        -: 3165:                           test_part_result.file_name(),
        7: 3166:                           test_part_result.line_number())
        7: 3166-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 3167:                    << " "
        7: 3167-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 3168:                    << TestPartResultTypeToString(test_part_result.type())
        7: 3168-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
branch  3 taken 7 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$: 3168-block  1
       14: 3169:                    << test_part_result.message())
        7: 3169-block  0
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0 (throw)
        7: 3169-block  1
call    4 returned 7
    $$$$$: 3169-block  2
       14: 3170:      .GetString();
        7: 3170-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 3170-block  1
        -: 3171:}
        -: 3172:
        -: 3173:// Prints a TestPartResult.
function _ZN7testing8internalL19PrintTestPartResultERKNS_14TestPartResultE called 7 returned 100% blocks executed 85%
        7: 3174:static void PrintTestPartResult(const TestPartResult& test_part_result) {
        7: 3175:  const std::string& result = PrintTestPartResultToString(test_part_result);
        7: 3175-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 3176:  printf("%s\n", result.c_str());
        7: 3176-block  0
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0 (throw)
        7: 3177:  fflush(stdout);
        7: 3177-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 3177-block  1
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        -: 3178:  // If the test program runs in Visual Studio or a debugger, the
        -: 3179:  // following statements add the test part result message to the Output
        -: 3180:  // window such that the user can double-click on it to jump to the
        -: 3181:  // corresponding source code location; otherwise they do nothing.
        -: 3182:#if defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_WINDOWS_MOBILE)
        -: 3183:  // We don't call OutputDebugString*() on Windows Mobile, as printing
        -: 3184:  // to stdout is done by OutputDebugString() there already - we don't
        -: 3185:  // want the same message printed twice.
        7: 3186:  ::OutputDebugStringA(result.c_str());
        7: 3186-block  0
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0 (throw)
        7: 3187:  ::OutputDebugStringA("\n");
        7: 3187-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        -: 3188:#endif
        7: 3189:}
        7: 3189-block  0
call    0 returned 7
    $$$$$: 3189-block  1
call    1 never executed
        -: 3190:
        -: 3191:// class PrettyUnitTestResultPrinter
        -: 3192:#if defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_WINDOWS_MOBILE) &&    \
        -: 3193:    !defined(GTEST_OS_WINDOWS_PHONE) && !defined(GTEST_OS_WINDOWS_RT) && \
        -: 3194:    !defined(GTEST_OS_WINDOWS_MINGW)
        -: 3195:
        -: 3196:// Returns the character attribute for the given color.
        -: 3197:static WORD GetColorAttribute(GTestColor color) {
        -: 3198:  switch (color) {
        -: 3199:    case GTestColor::kRed:
        -: 3200:      return FOREGROUND_RED;
        -: 3201:    case GTestColor::kGreen:
        -: 3202:      return FOREGROUND_GREEN;
        -: 3203:    case GTestColor::kYellow:
        -: 3204:      return FOREGROUND_RED | FOREGROUND_GREEN;
        -: 3205:    default:
        -: 3206:      return 0;
        -: 3207:  }
        -: 3208:}
        -: 3209:
        -: 3210:static int GetBitOffset(WORD color_mask) {
        -: 3211:  if (color_mask == 0) return 0;
        -: 3212:
        -: 3213:  int bitOffset = 0;
        -: 3214:  while ((color_mask & 1) == 0) {
        -: 3215:    color_mask >>= 1;
        -: 3216:    ++bitOffset;
        -: 3217:  }
        -: 3218:  return bitOffset;
        -: 3219:}
        -: 3220:
        -: 3221:static WORD GetNewColor(GTestColor color, WORD old_color_attrs) {
        -: 3222:  // Let's reuse the BG
        -: 3223:  static const WORD background_mask = BACKGROUND_BLUE | BACKGROUND_GREEN |
        -: 3224:                                      BACKGROUND_RED | BACKGROUND_INTENSITY;
        -: 3225:  static const WORD foreground_mask = FOREGROUND_BLUE | FOREGROUND_GREEN |
        -: 3226:                                      FOREGROUND_RED | FOREGROUND_INTENSITY;
        -: 3227:  const WORD existing_bg = old_color_attrs & background_mask;
        -: 3228:
        -: 3229:  WORD new_color =
        -: 3230:      GetColorAttribute(color) | existing_bg | FOREGROUND_INTENSITY;
        -: 3231:  static const int bg_bitOffset = GetBitOffset(background_mask);
        -: 3232:  static const int fg_bitOffset = GetBitOffset(foreground_mask);
        -: 3233:
        -: 3234:  if (((new_color & background_mask) >> bg_bitOffset) ==
        -: 3235:      ((new_color & foreground_mask) >> fg_bitOffset)) {
        -: 3236:    new_color ^= FOREGROUND_INTENSITY;  // invert intensity
        -: 3237:  }
        -: 3238:  return new_color;
        -: 3239:}
        -: 3240:
        -: 3241:#else
        -: 3242:
        -: 3243:// Returns the ANSI color code for the given color. GTestColor::kDefault is
        -: 3244:// an invalid input.
function _ZN7testing8internalL16GetAnsiColorCodeENS0_12_GLOBAL__N_110GTestColorE called 0 returned 0% blocks executed 0%
    #####: 3245:static const char* GetAnsiColorCode(GTestColor color) {
    #####: 3246:  switch (color) {
    %%%%%: 3246-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3247:    case GTestColor::kRed:
    #####: 3248:      return "1";
    %%%%%: 3248-block  0
    #####: 3249:    case GTestColor::kGreen:
    #####: 3250:      return "2";
    %%%%%: 3250-block  0
    #####: 3251:    case GTestColor::kYellow:
    #####: 3252:      return "3";
    %%%%%: 3252-block  0
    #####: 3253:    default:
    #####: 3254:      assert(false);
    %%%%%: 3254-block  0
call    0 never executed
        -: 3255:      return "9";
        -: 3256:  }
        -: 3257:}
        -: 3258:
        -: 3259:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 3260:
        -: 3261:// Returns true if and only if Google Test should use colors in the output.
function _ZN7testing8internal14ShouldUseColorEb called 1 returned 100% blocks executed 22%
        1: 3262:bool ShouldUseColor(bool stdout_is_tty) {
        1: 3263:  std::string c = GTEST_FLAG_GET(color);
        1: 3263-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3264:  const char* const gtest_color = c.c_str();
        1: 3264-block  0
call    0 returned 1
        -: 3265:
        1: 3266:  if (String::CaseInsensitiveCStringEquals(gtest_color, "auto")) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3266-block  0
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        -: 3267:#if defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_WINDOWS_MINGW)
        -: 3268:    // On Windows the TERM variable is usually not set, but the
        -: 3269:    // console there does support colors.
        -: 3270:    return stdout_is_tty;
        -: 3271:#else
        -: 3272:    // On non-Windows platforms, we rely on the TERM variable.
    #####: 3273:    const char* const term = posix::GetEnv("TERM");
    %%%%%: 3273-block  0
call    0 never executed
        -: 3274:    const bool term_supports_color =
    #####: 3275:        term != nullptr && (String::CStringEquals(term, "xterm") ||
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3275-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 3275-block  1
    %%%%%: 3275-block  2
    #####: 3276:                            String::CStringEquals(term, "xterm-color") ||
    %%%%%: 3276-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3277:                            String::CStringEquals(term, "xterm-kitty") ||
    %%%%%: 3277-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3278:                            String::CStringEquals(term, "screen") ||
    %%%%%: 3278-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3279:                            String::CStringEquals(term, "tmux") ||
    %%%%%: 3279-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3280:                            String::CStringEquals(term, "rxvt-unicode") ||
    %%%%%: 3280-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3281:                            String::CStringEquals(term, "linux") ||
    %%%%%: 3281-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3282:                            String::CStringEquals(term, "cygwin") ||
    %%%%%: 3282-block  0
call    0 never executed
    %%%%%: 3282-block  1
    #####: 3283:                            String::EndsWithCaseInsensitive(term, "-256color"));
    %%%%%: 3283-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3283-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 3283-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 3283-block  3
branch  9 never executed (fallthrough)
branch 10 never executed
    %%%%%: 3283-block  4
branch 11 never executed (fallthrough)
branch 12 never executed
    %%%%%: 3283-block  5
call   13 never executed
    %%%%%: 3283-block  6
branch 14 never executed (fallthrough)
branch 15 never executed
    %%%%%: 3283-block  7
branch 16 never executed (fallthrough)
branch 17 never executed
    %%%%%: 3283-block  8
call   18 never executed
    %%%%%: 3283-block  9
branch 19 never executed (fallthrough)
branch 20 never executed
    $$$$$: 3283-block 10
branch 21 never executed (fallthrough)
branch 22 never executed
    $$$$$: 3283-block 11
call   23 never executed
    $$$$$: 3283-block 12
    $$$$$: 3283-block 13
branch 24 never executed (fallthrough)
branch 25 never executed
    $$$$$: 3283-block 14
    $$$$$: 3283-block 15
branch 26 never executed (fallthrough)
branch 27 never executed
    $$$$$: 3283-block 16
call   28 never executed
    $$$$$: 3283-block 17
    $$$$$: 3283-block 18
branch 29 never executed (fallthrough)
branch 30 never executed
    $$$$$: 3283-block 19
    #####: 3284:    return stdout_is_tty && term_supports_color;
    %%%%%: 3284-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3284-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 3284-block  2
    %%%%%: 3284-block  3
    %%%%%: 3284-block  4
        -: 3285:#endif  // GTEST_OS_WINDOWS
        -: 3286:  }
        -: 3287:
        1: 3288:  return String::CaseInsensitiveCStringEquals(gtest_color, "yes") ||
        1: 3288-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3289:         String::CaseInsensitiveCStringEquals(gtest_color, "true") ||
        1: 3289-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3289-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
       3*: 3290:         String::CaseInsensitiveCStringEquals(gtest_color, "t") ||
        1: 3290-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3290-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 3290-block  2
branch  5 taken 1 (fallthrough)
branch  6 taken 0
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%: 3290-block  3
        1: 3290-block  4
        2: 3291:         String::CStringEquals(gtest_color, "1");
        1: 3291-block  0
call    0 returned 1
        1: 3291-block  1
        -: 3292:  // We take "yes", "true", "t", and "1" as meaning "yes".  If the
        -: 3293:  // value is neither one of these nor "auto", we treat it as "no" to
        -: 3294:  // be conservative.
        1: 3295:}
        1: 3295-block  0
call    0 returned 1
    $$$$$: 3295-block  1
call    1 never executed
        -: 3296:
        -: 3297:// Helpers for printing colored strings to stdout. Note that on Windows, we
        -: 3298:// cannot simply emit special characters and have the terminal change colors.
        -: 3299:// This routine must actually emit the characters rather than return a string
        -: 3300:// that would be colored when printed, as can be done on Linux.
        -: 3301:
        -: 3302:GTEST_ATTRIBUTE_PRINTF_(2, 3)
function _ZN7testing8internalL13ColoredPrintfENS0_12_GLOBAL__N_110GTestColorEPKcz called 119 returned 100% blocks executed 60%
      119: 3303:static void ColoredPrintf(GTestColor color, const char* fmt, ...) {
        -: 3304:  va_list args;
      119: 3305:  va_start(args, fmt);
        -: 3306:
        -: 3307:  static const bool in_color_mode =
        -: 3308:      // We don't condition this on GTEST_HAS_FILE_SYSTEM because we still need
        -: 3309:      // to be able to detect terminal I/O regardless.
      119: 3310:      ShouldUseColor(posix::IsATTY(posix::FileNo(stdout)) != 0);
      119: 3310-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 118
        1: 3310-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 3310-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 3310-block  3
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 3310-block  4
call   11 returned 1
branch 12 taken 1 (fallthrough)
branch 13 taken 0 (throw)
        1: 3310-block  5
call   14 returned 1
branch 15 taken 1 (fallthrough)
branch 16 taken 0 (throw)
        1: 3310-block  6
call   17 returned 1
    $$$$$: 3310-block  7
branch 18 never executed (fallthrough)
branch 19 never executed
    $$$$$: 3310-block  8
call   20 never executed
        -: 3311:
     119*: 3312:  const bool use_color = in_color_mode && (color != GTestColor::kDefault);
      119: 3312-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 119
    %%%%%: 3312-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 3312-block  2
      119: 3312-block  3
        -: 3313:
      119: 3314:  if (!use_color) {
      119: 3314-block  0
branch  0 taken 119 (fallthrough)
branch  1 taken 0
      119: 3315:    vprintf(fmt, args);
      119: 3315-block  0
call    0 returned 119
branch  1 taken 119 (fallthrough)
branch  2 taken 0 (throw)
      119: 3316:    va_end(args);
      119: 3317:    return;
      119: 3317-block  0
        -: 3318:  }
        -: 3319:
        -: 3320:#if defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_WINDOWS_MOBILE) &&    \
        -: 3321:    !defined(GTEST_OS_WINDOWS_PHONE) && !defined(GTEST_OS_WINDOWS_RT) && \
        -: 3322:    !defined(GTEST_OS_WINDOWS_MINGW)
        -: 3323:  const HANDLE stdout_handle = GetStdHandle(STD_OUTPUT_HANDLE);
        -: 3324:
        -: 3325:  // Gets the current text color.
        -: 3326:  CONSOLE_SCREEN_BUFFER_INFO buffer_info;
        -: 3327:  GetConsoleScreenBufferInfo(stdout_handle, &buffer_info);
        -: 3328:  const WORD old_color_attrs = buffer_info.wAttributes;
        -: 3329:  const WORD new_color = GetNewColor(color, old_color_attrs);
        -: 3330:
        -: 3331:  // We need to flush the stream buffers into the console before each
        -: 3332:  // SetConsoleTextAttribute call lest it affect the text that is already
        -: 3333:  // printed but has not yet reached the console.
        -: 3334:  fflush(stdout);
        -: 3335:  SetConsoleTextAttribute(stdout_handle, new_color);
        -: 3336:
        -: 3337:  vprintf(fmt, args);
        -: 3338:
        -: 3339:  fflush(stdout);
        -: 3340:  // Restores the text color.
        -: 3341:  SetConsoleTextAttribute(stdout_handle, old_color_attrs);
        -: 3342:#else
    #####: 3343:  printf("\033[0;3%sm", GetAnsiColorCode(color));
    %%%%%: 3343-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3343-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 3344:  vprintf(fmt, args);
    %%%%%: 3344-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3345:  printf("\033[m");  // Resets the terminal to default.
    %%%%%: 3345-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 3346:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
    #####: 3347:  va_end(args);
    %%%%%: 3347-block  0
        -: 3348:}
        -: 3349:
        -: 3350:// Text printed in Google Test's text output and --gtest_list_tests
        -: 3351:// output to label the type parameter and value parameter for a test.
        -: 3352:static const char kTypeParamLabel[] = "TypeParam";
        -: 3353:static const char kValueParamLabel[] = "GetParam()";
        -: 3354:
function _ZN7testing8internalL29PrintFullTestCommentIfPresentERKNS_8TestInfoE called 14 returned 100% blocks executed 42%
       14: 3355:static void PrintFullTestCommentIfPresent(const TestInfo& test_info) {
       14: 3356:  const char* const type_param = test_info.type_param();
       14: 3356-block  0
call    0 returned 14
       14: 3357:  const char* const value_param = test_info.value_param();
call    0 returned 14
        -: 3358:
       14: 3359:  if (type_param != nullptr || value_param != nullptr) {
branch  0 taken 14 (fallthrough)
branch  1 taken 0
       14: 3359-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 14
    #####: 3360:    printf(", where ");
    %%%%%: 3360-block  0
call    0 never executed
    #####: 3361:    if (type_param != nullptr) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3362:      printf("%s = %s", kTypeParamLabel, type_param);
    %%%%%: 3362-block  0
call    0 never executed
    #####: 3363:      if (value_param != nullptr) printf(" and ");
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3363-block  0
call    2 never executed
        -: 3364:    }
    #####: 3365:    if (value_param != nullptr) {
    %%%%%: 3365-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3366:      printf("%s = %s", kValueParamLabel, value_param);
    %%%%%: 3366-block  0
call    0 never executed
        -: 3367:    }
        -: 3368:  }
       14: 3369:}
        -: 3370:
        -: 3371:// This class implements the TestEventListener interface.
        -: 3372://
        -: 3373:// Class PrettyUnitTestResultPrinter is copyable.
        -: 3374:class PrettyUnitTestResultPrinter : public TestEventListener {
        -: 3375: public:
function _ZN7testing8internal27PrettyUnitTestResultPrinterC1Ev called 1 returned 100% blocks executed 100%
        1: 3376:  PrettyUnitTestResultPrinter() = default;
        1: 3376-block  0
call    0 returned 1
function _ZN7testing8internal27PrettyUnitTestResultPrinter13PrintTestNameEPKcS3_ called 86 returned 100% blocks executed 100%
       86: 3377:  static void PrintTestName(const char* test_suite, const char* test) {
       86: 3378:    printf("%s.%s", test_suite, test);
       86: 3378-block  0
call    0 returned 86
       86: 3379:  }
        -: 3380:
        -: 3381:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3382:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
        -: 3383:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3384:  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3385:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3386:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3387:  void OnTestCaseStart(const TestCase& test_case) override;
        -: 3388:#else
        -: 3389:  void OnTestSuiteStart(const TestSuite& test_suite) override;
        -: 3390:#endif  // OnTestCaseStart
        -: 3391:
        -: 3392:  void OnTestStart(const TestInfo& test_info) override;
        -: 3393:  void OnTestDisabled(const TestInfo& test_info) override;
        -: 3394:
        -: 3395:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3396:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3397:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3398:  void OnTestCaseEnd(const TestCase& test_case) override;
        -: 3399:#else
        -: 3400:  void OnTestSuiteEnd(const TestSuite& test_suite) override;
        -: 3401:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3402:
        -: 3403:  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3404:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3405:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3406:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3407:
        -: 3408: private:
        -: 3409:  static void PrintFailedTests(const UnitTest& unit_test);
        -: 3410:  static void PrintFailedTestSuites(const UnitTest& unit_test);
        -: 3411:  static void PrintSkippedTests(const UnitTest& unit_test);
        -: 3412:};
        -: 3413:
        -: 3414:// Fired before each iteration of tests starts.
function _ZN7testing8internal27PrettyUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 61%
        1: 3415:void PrettyUnitTestResultPrinter::OnTestIterationStart(
        -: 3416:    const UnitTest& unit_test, int iteration) {
        1: 3417:  if (GTEST_FLAG_GET(repeat) != 1)
        1: 3417-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3418:    printf("\nRepeating all tests (iteration %d) . . .\n\n", iteration + 1);
    %%%%%: 3418-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 3419:
        1: 3420:  std::string f = GTEST_FLAG_GET(filter);
        1: 3420-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3421:  const char* const filter = f.c_str();
        1: 3421-block  0
call    0 returned 1
        -: 3422:
        -: 3423:  // Prints the filter if it's not *.  This reminds the user that some
        -: 3424:  // tests may be skipped.
        1: 3425:  if (!String::CStringEquals(filter, kUniversalFilter)) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 3426:    ColoredPrintf(GTestColor::kYellow, "Note: %s filter = %s\n", GTEST_NAME_,
    %%%%%: 3426-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 3427:                  filter);
        -: 3428:  }
        -: 3429:
        1: 3430:  if (internal::ShouldShard(kTestTotalShards, kTestShardIndex, false)) {
        1: 3430-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3430-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 3431:    const int32_t shard_index = Int32FromEnvOrDie(kTestShardIndex, -1);
    %%%%%: 3431-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3432:    ColoredPrintf(GTestColor::kYellow, "Note: This is test shard %d of %s.\n",
    %%%%%: 3432-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 3433:                  static_cast<int>(shard_index) + 1,
        -: 3434:                  internal::posix::GetEnv(kTestTotalShards));
        -: 3435:  }
        -: 3436:
        1: 3437:  if (GTEST_FLAG_GET(shuffle)) {
        1: 3437-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3438:    ColoredPrintf(GTestColor::kYellow,
    %%%%%: 3438-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 3439:                  "Note: Randomizing tests' orders with a seed of %d .\n",
        -: 3440:                  unit_test.random_seed());
        -: 3441:  }
        -: 3442:
        1: 3443:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3443-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        2: 3444:  printf("Running %s from %s.\n",
        1: 3444-block  0
call    0 returned 1
        1: 3444-block  1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        2: 3445:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3445-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3445-block  1
call    6 returned 1
    $$$$$: 3445-block  2
call    7 never executed
    $$$$$: 3445-block  3
        2: 3446:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
        1: 3446-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3446-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
    $$$$$: 3446-block  2
call    7 never executed
    $$$$$: 3446-block  3
        1: 3447:  fflush(stdout);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3447-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3448:}
        1: 3448-block  0
call    0 returned 1
    $$$$$: 3448-block  1
call    1 never executed
        -: 3449:
function _ZN7testing8internal27PrettyUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3450:void PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart(
        -: 3451:    const UnitTest& /*unit_test*/) {
        1: 3452:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3452-block  0
call    0 returned 1
        1: 3453:  printf("Global test environment set-up.\n");
call    0 returned 1
        1: 3454:  fflush(stdout);
call    0 returned 1
call    1 returned 1
        1: 3455:}
        -: 3456:
        -: 3457:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 10 returned 100% blocks executed 78%
       10: 3458:void PrettyUnitTestResultPrinter::OnTestCaseStart(const TestCase& test_case) {
        -: 3459:  const std::string counts =
       10: 3460:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
       10: 3460-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10: 3460-block  1
call    3 returned 10
branch  4 taken 10 (fallthrough)
branch  5 taken 0 (throw)
       10: 3461:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
       10: 3461-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10: 3462:  printf("%s from %s", counts.c_str(), test_case.name());
       10: 3462-block  0
call    0 returned 10
call    1 returned 10
call    2 returned 10
branch  3 taken 10 (fallthrough)
branch  4 taken 0 (throw)
       10: 3463:  if (test_case.type_param() == nullptr) {
       10: 3463-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0
       10: 3464:    printf("\n");
       10: 3464-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
        -: 3465:  } else {
    #####: 3466:    printf(", where %s = %s\n", kTypeParamLabel, test_case.type_param());
    %%%%%: 3466-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 3467:  }
       10: 3468:  fflush(stdout);
       10: 3468-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10: 3468-block  1
call    3 returned 10
branch  4 taken 10 (fallthrough)
branch  5 taken 0 (throw)
       10: 3469:}
       10: 3469-block  0
call    0 returned 10
    $$$$$: 3469-block  1
call    1 never executed
        -: 3470:#else
        -: 3471:void PrettyUnitTestResultPrinter::OnTestSuiteStart(
        -: 3472:    const TestSuite& test_suite) {
        -: 3473:  const std::string counts =
        -: 3474:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3475:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3476:  printf("%s from %s", counts.c_str(), test_suite.name());
        -: 3477:  if (test_suite.type_param() == nullptr) {
        -: 3478:    printf("\n");
        -: 3479:  } else {
        -: 3480:    printf(", where %s = %s\n", kTypeParamLabel, test_suite.type_param());
        -: 3481:  }
        -: 3482:  fflush(stdout);
        -: 3483:}
        -: 3484:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3485:
function _ZN7testing8internal27PrettyUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 43 returned 100% blocks executed 100%
       43: 3486:void PrettyUnitTestResultPrinter::OnTestStart(const TestInfo& test_info) {
       43: 3487:  ColoredPrintf(GTestColor::kGreen, "[ RUN      ] ");
       43: 3487-block  0
call    0 returned 43
       43: 3488:  PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 returned 43
call    1 returned 43
call    2 returned 43
       43: 3489:  printf("\n");
call    0 returned 43
       43: 3490:  fflush(stdout);
call    0 returned 43
call    1 returned 43
       43: 3491:}
        -: 3492:
function _ZN7testing8internal27PrettyUnitTestResultPrinter14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3493:void PrettyUnitTestResultPrinter::OnTestDisabled(const TestInfo& test_info) {
    #####: 3494:  ColoredPrintf(GTestColor::kYellow, "[ DISABLED ] ");
    %%%%%: 3494-block  0
call    0 never executed
    #####: 3495:  PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3496:  printf("\n");
call    0 never executed
    #####: 3497:  fflush(stdout);
call    0 never executed
call    1 never executed
    #####: 3498:}
        -: 3499:
        -: 3500:// Called after an assertion failure.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 7 returned 100% blocks executed 86%
        7: 3501:void PrettyUnitTestResultPrinter::OnTestPartResult(
        -: 3502:    const TestPartResult& result) {
        7: 3503:  switch (result.type()) {
        7: 3503-block  0
call    0 returned 7
branch  1 taken 0 (fallthrough)
branch  2 taken 7
        -: 3504:    // If the test part succeeded, we don't need to do anything.
    #####: 3505:    case TestPartResult::kSuccess:
    #####: 3506:      return;
    %%%%%: 3506-block  0
        7: 3507:    default:
        -: 3508:      // Print failure message from the assertion
        -: 3509:      // (e.g. expected this and got that).
        7: 3510:      PrintTestPartResult(result);
        7: 3510-block  0
call    0 returned 7
        7: 3511:      fflush(stdout);
call    0 returned 7
call    1 returned 7
        -: 3512:  }
        -: 3513:}
        -: 3514:
function _ZN7testing8internal27PrettyUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 43 returned 100% blocks executed 84%
       43: 3515:void PrettyUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
       43: 3516:  if (test_info.result()->Passed()) {
       43: 3516-block  0
call    0 returned 43
call    1 returned 43
branch  2 taken 36 (fallthrough)
branch  3 taken 7
       36: 3517:    ColoredPrintf(GTestColor::kGreen, "[       OK ] ");
       36: 3517-block  0
call    0 returned 36
        7: 3518:  } else if (test_info.result()->Skipped()) {
        7: 3518-block  0
call    0 returned 7
call    1 returned 7
branch  2 taken 0 (fallthrough)
branch  3 taken 7
    #####: 3519:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3519-block  0
call    0 never executed
        -: 3520:  } else {
        7: 3521:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
        7: 3521-block  0
call    0 returned 7
        -: 3522:  }
       43: 3523:  PrintTestName(test_info.test_suite_name(), test_info.name());
       43: 3523-block  0
call    0 returned 43
call    1 returned 43
call    2 returned 43
       43: 3524:  if (test_info.result()->Failed()) PrintFullTestCommentIfPresent(test_info);
call    0 returned 43
call    1 returned 43
branch  2 taken 7 (fallthrough)
branch  3 taken 36
        7: 3524-block  0
call    4 returned 7
        -: 3525:
       43: 3526:  if (GTEST_FLAG_GET(print_time)) {
       43: 3526-block  0
branch  0 taken 43 (fallthrough)
branch  1 taken 0
       43: 3527:    printf(" (%s ms)\n",
       43: 3527-block  0
call    0 returned 43
call    1 returned 43
branch  2 taken 43 (fallthrough)
branch  3 taken 0 (throw)
       86: 3528:           internal::StreamableToString(test_info.result()->elapsed_time())
       43: 3528-block  0
call    0 returned 43
call    1 returned 43
call    2 returned 43
branch  3 taken 43 (fallthrough)
branch  4 taken 0 (throw)
       43: 3528-block  1
call    5 returned 43
    $$$$$: 3528-block  2
call    6 never executed
    $$$$$: 3528-block  3
        -: 3529:               .c_str());
        -: 3530:  } else {
    #####: 3531:    printf("\n");
    %%%%%: 3531-block  0
call    0 never executed
        -: 3532:  }
       43: 3533:  fflush(stdout);
       43: 3533-block  0
call    0 returned 43
call    1 returned 43
       43: 3534:}
        -: 3535:
        -: 3536:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 10 returned 100% blocks executed 68%
       10: 3537:void PrettyUnitTestResultPrinter::OnTestCaseEnd(const TestCase& test_case) {
      10*: 3538:  if (!GTEST_FLAG_GET(print_time)) return;
       10: 3538-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10
    %%%%%: 3538-block  1
    %%%%%: 3538-block  2
        -: 3539:
        -: 3540:  const std::string counts =
       10: 3541:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
       10: 3541-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10: 3541-block  1
call    3 returned 10
branch  4 taken 10 (fallthrough)
branch  5 taken 0 (throw)
       10: 3542:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
       10: 3542-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10: 3543:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_case.name(),
       10: 3543-block  0
call    0 returned 10
call    1 returned 10
call    2 returned 10
call    3 returned 10
branch  4 taken 10 (fallthrough)
branch  5 taken 0 (throw)
       20: 3544:         internal::StreamableToString(test_case.elapsed_time()).c_str());
       10: 3544-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 10 (fallthrough)
branch  3 taken 0 (throw)
       10: 3544-block  1
call    4 returned 10
    $$$$$: 3544-block  2
call    5 never executed
    $$$$$: 3544-block  3
    $$$$$: 3544-block  4
       10: 3545:  fflush(stdout);
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10: 3545-block  0
call    3 returned 10
branch  4 taken 10 (fallthrough)
branch  5 taken 0 (throw)
       10: 3546:}
       10: 3546-block  0
call    0 returned 10
    $$$$$: 3546-block  1
call    1 never executed
        -: 3547:#else
        -: 3548:void PrettyUnitTestResultPrinter::OnTestSuiteEnd(const TestSuite& test_suite) {
        -: 3549:  if (!GTEST_FLAG_GET(print_time)) return;
        -: 3550:
        -: 3551:  const std::string counts =
        -: 3552:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3553:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3554:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_suite.name(),
        -: 3555:         internal::StreamableToString(test_suite.elapsed_time()).c_str());
        -: 3556:  fflush(stdout);
        -: 3557:}
        -: 3558:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3559:
function _ZN7testing8internal27PrettyUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3560:void PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart(
        -: 3561:    const UnitTest& /*unit_test*/) {
        1: 3562:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3562-block  0
call    0 returned 1
        1: 3563:  printf("Global test environment tear-down\n");
call    0 returned 1
        1: 3564:  fflush(stdout);
call    0 returned 1
call    1 returned 1
        1: 3565:}
        -: 3566:
        -: 3567:// Internal helper for printing the list of failed tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16PrintFailedTestsERKNS_8UnitTestE called 1 returned 100% blocks executed 94%
        1: 3568:void PrettyUnitTestResultPrinter::PrintFailedTests(const UnitTest& unit_test) {
        1: 3569:  const int failed_test_count = unit_test.failed_test_count();
        1: 3569-block  0
call    0 returned 1
        1: 3570:  ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
call    0 returned 1
        1: 3571:  printf("%s, listed below:\n", FormatTestCount(failed_test_count).c_str());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3571-block  0
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 3571-block  1
call    7 returned 1
    $$$$$: 3571-block  2
call    8 never executed
        -: 3572:
       11: 3573:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
       10: 3573-block  0
       11: 3573-block  1
call    0 returned 11
branch  1 taken 10
branch  2 taken 1 (fallthrough)
       10: 3574:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
       10: 3574-block  0
call    0 returned 10
       10: 3575:    if (!test_suite.should_run() || (test_suite.failed_test_count() == 0)) {
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0
       10: 3575-block  0
call    3 returned 10
branch  4 taken 8 (fallthrough)
branch  5 taken 2
        8: 3575-block  1
        2: 3575-block  2
       10: 3575-block  3
branch  6 taken 8 (fallthrough)
branch  7 taken 2
        8: 3576:      continue;
        8: 3576-block  0
        -: 3577:    }
       12: 3578:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
        2: 3578-block  0
       10: 3578-block  1
       12: 3578-block  2
call    0 returned 12
branch  1 taken 10
branch  2 taken 2 (fallthrough)
       10: 3579:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
       10: 3579-block  0
call    0 returned 10
       10: 3580:      if (!test_info.should_run() || !test_info.result()->Failed()) {
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0
       10: 3580-block  0
call    3 returned 10
call    4 returned 10
branch  5 taken 3 (fallthrough)
branch  6 taken 7
        3: 3580-block  1
        7: 3580-block  2
       10: 3580-block  3
branch  7 taken 3 (fallthrough)
branch  8 taken 7
        3: 3581:        continue;
        3: 3581-block  0
        -: 3582:      }
        7: 3583:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
        7: 3583-block  0
call    0 returned 7
        7: 3584:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 returned 7
call    1 returned 7
call    2 returned 7
        7: 3585:      PrintFullTestCommentIfPresent(test_info);
call    0 returned 7
        7: 3586:      printf("\n");
call    0 returned 7
        -: 3587:    }
        -: 3588:  }
       1*: 3589:  printf("\n%2d FAILED %s\n", failed_test_count,
        1: 3589-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3589-block  1
        1: 3589-block  2
        1: 3589-block  3
call    2 returned 1
        -: 3590:         failed_test_count == 1 ? "TEST" : "TESTS");
        1: 3591:}
        -: 3592:
        -: 3593:// Internal helper for printing the list of test suite failures not covered by
        -: 3594:// PrintFailedTests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter21PrintFailedTestSuitesERKNS_8UnitTestE called 1 returned 100% blocks executed 57%
        1: 3595:void PrettyUnitTestResultPrinter::PrintFailedTestSuites(
        -: 3596:    const UnitTest& unit_test) {
        1: 3597:  int suite_failure_count = 0;
       11: 3598:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
        1: 3598-block  0
       10: 3598-block  1
       11: 3598-block  2
call    0 returned 11
branch  1 taken 10
branch  2 taken 1 (fallthrough)
       10: 3599:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
       10: 3599-block  0
call    0 returned 10
      10*: 3600:    if (!test_suite.should_run()) {
call    0 returned 10
branch  1 taken 0 (fallthrough)
branch  2 taken 10
    #####: 3601:      continue;
    %%%%%: 3601-block  0
        -: 3602:    }
       10: 3603:    if (test_suite.ad_hoc_test_result().Failed()) {
       10: 3603-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 0 (fallthrough)
branch  3 taken 10
    #####: 3604:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3604-block  0
call    0 never executed
    #####: 3605:      printf("%s: SetUpTestSuite or TearDownTestSuite\n", test_suite.name());
call    0 never executed
call    1 never executed
    #####: 3606:      ++suite_failure_count;
        -: 3607:    }
        -: 3608:  }
        1: 3609:  if (suite_failure_count > 0) {
        1: 3609-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3610:    printf("\n%2d FAILED TEST %s\n", suite_failure_count,
    %%%%%: 3610-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3610-block  1
    %%%%%: 3610-block  2
    %%%%%: 3610-block  3
call    2 never executed
        -: 3611:           suite_failure_count == 1 ? "SUITE" : "SUITES");
        -: 3612:  }
        1: 3613:}
        -: 3614:
        -: 3615:// Internal helper for printing the list of skipped tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter17PrintSkippedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3616:void PrettyUnitTestResultPrinter::PrintSkippedTests(const UnitTest& unit_test) {
    #####: 3617:  const int skipped_test_count = unit_test.skipped_test_count();
    %%%%%: 3617-block  0
call    0 never executed
    #####: 3618:  if (skipped_test_count == 0) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3619:    return;
    %%%%%: 3619-block  0
        -: 3620:  }
        -: 3621:
    #####: 3622:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3622-block  0
    %%%%%: 3622-block  1
    %%%%%: 3622-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3623:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3623-block  0
call    0 never executed
    #####: 3624:    if (!test_suite.should_run() || (test_suite.skipped_test_count() == 0)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 3624-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 3624-block  1
    %%%%%: 3624-block  2
    %%%%%: 3624-block  3
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 3625:      continue;
    %%%%%: 3625-block  0
        -: 3626:    }
    #####: 3627:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3627-block  0
    %%%%%: 3627-block  1
    %%%%%: 3627-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3628:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3628-block  0
call    0 never executed
    #####: 3629:      if (!test_info.should_run() || !test_info.result()->Skipped()) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 3629-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 3629-block  1
    %%%%%: 3629-block  2
    %%%%%: 3629-block  3
branch  7 never executed (fallthrough)
branch  8 never executed
    #####: 3630:        continue;
    %%%%%: 3630-block  0
        -: 3631:      }
    #####: 3632:      ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3632-block  0
call    0 never executed
    #####: 3633:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3634:      printf("\n");
call    0 never executed
        -: 3635:    }
        -: 3636:  }
        -: 3637:}
        -: 3638:
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 55%
        1: 3639:void PrettyUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3640:                                                     int /*iteration*/) {
        1: 3641:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3641-block  0
call    0 returned 1
        2: 3642:  printf("%s from %s ran.",
        1: 3642-block  0
call    0 returned 1
        1: 3642-block  1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        2: 3643:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3643-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3643-block  1
call    6 returned 1
    $$$$$: 3643-block  2
call    7 never executed
    $$$$$: 3643-block  3
        2: 3644:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3644-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
    $$$$$: 3644-block  1
call    7 never executed
    $$$$$: 3644-block  2
call    8 never executed
        1: 3645:  if (GTEST_FLAG_GET(print_time)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3646:    printf(" (%s ms total)",
        1: 3646-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        2: 3647:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
        1: 3647-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 3647-block  1
call    4 returned 1
    $$$$$: 3647-block  2
call    5 never executed
    $$$$$: 3647-block  3
    $$$$$: 3647-block  4
call    6 never executed
        -: 3648:  }
        1: 3649:  printf("\n");
        1: 3649-block  0
call    0 returned 1
        1: 3650:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 returned 1
        1: 3651:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3651-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3651-block  1
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1: 3651-block  2
call   10 returned 1
    $$$$$: 3651-block  3
call   11 never executed
    $$$$$: 3651-block  4
call   12 never executed
        -: 3652:
        1: 3653:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 returned 1
        1: 3654:  if (skipped_test_count > 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3655:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3655-block  0
call    0 never executed
    #####: 3656:    printf("%s, listed below:\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3656-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 3656-block  1
call    7 never executed
    $$$$$: 3656-block  2
call    8 never executed
    #####: 3657:    PrintSkippedTests(unit_test);
call    0 never executed
        -: 3658:  }
        -: 3659:
        1: 3660:  if (!unit_test.Passed()) {
        1: 3660-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 3661:    PrintFailedTests(unit_test);
        1: 3661-block  0
call    0 returned 1
        1: 3662:    PrintFailedTestSuites(unit_test);
call    0 returned 1
        -: 3663:  }
        -: 3664:
        1: 3665:  int num_disabled = unit_test.reportable_disabled_test_count();
        1: 3665-block  0
call    0 returned 1
       1*: 3666:  if (num_disabled && !GTEST_FLAG_GET(also_run_disabled_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3666-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 3667:    if (unit_test.Passed()) {
    %%%%%: 3667-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3668:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3668-block  0
call    0 never executed
        -: 3669:    }
    #####: 3670:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3670-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3670-block  1
    %%%%%: 3670-block  2
    %%%%%: 3670-block  3
call    2 never executed
        -: 3671:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3672:  }
        -: 3673:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
        1: 3674:  fflush(stdout);
        1: 3674-block  0
call    0 returned 1
call    1 returned 1
        1: 3675:}
        -: 3676:
        -: 3677:// End PrettyUnitTestResultPrinter
        -: 3678:
        -: 3679:// This class implements the TestEventListener interface.
        -: 3680://
        -: 3681:// Class BriefUnitTestResultPrinter is copyable.
        -: 3682:class BriefUnitTestResultPrinter : public TestEventListener {
        -: 3683: public:
function _ZN7testing8internal26BriefUnitTestResultPrinterC1Ev called 0 returned 0% blocks executed 0%
    #####: 3684:  BriefUnitTestResultPrinter() = default;
    %%%%%: 3684-block  0
call    0 never executed
function _ZN7testing8internal26BriefUnitTestResultPrinter13PrintTestNameEPKcS3_ called 0 returned 0% blocks executed 0%
    #####: 3685:  static void PrintTestName(const char* test_suite, const char* test) {
    #####: 3686:    printf("%s.%s", test_suite, test);
    %%%%%: 3686-block  0
call    0 never executed
    #####: 3687:  }
        -: 3688:
        -: 3689:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3690:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3691:  void OnTestIterationStart(const UnitTest& /*unit_test*/,
    #####: 3692:                            int /*iteration*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3693:  void OnEnvironmentsSetUpStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3694:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3695:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3696:  void OnTestCaseStart(const TestCase& /*test_case*/) override {}
        -: 3697:#else
        -: 3698:  void OnTestSuiteStart(const TestSuite& /*test_suite*/) override {}
        -: 3699:#endif  // OnTestCaseStart
        -: 3700:
function _ZN7testing8internal26BriefUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3701:  void OnTestStart(const TestInfo& /*test_info*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3702:  void OnTestDisabled(const TestInfo& /*test_info*/) override {}
        -: 3703:
        -: 3704:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3705:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3706:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3707:  void OnTestCaseEnd(const TestCase& /*test_case*/) override {}
        -: 3708:#else
        -: 3709:  void OnTestSuiteEnd(const TestSuite& /*test_suite*/) override {}
        -: 3710:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3711:
function _ZN7testing8internal26BriefUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3712:  void OnEnvironmentsTearDownStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3713:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3714:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3715:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3716:};
        -: 3717:
        -: 3718:// Called after an assertion failure.
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3719:void BriefUnitTestResultPrinter::OnTestPartResult(
        -: 3720:    const TestPartResult& result) {
    #####: 3721:  switch (result.type()) {
    %%%%%: 3721-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 3722:    // If the test part succeeded, we don't need to do anything.
    #####: 3723:    case TestPartResult::kSuccess:
    #####: 3724:      return;
    %%%%%: 3724-block  0
    #####: 3725:    default:
        -: 3726:      // Print failure message from the assertion
        -: 3727:      // (e.g. expected this and got that).
    #####: 3728:      PrintTestPartResult(result);
    %%%%%: 3728-block  0
call    0 never executed
    #####: 3729:      fflush(stdout);
call    0 never executed
call    1 never executed
        -: 3730:  }
        -: 3731:}
        -: 3732:
function _ZN7testing8internal26BriefUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3733:void BriefUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
    #####: 3734:  if (test_info.result()->Failed()) {
    %%%%%: 3734-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 3735:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3735-block  0
call    0 never executed
    #####: 3736:    PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3737:    PrintFullTestCommentIfPresent(test_info);
call    0 never executed
        -: 3738:
    #####: 3739:    if (GTEST_FLAG_GET(print_time)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3740:      printf(" (%s ms)\n",
    %%%%%: 3740-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 3741:             internal::StreamableToString(test_info.result()->elapsed_time())
    %%%%%: 3741-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 3741-block  1
call    5 never executed
    $$$$$: 3741-block  2
call    6 never executed
    $$$$$: 3741-block  3
        -: 3742:                 .c_str());
        -: 3743:    } else {
    #####: 3744:      printf("\n");
    %%%%%: 3744-block  0
call    0 never executed
        -: 3745:    }
    #####: 3746:    fflush(stdout);
    %%%%%: 3746-block  0
call    0 never executed
call    1 never executed
        -: 3747:  }
    #####: 3748:}
    %%%%%: 3748-block  0
        -: 3749:
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3750:void BriefUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3751:                                                    int /*iteration*/) {
    #####: 3752:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
    %%%%%: 3752-block  0
call    0 never executed
    #####: 3753:  printf("%s from %s ran.",
    %%%%%: 3753-block  0
call    0 never executed
    %%%%%: 3753-block  1
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 3754:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3754-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 3754-block  1
call    6 never executed
    $$$$$: 3754-block  2
call    7 never executed
    $$$$$: 3754-block  3
    #####: 3755:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3755-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 3755-block  1
call    7 never executed
    $$$$$: 3755-block  2
call    8 never executed
    #####: 3756:  if (GTEST_FLAG_GET(print_time)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3757:    printf(" (%s ms total)",
    %%%%%: 3757-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 3758:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
    %%%%%: 3758-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 3758-block  1
call    4 never executed
    $$$$$: 3758-block  2
call    5 never executed
    $$$$$: 3758-block  3
    $$$$$: 3758-block  4
call    6 never executed
        -: 3759:  }
    #####: 3760:  printf("\n");
    %%%%%: 3760-block  0
call    0 never executed
    #####: 3761:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 never executed
    #####: 3762:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3762-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 3762-block  1
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 3762-block  2
call   10 never executed
    $$$$$: 3762-block  3
call   11 never executed
    $$$$$: 3762-block  4
call   12 never executed
        -: 3763:
    #####: 3764:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 never executed
    #####: 3765:  if (skipped_test_count > 0) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3766:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3766-block  0
call    0 never executed
    #####: 3767:    printf("%s.\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3767-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 3767-block  1
call    7 never executed
    $$$$$: 3767-block  2
call    8 never executed
        -: 3768:  }
        -: 3769:
    #####: 3770:  int num_disabled = unit_test.reportable_disabled_test_count();
    %%%%%: 3770-block  0
call    0 never executed
    #####: 3771:  if (num_disabled && !GTEST_FLAG_GET(also_run_disabled_tests)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3771-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 3772:    if (unit_test.Passed()) {
    %%%%%: 3772-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3773:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3773-block  0
call    0 never executed
        -: 3774:    }
    #####: 3775:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3775-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3775-block  1
    %%%%%: 3775-block  2
    %%%%%: 3775-block  3
call    2 never executed
        -: 3776:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3777:  }
        -: 3778:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
    #####: 3779:  fflush(stdout);
    %%%%%: 3779-block  0
call    0 never executed
call    1 never executed
    #####: 3780:}
        -: 3781:
        -: 3782:// End BriefUnitTestResultPrinter
        -: 3783:
        -: 3784:// class TestEventRepeater
        -: 3785://
        -: 3786:// This class forwards events to other event listeners.
        -: 3787:class TestEventRepeater : public TestEventListener {
        -: 3788: public:
function _ZN7testing8internal17TestEventRepeaterC1Ev called 1 returned 100% blocks executed 100%
        1: 3789:  TestEventRepeater() : forwarding_enabled_(true) {}
        1: 3789-block  0
call    0 returned 1
call    1 returned 1
        -: 3790:  ~TestEventRepeater() override;
        -: 3791:  void Append(TestEventListener* listener);
        -: 3792:  TestEventListener* Release(TestEventListener* listener);
        -: 3793:
        -: 3794:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3795:  // in death test child processes.
function _ZNK7testing8internal17TestEventRepeater18forwarding_enabledEv called 0 returned 0% blocks executed 0%
    #####: 3796:  bool forwarding_enabled() const { return forwarding_enabled_; }
    %%%%%: 3796-block  0
function _ZN7testing8internal17TestEventRepeater22set_forwarding_enabledEb called 0 returned 0% blocks executed 0%
    #####: 3797:  void set_forwarding_enabled(bool enable) { forwarding_enabled_ = enable; }
        -: 3798:
        -: 3799:  void OnTestProgramStart(const UnitTest& parameter) override;
        -: 3800:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3801:  void OnEnvironmentsSetUpStart(const UnitTest& parameter) override;
        -: 3802:  void OnEnvironmentsSetUpEnd(const UnitTest& parameter) override;
        -: 3803://  Legacy API is deprecated but still available
        -: 3804:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3805:  void OnTestCaseStart(const TestSuite& parameter) override;
        -: 3806:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3807:  void OnTestSuiteStart(const TestSuite& parameter) override;
        -: 3808:  void OnTestStart(const TestInfo& parameter) override;
        -: 3809:  void OnTestDisabled(const TestInfo& parameter) override;
        -: 3810:  void OnTestPartResult(const TestPartResult& parameter) override;
        -: 3811:  void OnTestEnd(const TestInfo& parameter) override;
        -: 3812://  Legacy API is deprecated but still available
        -: 3813:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3814:  void OnTestCaseEnd(const TestCase& parameter) override;
        -: 3815:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3816:  void OnTestSuiteEnd(const TestSuite& parameter) override;
        -: 3817:  void OnEnvironmentsTearDownStart(const UnitTest& parameter) override;
        -: 3818:  void OnEnvironmentsTearDownEnd(const UnitTest& parameter) override;
        -: 3819:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3820:  void OnTestProgramEnd(const UnitTest& parameter) override;
        -: 3821:
        -: 3822: private:
        -: 3823:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3824:  // in death test child processes.
        -: 3825:  bool forwarding_enabled_;
        -: 3826:  // The list of listeners that receive events.
        -: 3827:  std::vector<TestEventListener*> listeners_;
        -: 3828:
        -: 3829:  TestEventRepeater(const TestEventRepeater&) = delete;
        -: 3830:  TestEventRepeater& operator=(const TestEventRepeater&) = delete;
        -: 3831:};
        -: 3832:
    #####: 3833:TestEventRepeater::~TestEventRepeater() {
    #####: 3834:  ForEach(listeners_, Delete<TestEventListener>);
    #####: 3835:}
------------------
_ZN7testing8internal17TestEventRepeaterD0Ev:
function _ZN7testing8internal17TestEventRepeaterD0Ev called 0 returned 0% blocks executed 0%
    #####: 3833:TestEventRepeater::~TestEventRepeater() {
        -: 3834:  ForEach(listeners_, Delete<TestEventListener>);
    #####: 3835:}
    %%%%%: 3835-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal17TestEventRepeaterD2Ev:
function _ZN7testing8internal17TestEventRepeaterD2Ev called 0 returned 0% blocks executed 0%
    #####: 3833:TestEventRepeater::~TestEventRepeater() {
    #####: 3834:  ForEach(listeners_, Delete<TestEventListener>);
    %%%%%: 3834-block  0
call    0 never executed
    #####: 3835:}
call    0 never executed
call    1 never executed
------------------
        -: 3836:
function _ZN7testing8internal17TestEventRepeater6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 3837:void TestEventRepeater::Append(TestEventListener* listener) {
        1: 3838:  listeners_.push_back(listener);
        1: 3838-block  0
call    0 returned 1
        1: 3839:}
        -: 3840:
function _ZN7testing8internal17TestEventRepeater7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 38%
        1: 3841:TestEventListener* TestEventRepeater::Release(TestEventListener* listener) {
       1*: 3842:  for (size_t i = 0; i < listeners_.size(); ++i) {
        1: 3842-block  0
    %%%%%: 3842-block  1
        1: 3842-block  2
call    0 returned 1
branch  1 taken 0
branch  2 taken 1 (fallthrough)
    #####: 3843:    if (listeners_[i] == listener) {
    %%%%%: 3843-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3844:      listeners_.erase(listeners_.begin() + static_cast<int>(i));
    %%%%%: 3844-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 3844-block  1
    $$$$$: 3844-block  2
    #####: 3845:      return listener;
    %%%%%: 3845-block  0
        -: 3846:    }
        -: 3847:  }
        -: 3848:
        1: 3849:  return nullptr;
        1: 3849-block  0
        -: 3850:}
        -: 3851:
        -: 3852:// Since most methods are very similar, use macros to reduce boilerplate.
        -: 3853:// This defines a member that forwards the call to all listeners.
        -: 3854:#define GTEST_REPEATER_METHOD_(Name, Type)              \
        -: 3855:  void TestEventRepeater::Name(const Type& parameter) { \
        -: 3856:    if (forwarding_enabled_) {                          \
        -: 3857:      for (size_t i = 0; i < listeners_.size(); i++) {  \
        -: 3858:        listeners_[i]->Name(parameter);                 \
        -: 3859:      }                                                 \
        -: 3860:    }                                                   \
        -: 3861:  }
        -: 3862:// This defines a member that forwards the call to all listeners in reverse
        -: 3863:// order.
        -: 3864:#define GTEST_REVERSE_REPEATER_METHOD_(Name, Type)      \
        -: 3865:  void TestEventRepeater::Name(const Type& parameter) { \
        -: 3866:    if (forwarding_enabled_) {                          \
        -: 3867:      for (size_t i = listeners_.size(); i != 0; i--) { \
        -: 3868:        listeners_[i - 1]->Name(parameter);             \
        -: 3869:      }                                                 \
        -: 3870:    }                                                   \
        -: 3871:  }
        -: 3872:
function _ZN7testing8internal17TestEventRepeater18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3873:GTEST_REPEATER_METHOD_(OnTestProgramStart, UnitTest)
        1: 3873-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3873-block  1
        1: 3873-block  2
call    2 returned 1
call    3 returned 1
        2: 3873-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3874:GTEST_REPEATER_METHOD_(OnEnvironmentsSetUpStart, UnitTest)
        1: 3874-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3874-block  1
        1: 3874-block  2
call    2 returned 1
call    3 returned 1
        2: 3874-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
        -: 3875://  Legacy API is deprecated but still available
        -: 3876:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater15OnTestCaseStartERKNS_9TestSuiteE called 10 returned 100% blocks executed 100%
       20: 3877:GTEST_REPEATER_METHOD_(OnTestCaseStart, TestSuite)
       10: 3877-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10: 3877-block  1
       10: 3877-block  2
call    2 returned 10
call    3 returned 10
       20: 3877-block  3
call    4 returned 20
branch  5 taken 10
branch  6 taken 10 (fallthrough)
        -: 3878:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater16OnTestSuiteStartERKNS_9TestSuiteE called 10 returned 100% blocks executed 100%
       20: 3879:GTEST_REPEATER_METHOD_(OnTestSuiteStart, TestSuite)
       10: 3879-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10: 3879-block  1
       10: 3879-block  2
call    2 returned 10
call    3 returned 10
       20: 3879-block  3
call    4 returned 20
branch  5 taken 10
branch  6 taken 10 (fallthrough)
function _ZN7testing8internal17TestEventRepeater11OnTestStartERKNS_8TestInfoE called 43 returned 100% blocks executed 100%
       86: 3880:GTEST_REPEATER_METHOD_(OnTestStart, TestInfo)
       43: 3880-block  0
branch  0 taken 43 (fallthrough)
branch  1 taken 0
       43: 3880-block  1
       43: 3880-block  2
call    2 returned 43
call    3 returned 43
       86: 3880-block  3
call    4 returned 86
branch  5 taken 43
branch  6 taken 43 (fallthrough)
function _ZN7testing8internal17TestEventRepeater14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3881:GTEST_REPEATER_METHOD_(OnTestDisabled, TestInfo)
    %%%%%: 3881-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3881-block  1
    %%%%%: 3881-block  2
call    2 never executed
call    3 never executed
    %%%%%: 3881-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
function _ZN7testing8internal17TestEventRepeater16OnTestPartResultERKNS_14TestPartResultE called 7 returned 100% blocks executed 100%
       14: 3882:GTEST_REPEATER_METHOD_(OnTestPartResult, TestPartResult)
        7: 3882-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7: 3882-block  1
        7: 3882-block  2
call    2 returned 7
call    3 returned 7
       14: 3882-block  3
call    4 returned 14
branch  5 taken 7
branch  6 taken 7 (fallthrough)
function _ZN7testing8internal17TestEventRepeater27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3883:GTEST_REPEATER_METHOD_(OnEnvironmentsTearDownStart, UnitTest)
        1: 3883-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3883-block  1
        1: 3883-block  2
call    2 returned 1
call    3 returned 1
        2: 3883-block  3
call    4 returned 2
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3884:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsSetUpEnd, UnitTest)
        1: 3884-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3884-block  1
call    2 returned 1
        1: 3884-block  2
call    3 returned 1
call    4 returned 1
        2: 3884-block  3
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3885:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsTearDownEnd, UnitTest)
        1: 3885-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3885-block  1
call    2 returned 1
        1: 3885-block  2
call    3 returned 1
call    4 returned 1
        2: 3885-block  3
branch  5 taken 1
branch  6 taken 1 (fallthrough)
function _ZN7testing8internal17TestEventRepeater9OnTestEndERKNS_8TestInfoE called 43 returned 100% blocks executed 100%
       86: 3886:GTEST_REVERSE_REPEATER_METHOD_(OnTestEnd, TestInfo)
       43: 3886-block  0
branch  0 taken 43 (fallthrough)
branch  1 taken 0
       43: 3886-block  1
call    2 returned 43
       43: 3886-block  2
call    3 returned 43
call    4 returned 43
       86: 3886-block  3
branch  5 taken 43
branch  6 taken 43 (fallthrough)
        -: 3887://  Legacy API is deprecated but still available
        -: 3888:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater13OnTestCaseEndERKNS_9TestSuiteE called 10 returned 100% blocks executed 100%
       20: 3889:GTEST_REVERSE_REPEATER_METHOD_(OnTestCaseEnd, TestSuite)
       10: 3889-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10: 3889-block  1
call    2 returned 10
       10: 3889-block  2
call    3 returned 10
call    4 returned 10
       20: 3889-block  3
branch  5 taken 10
branch  6 taken 10 (fallthrough)
        -: 3890:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater14OnTestSuiteEndERKNS_9TestSuiteE called 10 returned 100% blocks executed 100%
       20: 3891:GTEST_REVERSE_REPEATER_METHOD_(OnTestSuiteEnd, TestSuite)
       10: 3891-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10: 3891-block  1
call    2 returned 10
       10: 3891-block  2
call    3 returned 10
call    4 returned 10
       20: 3891-block  3
branch  5 taken 10
branch  6 taken 10 (fallthrough)
function _ZN7testing8internal17TestEventRepeater16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3892:GTEST_REVERSE_REPEATER_METHOD_(OnTestProgramEnd, UnitTest)
        1: 3892-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3892-block  1
call    2 returned 1
        1: 3892-block  2
call    3 returned 1
call    4 returned 1
        2: 3892-block  3
branch  5 taken 1
branch  6 taken 1 (fallthrough)
        -: 3893:
        -: 3894:#undef GTEST_REPEATER_METHOD_
        -: 3895:#undef GTEST_REVERSE_REPEATER_METHOD_
        -: 3896:
function _ZN7testing8internal17TestEventRepeater20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3897:void TestEventRepeater::OnTestIterationStart(const UnitTest& unit_test,
        -: 3898:                                             int iteration) {
        1: 3899:  if (forwarding_enabled_) {
        1: 3899-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3900:    for (size_t i = 0; i < listeners_.size(); i++) {
        1: 3900-block  0
        2: 3900-block  1
call    0 returned 2
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        1: 3901:      listeners_[i]->OnTestIterationStart(unit_test, iteration);
        1: 3901-block  0
call    0 returned 1
call    1 returned 1
        -: 3902:    }
        -: 3903:  }
        1: 3904:}
        -: 3905:
function _ZN7testing8internal17TestEventRepeater18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3906:void TestEventRepeater::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3907:                                           int iteration) {
        1: 3908:  if (forwarding_enabled_) {
        1: 3908-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3909:    for (size_t i = listeners_.size(); i > 0; i--) {
        1: 3909-block  0
call    0 returned 1
        2: 3909-block  1
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        1: 3910:      listeners_[i - 1]->OnTestIterationEnd(unit_test, iteration);
        1: 3910-block  0
call    0 returned 1
call    1 returned 1
        -: 3911:    }
        -: 3912:  }
        1: 3913:}
        -: 3914:
        -: 3915:// End TestEventRepeater
        -: 3916:
        -: 3917:#if GTEST_HAS_FILE_SYSTEM
        -: 3918:// This class generates an XML output file.
        -: 3919:class XmlUnitTestResultPrinter : public EmptyTestEventListener {
        -: 3920: public:
        -: 3921:  explicit XmlUnitTestResultPrinter(const char* output_file);
        -: 3922:
        -: 3923:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3924:  void ListTestsMatchingFilter(const std::vector<TestSuite*>& test_suites);
        -: 3925:
        -: 3926:  // Prints an XML summary of all unit tests.
        -: 3927:  static void PrintXmlTestsList(std::ostream* stream,
        -: 3928:                                const std::vector<TestSuite*>& test_suites);
        -: 3929:
        -: 3930: private:
        -: 3931:  // Is c a whitespace character that is normalized to a space character
        -: 3932:  // when it appears in an XML attribute value?
function _ZN7testing8internal24XmlUnitTestResultPrinter24IsNormalizableWhitespaceEh called 0 returned 0% blocks executed 0%
    #####: 3933:  static bool IsNormalizableWhitespace(unsigned char c) {
    #####: 3934:    return c == '\t' || c == '\n' || c == '\r';
    %%%%%: 3934-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3934-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 3934-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 3934-block  3
    %%%%%: 3934-block  4
    %%%%%: 3934-block  5
        -: 3935:  }
        -: 3936:
        -: 3937:  // May c appear in a well-formed XML document?
        -: 3938:  // https://www.w3.org/TR/REC-xml/#charsets
function _ZN7testing8internal24XmlUnitTestResultPrinter19IsValidXmlCharacterEh called 0 returned 0% blocks executed 0%
    #####: 3939:  static bool IsValidXmlCharacter(unsigned char c) {
    #####: 3940:    return IsNormalizableWhitespace(c) || c >= 0x20;
    %%%%%: 3940-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 3940-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 3940-block  2
    %%%%%: 3940-block  3
    %%%%%: 3940-block  4
        -: 3941:  }
        -: 3942:
        -: 3943:  // Returns an XML-escaped copy of the input string str.  If
        -: 3944:  // is_attribute is true, the text is meant to appear as an attribute
        -: 3945:  // value, and normalizable whitespace is preserved by replacing it
        -: 3946:  // with character references.
        -: 3947:  static std::string EscapeXml(const std::string& str, bool is_attribute);
        -: 3948:
        -: 3949:  // Returns the given string with all characters invalid in XML removed.
        -: 3950:  static std::string RemoveInvalidXmlCharacters(const std::string& str);
        -: 3951:
        -: 3952:  // Convenience wrapper around EscapeXml when str is an attribute value.
function _ZN7testing8internal24XmlUnitTestResultPrinter18EscapeXmlAttributeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3953:  static std::string EscapeXmlAttribute(const std::string& str) {
    #####: 3954:    return EscapeXml(str, true);
    %%%%%: 3954-block  0
call    0 never executed
        -: 3955:  }
        -: 3956:
        -: 3957:  // Convenience wrapper around EscapeXml when str is not an attribute value.
        -: 3958:  static std::string EscapeXmlText(const char* str) {
        -: 3959:    return EscapeXml(str, false);
        -: 3960:  }
        -: 3961:
        -: 3962:  // Verifies that the given attribute belongs to the given element and
        -: 3963:  // streams the attribute as XML.
        -: 3964:  static void OutputXmlAttribute(std::ostream* stream,
        -: 3965:                                 const std::string& element_name,
        -: 3966:                                 const std::string& name,
        -: 3967:                                 const std::string& value);
        -: 3968:
        -: 3969:  // Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
        -: 3970:  static void OutputXmlCDataSection(::std::ostream* stream, const char* data);
        -: 3971:
        -: 3972:  // Streams a test suite XML stanza containing the given test result.
        -: 3973:  //
        -: 3974:  // Requires: result.Failed()
        -: 3975:  static void OutputXmlTestSuiteForTestResult(::std::ostream* stream,
        -: 3976:                                              const TestResult& result);
        -: 3977:
        -: 3978:  // Streams an XML representation of a TestResult object.
        -: 3979:  static void OutputXmlTestResult(::std::ostream* stream,
        -: 3980:                                  const TestResult& result);
        -: 3981:
        -: 3982:  // Streams an XML representation of a TestInfo object.
        -: 3983:  static void OutputXmlTestInfo(::std::ostream* stream,
        -: 3984:                                const char* test_suite_name,
        -: 3985:                                const TestInfo& test_info);
        -: 3986:
        -: 3987:  // Prints an XML representation of a TestSuite object
        -: 3988:  static void PrintXmlTestSuite(::std::ostream* stream,
        -: 3989:                                const TestSuite& test_suite);
        -: 3990:
        -: 3991:  // Prints an XML summary of unit_test to output stream out.
        -: 3992:  static void PrintXmlUnitTest(::std::ostream* stream,
        -: 3993:                               const UnitTest& unit_test);
        -: 3994:
        -: 3995:  // Produces a string representing the test properties in a result as space
        -: 3996:  // delimited XML attributes based on the property key="value" pairs.
        -: 3997:  // When the std::string is not empty, it includes a space at the beginning,
        -: 3998:  // to delimit this attribute from prior attributes.
        -: 3999:  static std::string TestPropertiesAsXmlAttributes(const TestResult& result);
        -: 4000:
        -: 4001:  // Streams an XML representation of the test properties of a TestResult
        -: 4002:  // object.
        -: 4003:  static void OutputXmlTestProperties(std::ostream* stream,
        -: 4004:                                      const TestResult& result);
        -: 4005:
        -: 4006:  // The output file.
        -: 4007:  const std::string output_file_;
        -: 4008:
        -: 4009:  XmlUnitTestResultPrinter(const XmlUnitTestResultPrinter&) = delete;
        -: 4010:  XmlUnitTestResultPrinter& operator=(const XmlUnitTestResultPrinter&) = delete;
        -: 4011:};
        -: 4012:
        -: 4013:// Creates a new XmlUnitTestResultPrinter.
function _ZN7testing8internal24XmlUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 4014:XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(const char* output_file)
    #####: 4015:    : output_file_(output_file) {
    %%%%%: 4015-block  0
call    0 never executed
    %%%%%: 4015-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 4015-block  2
    #####: 4016:  if (output_file_.empty()) {
    %%%%%: 4016-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4017:    GTEST_LOG_(FATAL) << "XML output file may not be null";
    %%%%%: 4017-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4017-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4017-block  2
call    7 never executed
    $$$$$: 4017-block  3
call    8 never executed
    $$$$$: 4017-block  4
        -: 4018:  }
    #####: 4019:}
    %%%%%: 4019-block  0
    $$$$$: 4019-block  1
call    0 never executed
    $$$$$: 4019-block  2
call    1 never executed
        -: 4020:
        -: 4021:// Called after the unit test ends.
function _ZN7testing8internal24XmlUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 4022:void XmlUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 4023:                                                  int /*iteration*/) {
    #####: 4024:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 4024-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4025:  std::stringstream stream;
    %%%%%: 4025-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4026:  PrintXmlUnitTest(&stream, unit_test);
    %%%%%: 4026-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4027:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4027-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4027-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    $$$$$: 4027-block  2
    #####: 4028:  fclose(xmlout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4029:}
    %%%%%: 4029-block  0
call    0 never executed
    $$$$$: 4029-block  1
call    1 never executed
        -: 4030:
function _ZN7testing8internal24XmlUnitTestResultPrinter23ListTestsMatchingFilterERKSt6vectorIPNS_9TestSuiteESaIS4_EE called 0 returned 0% blocks executed 0%
    #####: 4031:void XmlUnitTestResultPrinter::ListTestsMatchingFilter(
        -: 4032:    const std::vector<TestSuite*>& test_suites) {
    #####: 4033:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 4033-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4034:  std::stringstream stream;
    %%%%%: 4034-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4035:  PrintXmlTestsList(&stream, test_suites);
    %%%%%: 4035-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4036:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4036-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4036-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    $$$$$: 4036-block  2
    #####: 4037:  fclose(xmlout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4038:}
    %%%%%: 4038-block  0
call    0 never executed
    $$$$$: 4038-block  1
call    1 never executed
        -: 4039:
        -: 4040:// Returns an XML-escaped copy of the input string str.  If is_attribute
        -: 4041:// is true, the text is meant to appear as an attribute value, and
        -: 4042:// normalizable whitespace is preserved by replacing it with character
        -: 4043:// references.
        -: 4044://
        -: 4045:// Invalid XML characters in str, if any, are stripped from the output.
        -: 4046:// It is expected that most, if not all, of the text processed by this
        -: 4047:// module will consist of ordinary English text.
        -: 4048:// If this module is ever modified to produce version 1.1 XML output,
        -: 4049:// most invalid characters can be retained using character references.
function _ZN7testing8internal24XmlUnitTestResultPrinter9EscapeXmlERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####: 4050:std::string XmlUnitTestResultPrinter::EscapeXml(const std::string& str,
        -: 4051:                                                bool is_attribute) {
    #####: 4052:  Message m;
    %%%%%: 4052-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4053:
    #####: 4054:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4054-block  0
    %%%%%: 4054-block  1
    %%%%%: 4054-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4055:    const char ch = str[i];
    %%%%%: 4055-block  0
call    0 never executed
    #####: 4056:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4057:      case '<':
    #####: 4058:        m << "&lt;";
    %%%%%: 4058-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4059:        break;
    %%%%%: 4059-block  0
    #####: 4060:      case '>':
    #####: 4061:        m << "&gt;";
    %%%%%: 4061-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4062:        break;
    %%%%%: 4062-block  0
    #####: 4063:      case '&':
    #####: 4064:        m << "&amp;";
    %%%%%: 4064-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4065:        break;
    %%%%%: 4065-block  0
    #####: 4066:      case '\'':
    #####: 4067:        if (is_attribute)
    %%%%%: 4067-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4068:          m << "&apos;";
    %%%%%: 4068-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4069:        else
    #####: 4070:          m << '\'';
    %%%%%: 4070-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4070-block  1
    $$$$$: 4070-block  2
    #####: 4071:        break;
    %%%%%: 4071-block  0
    #####: 4072:      case '"':
    #####: 4073:        if (is_attribute)
    %%%%%: 4073-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4074:          m << "&quot;";
    %%%%%: 4074-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4075:        else
    #####: 4076:          m << '"';
    %%%%%: 4076-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4076-block  1
    $$$$$: 4076-block  2
    #####: 4077:        break;
    %%%%%: 4077-block  0
    #####: 4078:      default:
    #####: 4079:        if (IsValidXmlCharacter(static_cast<unsigned char>(ch))) {
    %%%%%: 4079-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4080:          if (is_attribute &&
    %%%%%: 4080-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 4080-block  1
    %%%%%: 4080-block  2
    %%%%%: 4080-block  3
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4081:              IsNormalizableWhitespace(static_cast<unsigned char>(ch)))
    %%%%%: 4081-block  0
call    0 never executed
    #####: 4082:            m << "&#x" << String::FormatByte(static_cast<unsigned char>(ch))
    %%%%%: 4082-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4082-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4082-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4082-block  3
call    9 never executed
    $$$$$: 4082-block  4
call   10 never executed
    $$$$$: 4082-block  5
    #####: 4083:              << ";";
    %%%%%: 4083-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4084:          else
    #####: 4085:            m << ch;
    %%%%%: 4085-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4086:        }
    #####: 4087:        break;
    %%%%%: 4087-block  0
        -: 4088:    }
        -: 4089:  }
        -: 4090:
    #####: 4091:  return m.GetString();
    %%%%%: 4091-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4091-block  1
    #####: 4092:}
    %%%%%: 4092-block  0
call    0 never executed
    $$$$$: 4092-block  1
call    1 never executed
        -: 4093:
        -: 4094:// Returns the given string with all characters invalid in XML removed.
        -: 4095:// Currently invalid characters are dropped from the string. An
        -: 4096:// alternative is to replace them with certain characters such as . or ?.
function _ZN7testing8internal24XmlUnitTestResultPrinter26RemoveInvalidXmlCharactersERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4097:std::string XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters(
        -: 4098:    const std::string& str) {
    #####: 4099:  std::string output;
    %%%%%: 4099-block  0
call    0 never executed
    #####: 4100:  output.reserve(str.size());
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 4101:  for (std::string::const_iterator it = str.begin(); it != str.end(); ++it)
    %%%%%: 4101-block  0
call    0 never executed
    %%%%%: 4101-block  1
call    1 never executed
    %%%%%: 4101-block  2
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 4102:    if (IsValidXmlCharacter(static_cast<unsigned char>(*it)))
    %%%%%: 4102-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 4103:      output.push_back(*it);
    %%%%%: 4103-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 4104:
    #####: 4105:  return output;
    %%%%%: 4105-block  0
    %%%%%: 4105-block  1
    =====: 4106:}
    $$$$$: 4106-block  0
call    0 never executed
        -: 4107:
        -: 4108:// The following routines generate an XML representation of a UnitTest
        -: 4109:// object.
        -: 4110://
        -: 4111:// This is how Google Test concepts map to the DTD:
        -: 4112://
        -: 4113:// <testsuites name="AllTests">        <-- corresponds to a UnitTest object
        -: 4114://   <testsuite name="testcase-name">  <-- corresponds to a TestSuite object
        -: 4115://     <testcase name="test-name">     <-- corresponds to a TestInfo object
        -: 4116://       <failure message="...">...</failure>
        -: 4117://       <failure message="...">...</failure>
        -: 4118://       <failure message="...">...</failure>
        -: 4119://                                     <-- individual assertion failures
        -: 4120://     </testcase>
        -: 4121://   </testsuite>
        -: 4122:// </testsuites>
        -: 4123:
        -: 4124:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internal27FormatTimeInMillisAsSecondsB5cxx11Ex called 0 returned 0% blocks executed 0%
    #####: 4125:std::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {
    #####: 4126:  ::std::stringstream ss;
    %%%%%: 4126-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4127:  // For the exact N seconds, makes sure output has a trailing decimal point.
        -: 4128:  // Sets precision so that we won't have many trailing zeros (e.g., 300 ms
        -: 4129:  // will be just 0.3, 410 ms 0.41, and so on)
    #####: 4130:  ss << std::fixed
    %%%%%: 4130-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4131:     << std::setprecision(
    #####: 4132:            ms % 1000 == 0 ? 0 : (ms % 100 == 0 ? 1 : (ms % 10 == 0 ? 2 : 3)))
    %%%%%: 4132-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4132-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 4132-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 4132-block  3
    %%%%%: 4132-block  4
    %%%%%: 4132-block  5
    %%%%%: 4132-block  6
    %%%%%: 4132-block  7
    %%%%%: 4132-block  8
    %%%%%: 4132-block  9
call    6 never executed
call    7 never executed
    #####: 4133:     << std::showpoint;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4134:  ss << (static_cast<double>(ms) * 1e-3);
    %%%%%: 4134-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4135:  return ss.str();
    %%%%%: 4135-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4135-block  1
    #####: 4136:}
    %%%%%: 4136-block  0
call    0 never executed
    $$$$$: 4136-block  1
call    1 never executed
        -: 4137:
function _ZN7testing8internalL17PortableLocaltimeExP2tm called 0 returned 0% blocks executed 0%
    #####: 4138:static bool PortableLocaltime(time_t seconds, struct tm* out) {
        -: 4139:#if defined(_MSC_VER)
        -: 4140:  return localtime_s(out, &seconds) == 0;
        -: 4141:#elif defined(__MINGW32__) || defined(__MINGW64__)
        -: 4142:  // MINGW <time.h> provides neither localtime_r nor localtime_s, but uses
        -: 4143:  // Windows' localtime(), which has a thread-local tm buffer.
    #####: 4144:  struct tm* tm_ptr = localtime(&seconds);  // NOLINT
    %%%%%: 4144-block  0
call    0 never executed
    #####: 4145:  if (tm_ptr == nullptr) return false;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4145-block  0
    #####: 4146:  *out = *tm_ptr;
    #####: 4147:  return true;
    %%%%%: 4147-block  0
        -: 4148:#elif defined(__STDC_LIB_EXT1__)
        -: 4149:  // Uses localtime_s when available as localtime_r is only available from
        -: 4150:  // C23 standard.
        -: 4151:  return localtime_s(&seconds, out) != nullptr;
        -: 4152:#else
        -: 4153:  return localtime_r(&seconds, out) != nullptr;
        -: 4154:#endif
        -: 4155:}
        -: 4156:
        -: 4157:// Converts the given epoch time in milliseconds to a date string in the ISO
        -: 4158:// 8601 format, without the timezone information.
function _ZN7testing8internal32FormatEpochTimeInMillisAsIso8601B5cxx11Ex called 0 returned 0% blocks executed 0%
    #####: 4159:std::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {
        -: 4160:  struct tm time_struct;
    #####: 4161:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4161-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4161-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 4162:    return "";
    %%%%%: 4162-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4162-block  1
    $$$$$: 4162-block  2
        -: 4163:  // YYYY-MM-DDThh:mm:ss.sss
    #####: 4164:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4164-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4164-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4164-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4164-block  3
call   12 never executed
    $$$$$: 4164-block  4
call   13 never executed
    $$$$$: 4164-block  5
call   14 never executed
    $$$$$: 4164-block  6
    $$$$$: 4164-block  7
    $$$$$: 4164-block  8
    $$$$$: 4164-block  9
    #####: 4165:         String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4165-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4165-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4165-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4165-block  3
call   12 never executed
    $$$$$: 4165-block  4
call   13 never executed
    $$$$$: 4165-block  5
call   14 never executed
    $$$$$: 4165-block  6
    $$$$$: 4165-block  7
    $$$$$: 4165-block  8
    #####: 4166:         String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4166-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4166-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4166-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4166-block  3
call   12 never executed
    $$$$$: 4166-block  4
call   13 never executed
    $$$$$: 4166-block  5
call   14 never executed
    $$$$$: 4166-block  6
    $$$$$: 4166-block  7
    $$$$$: 4166-block  8
    #####: 4167:         String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4167-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4167-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4167-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4167-block  3
call   12 never executed
    $$$$$: 4167-block  4
call   13 never executed
    $$$$$: 4167-block  5
call   14 never executed
    $$$$$: 4167-block  6
    $$$$$: 4167-block  7
    $$$$$: 4167-block  8
    #####: 4168:         String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4168-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4168-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4168-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4168-block  3
call   12 never executed
    $$$$$: 4168-block  4
call   13 never executed
    $$$$$: 4168-block  5
call   14 never executed
    $$$$$: 4168-block  6
    $$$$$: 4168-block  7
    $$$$$: 4168-block  8
    #####: 4169:         String::FormatIntWidth2(time_struct.tm_sec) + "." +
    %%%%%: 4169-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4169-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4169-block  2
call    6 never executed
call    7 never executed
    $$$$$: 4169-block  3
call    8 never executed
    $$$$$: 4169-block  4
call    9 never executed
    $$$$$: 4169-block  5
    $$$$$: 4169-block  6
    #####: 4170:         String::FormatIntWidthN(static_cast<int>(ms % 1000), 3);
    %%%%%: 4170-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4170-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 4170-block  2
call    7 never executed
    $$$$$: 4170-block  3
        -: 4171:}
        -: 4172:
        -: 4173:// Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
function _ZN7testing8internal24XmlUnitTestResultPrinter21OutputXmlCDataSectionEPSoPKc called 0 returned 0% blocks executed 0%
    #####: 4174:void XmlUnitTestResultPrinter::OutputXmlCDataSection(::std::ostream* stream,
        -: 4175:                                                     const char* data) {
    #####: 4176:  const char* segment = data;
    #####: 4177:  *stream << "<![CDATA[";
    %%%%%: 4177-block  0
call    0 never executed
        -: 4178:  for (;;) {
    #####: 4179:    const char* const next_segment = strstr(segment, "]]>");
    #####: 4180:    if (next_segment != nullptr) {
    %%%%%: 4180-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4181:      stream->write(segment,
    #####: 4182:                    static_cast<std::streamsize>(next_segment - segment));
    %%%%%: 4182-block  0
call    0 never executed
    #####: 4183:      *stream << "]]>]]&gt;<![CDATA[";
call    0 never executed
    #####: 4184:      segment = next_segment + strlen("]]>");
        -: 4185:    } else {
    #####: 4186:      *stream << segment;
    %%%%%: 4186-block  0
call    0 never executed
    #####: 4187:      break;
        -: 4188:    }
    #####: 4189:  }
    %%%%%: 4189-block  0
    #####: 4190:  *stream << "]]>";
    %%%%%: 4190-block  0
call    0 never executed
    #####: 4191:}
        -: 4192:
function _ZN7testing8internal24XmlUnitTestResultPrinter18OutputXmlAttributeEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_ called 0 returned 0% blocks executed 0%
    #####: 4193:void XmlUnitTestResultPrinter::OutputXmlAttribute(
        -: 4194:    std::ostream* stream, const std::string& element_name,
        -: 4195:    const std::string& name, const std::string& value) {
        -: 4196:  const std::vector<std::string>& allowed_names =
    #####: 4197:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4197-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4198:
    #####: 4199:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4199-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4199-block  1
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed
    %%%%%: 4199-block  2
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4199-block  3
call   13 never executed
    %%%%%: 4199-block  4
call   14 never executed
    $$$$$: 4199-block  5
    $$$$$: 4199-block  6
    $$$$$: 4199-block  7
call   15 never executed
    $$$$$: 4199-block  8
        -: 4200:               allowed_names.end())
        -: 4201:      << "Attribute " << name << " is not allowed for element <" << element_name
    #####: 4202:      << ">.";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4202-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4202-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4202-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4202-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4202-block  4
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
        -: 4203:
    #####: 4204:  *stream << " " << name << "=\"" << EscapeXmlAttribute(value) << "\"";
    %%%%%: 4204-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4204-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4204-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4204-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4204-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4204-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 4204-block  6
call   18 never executed
    $$$$$: 4204-block  7
call   19 never executed
    $$$$$: 4204-block  8
    #####: 4205:}
call    0 never executed
    $$$$$: 4205-block  0
call    1 never executed
        -: 4206:
        -: 4207:// Streams a test suite XML stanza containing the given test result.
function _ZN7testing8internal24XmlUnitTestResultPrinter31OutputXmlTestSuiteForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4208:void XmlUnitTestResultPrinter::OutputXmlTestSuiteForTestResult(
        -: 4209:    ::std::ostream* stream, const TestResult& result) {
        -: 4210:  // Output the boilerplate for a minimal test suite with one test.
    #####: 4211:  *stream << "  <testsuite";
    %%%%%: 4211-block  0
call    0 never executed
    #####: 4212:  OutputXmlAttribute(stream, "testsuite", "name", "NonTestSuiteFailure");
    %%%%%: 4212-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4212-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4212-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4212-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4212-block  4
call   12 never executed
    %%%%%: 4212-block  5
call   13 never executed
    %%%%%: 4212-block  6
call   14 never executed
    %%%%%: 4212-block  7
    $$$$$: 4212-block  8
call   15 never executed
    $$$$$: 4212-block  9
    $$$$$: 4212-block 10
    $$$$$: 4212-block 11
call   16 never executed
    $$$$$: 4212-block 12
    $$$$$: 4212-block 13
    $$$$$: 4212-block 14
call   17 never executed
    $$$$$: 4212-block 15
    $$$$$: 4212-block 16
call   18 never executed
    #####: 4213:  OutputXmlAttribute(stream, "testsuite", "tests", "1");
    %%%%%: 4213-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4213-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4213-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4213-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4213-block  4
call   12 never executed
    %%%%%: 4213-block  5
call   13 never executed
    %%%%%: 4213-block  6
call   14 never executed
    %%%%%: 4213-block  7
    $$$$$: 4213-block  8
call   15 never executed
    $$$$$: 4213-block  9
    $$$$$: 4213-block 10
    $$$$$: 4213-block 11
call   16 never executed
    $$$$$: 4213-block 12
    $$$$$: 4213-block 13
    $$$$$: 4213-block 14
call   17 never executed
    $$$$$: 4213-block 15
    $$$$$: 4213-block 16
call   18 never executed
    #####: 4214:  OutputXmlAttribute(stream, "testsuite", "failures", "1");
    %%%%%: 4214-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4214-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4214-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4214-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4214-block  4
call   12 never executed
    %%%%%: 4214-block  5
call   13 never executed
    %%%%%: 4214-block  6
call   14 never executed
    %%%%%: 4214-block  7
    $$$$$: 4214-block  8
call   15 never executed
    $$$$$: 4214-block  9
    $$$$$: 4214-block 10
    $$$$$: 4214-block 11
call   16 never executed
    $$$$$: 4214-block 12
    $$$$$: 4214-block 13
    $$$$$: 4214-block 14
call   17 never executed
    $$$$$: 4214-block 15
    $$$$$: 4214-block 16
call   18 never executed
    #####: 4215:  OutputXmlAttribute(stream, "testsuite", "disabled", "0");
    %%%%%: 4215-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4215-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4215-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4215-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4215-block  4
call   12 never executed
    %%%%%: 4215-block  5
call   13 never executed
    %%%%%: 4215-block  6
call   14 never executed
    %%%%%: 4215-block  7
    $$$$$: 4215-block  8
call   15 never executed
    $$$$$: 4215-block  9
    $$$$$: 4215-block 10
    $$$$$: 4215-block 11
call   16 never executed
    $$$$$: 4215-block 12
    $$$$$: 4215-block 13
    $$$$$: 4215-block 14
call   17 never executed
    $$$$$: 4215-block 15
    $$$$$: 4215-block 16
call   18 never executed
    #####: 4216:  OutputXmlAttribute(stream, "testsuite", "skipped", "0");
    %%%%%: 4216-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4216-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4216-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4216-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4216-block  4
call   12 never executed
    %%%%%: 4216-block  5
call   13 never executed
    %%%%%: 4216-block  6
call   14 never executed
    %%%%%: 4216-block  7
    $$$$$: 4216-block  8
call   15 never executed
    $$$$$: 4216-block  9
    $$$$$: 4216-block 10
    $$$$$: 4216-block 11
call   16 never executed
    $$$$$: 4216-block 12
    $$$$$: 4216-block 13
    $$$$$: 4216-block 14
call   17 never executed
    $$$$$: 4216-block 15
    $$$$$: 4216-block 16
call   18 never executed
    #####: 4217:  OutputXmlAttribute(stream, "testsuite", "errors", "0");
    %%%%%: 4217-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4217-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4217-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4217-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4217-block  4
call   12 never executed
    %%%%%: 4217-block  5
call   13 never executed
    %%%%%: 4217-block  6
call   14 never executed
    $$$$$: 4217-block  7
call   15 never executed
    $$$$$: 4217-block  8
    $$$$$: 4217-block  9
    $$$$$: 4217-block 10
call   16 never executed
    $$$$$: 4217-block 11
    $$$$$: 4217-block 12
    $$$$$: 4217-block 13
call   17 never executed
    $$$$$: 4217-block 14
    $$$$$: 4217-block 15
call   18 never executed
    #####: 4218:  OutputXmlAttribute(stream, "testsuite", "time",
    %%%%%: 4218-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4218-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4218-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4218-block  3
call    9 never executed
    %%%%%: 4218-block  4
call   10 never executed
    $$$$$: 4218-block  5
call   11 never executed
    $$$$$: 4218-block  6
    $$$$$: 4218-block  7
    $$$$$: 4218-block  8
call   12 never executed
    $$$$$: 4218-block  9
    $$$$$: 4218-block 10
    #####: 4219:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
    %%%%%: 4219-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4219-block  1
call    4 never executed
    $$$$$: 4219-block  2
call    5 never executed
    $$$$$: 4219-block  3
call    6 never executed
    #####: 4220:  OutputXmlAttribute(
    %%%%%: 4220-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4220-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4220-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4220-block  3
call    9 never executed
    %%%%%: 4220-block  4
call   10 never executed
    $$$$$: 4220-block  5
call   11 never executed
    $$$$$: 4220-block  6
    $$$$$: 4220-block  7
    $$$$$: 4220-block  8
call   12 never executed
    $$$$$: 4220-block  9
    $$$$$: 4220-block 10
        -: 4221:      stream, "testsuite", "timestamp",
    #####: 4222:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4222-block  0
call    4 never executed
    $$$$$: 4222-block  1
call    5 never executed
    $$$$$: 4222-block  2
call    6 never executed
    #####: 4223:  *stream << ">";
call    0 never executed
        -: 4224:
        -: 4225:  // Output the boilerplate for a minimal test case with a single test.
    #####: 4226:  *stream << "    <testcase";
call    0 never executed
    #####: 4227:  OutputXmlAttribute(stream, "testcase", "name", "");
    %%%%%: 4227-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4227-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4227-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4227-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4227-block  4
call   12 never executed
    %%%%%: 4227-block  5
call   13 never executed
    %%%%%: 4227-block  6
call   14 never executed
    %%%%%: 4227-block  7
    $$$$$: 4227-block  8
call   15 never executed
    $$$$$: 4227-block  9
    $$$$$: 4227-block 10
    $$$$$: 4227-block 11
call   16 never executed
    $$$$$: 4227-block 12
    $$$$$: 4227-block 13
    $$$$$: 4227-block 14
call   17 never executed
    $$$$$: 4227-block 15
    $$$$$: 4227-block 16
call   18 never executed
    #####: 4228:  OutputXmlAttribute(stream, "testcase", "status", "run");
    %%%%%: 4228-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4228-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4228-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4228-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4228-block  4
call   12 never executed
    %%%%%: 4228-block  5
call   13 never executed
    %%%%%: 4228-block  6
call   14 never executed
    %%%%%: 4228-block  7
    $$$$$: 4228-block  8
call   15 never executed
    $$$$$: 4228-block  9
    $$$$$: 4228-block 10
    $$$$$: 4228-block 11
call   16 never executed
    $$$$$: 4228-block 12
    $$$$$: 4228-block 13
    $$$$$: 4228-block 14
call   17 never executed
    $$$$$: 4228-block 15
    $$$$$: 4228-block 16
call   18 never executed
    #####: 4229:  OutputXmlAttribute(stream, "testcase", "result", "completed");
    %%%%%: 4229-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4229-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4229-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4229-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4229-block  4
call   12 never executed
    %%%%%: 4229-block  5
call   13 never executed
    %%%%%: 4229-block  6
call   14 never executed
    %%%%%: 4229-block  7
    $$$$$: 4229-block  8
call   15 never executed
    $$$$$: 4229-block  9
    $$$$$: 4229-block 10
    $$$$$: 4229-block 11
call   16 never executed
    $$$$$: 4229-block 12
    $$$$$: 4229-block 13
    $$$$$: 4229-block 14
call   17 never executed
    $$$$$: 4229-block 15
    $$$$$: 4229-block 16
call   18 never executed
    #####: 4230:  OutputXmlAttribute(stream, "testcase", "classname", "");
    %%%%%: 4230-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4230-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4230-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4230-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4230-block  4
call   12 never executed
    %%%%%: 4230-block  5
call   13 never executed
    %%%%%: 4230-block  6
call   14 never executed
    $$$$$: 4230-block  7
call   15 never executed
    $$$$$: 4230-block  8
    $$$$$: 4230-block  9
    $$$$$: 4230-block 10
call   16 never executed
    $$$$$: 4230-block 11
    $$$$$: 4230-block 12
    $$$$$: 4230-block 13
call   17 never executed
    $$$$$: 4230-block 14
    $$$$$: 4230-block 15
call   18 never executed
    #####: 4231:  OutputXmlAttribute(stream, "testcase", "time",
    %%%%%: 4231-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4231-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4231-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4231-block  3
call    9 never executed
    %%%%%: 4231-block  4
call   10 never executed
    $$$$$: 4231-block  5
call   11 never executed
    $$$$$: 4231-block  6
    $$$$$: 4231-block  7
    $$$$$: 4231-block  8
call   12 never executed
    $$$$$: 4231-block  9
    $$$$$: 4231-block 10
    #####: 4232:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
    %%%%%: 4232-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4232-block  1
call    4 never executed
    $$$$$: 4232-block  2
call    5 never executed
    $$$$$: 4232-block  3
call    6 never executed
    #####: 4233:  OutputXmlAttribute(
    %%%%%: 4233-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4233-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4233-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4233-block  3
call    9 never executed
    %%%%%: 4233-block  4
call   10 never executed
    $$$$$: 4233-block  5
call   11 never executed
    $$$$$: 4233-block  6
    $$$$$: 4233-block  7
    $$$$$: 4233-block  8
call   12 never executed
    $$$$$: 4233-block  9
    $$$$$: 4233-block 10
        -: 4234:      stream, "testcase", "timestamp",
    #####: 4235:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4235-block  0
call    4 never executed
    $$$$$: 4235-block  1
call    5 never executed
        -: 4236:
        -: 4237:  // Output the actual test result.
    #####: 4238:  OutputXmlTestResult(stream, result);
call    0 never executed
        -: 4239:
        -: 4240:  // Complete the test suite.
    #####: 4241:  *stream << "  </testsuite>\n";
call    0 never executed
    #####: 4242:}
        -: 4243:
        -: 4244:// Prints an XML representation of a TestInfo object.
function _ZN7testing8internal24XmlUnitTestResultPrinter17OutputXmlTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4245:void XmlUnitTestResultPrinter::OutputXmlTestInfo(::std::ostream* stream,
        -: 4246:                                                 const char* test_suite_name,
        -: 4247:                                                 const TestInfo& test_info) {
    #####: 4248:  const TestResult& result = *test_info.result();
    %%%%%: 4248-block  0
call    0 never executed
    #####: 4249:  const std::string kTestsuite = "testcase";
    %%%%%: 4249-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4249-block  1
        -: 4250:
    #####: 4251:  if (test_info.is_in_another_shard()) {
    %%%%%: 4251-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4252:    return;
    %%%%%: 4252-block  0
        -: 4253:  }
        -: 4254:
    #####: 4255:  *stream << "    <testcase";
    %%%%%: 4255-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4256:  OutputXmlAttribute(stream, kTestsuite, "name", test_info.name());
    %%%%%: 4256-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4256-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4256-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4256-block  3
call   10 never executed
    %%%%%: 4256-block  4
call   11 never executed
    $$$$$: 4256-block  5
call   12 never executed
    $$$$$: 4256-block  6
    $$$$$: 4256-block  7
    $$$$$: 4256-block  8
call   13 never executed
    $$$$$: 4256-block  9
    $$$$$: 4256-block 10
        -: 4257:
    #####: 4258:  if (test_info.value_param() != nullptr) {
    %%%%%: 4258-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4259:    OutputXmlAttribute(stream, kTestsuite, "value_param",
    %%%%%: 4259-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4259-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4259-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4259-block  3
call   10 never executed
    %%%%%: 4259-block  4
call   11 never executed
    %%%%%: 4259-block  5
    $$$$$: 4259-block  6
call   12 never executed
    $$$$$: 4259-block  7
    $$$$$: 4259-block  8
    $$$$$: 4259-block  9
call   13 never executed
    $$$$$: 4259-block 10
    $$$$$: 4259-block 11
        -: 4260:                       test_info.value_param());
        -: 4261:  }
    #####: 4262:  if (test_info.type_param() != nullptr) {
    %%%%%: 4262-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4263:    OutputXmlAttribute(stream, kTestsuite, "type_param",
    %%%%%: 4263-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4263-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4263-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4263-block  3
call   10 never executed
    %%%%%: 4263-block  4
call   11 never executed
    %%%%%: 4263-block  5
    $$$$$: 4263-block  6
call   12 never executed
    $$$$$: 4263-block  7
    $$$$$: 4263-block  8
    $$$$$: 4263-block  9
call   13 never executed
    $$$$$: 4263-block 10
    $$$$$: 4263-block 11
        -: 4264:                       test_info.type_param());
        -: 4265:  }
        -: 4266:
    #####: 4267:  OutputXmlAttribute(stream, kTestsuite, "file", test_info.file());
    %%%%%: 4267-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4267-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4267-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4267-block  3
call   10 never executed
    %%%%%: 4267-block  4
call   11 never executed
    $$$$$: 4267-block  5
call   12 never executed
    $$$$$: 4267-block  6
    $$$$$: 4267-block  7
    $$$$$: 4267-block  8
call   13 never executed
    $$$$$: 4267-block  9
    $$$$$: 4267-block 10
    #####: 4268:  OutputXmlAttribute(stream, kTestsuite, "line",
    %%%%%: 4268-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4268-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4268-block  2
call    6 never executed
    $$$$$: 4268-block  3
call    7 never executed
    $$$$$: 4268-block  4
    $$$$$: 4268-block  5
    #####: 4269:                     StreamableToString(test_info.line()));
    %%%%%: 4269-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4269-block  1
call    4 never executed
    $$$$$: 4269-block  2
call    5 never executed
    $$$$$: 4269-block  3
    $$$$$: 4269-block  4
    #####: 4270:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4271:    *stream << " />\n";
    %%%%%: 4271-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4272:    return;
    %%%%%: 4272-block  0
        -: 4273:  }
        -: 4274:
    #####: 4275:  OutputXmlAttribute(stream, kTestsuite, "status",
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4275-block  0
    %%%%%: 4275-block  1
    %%%%%: 4275-block  2
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 4275-block  3
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 4275-block  4
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 4275-block  5
call   11 never executed
    %%%%%: 4275-block  6
call   12 never executed
    %%%%%: 4275-block  7
    $$$$$: 4275-block  8
call   13 never executed
    $$$$$: 4275-block  9
    $$$$$: 4275-block 10
    $$$$$: 4275-block 11
call   14 never executed
    $$$$$: 4275-block 12
    $$$$$: 4275-block 13
    #####: 4276:                     test_info.should_run() ? "run" : "notrun");
    %%%%%: 4276-block  0
call    0 never executed
    #####: 4277:  OutputXmlAttribute(stream, kTestsuite, "result",
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4277-block  0
    %%%%%: 4277-block  1
    %%%%%: 4277-block  2
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 4277-block  3
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 4277-block  4
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 4277-block  5
call   11 never executed
    %%%%%: 4277-block  6
call   12 never executed
    $$$$$: 4277-block  7
call   13 never executed
    $$$$$: 4277-block  8
    $$$$$: 4277-block  9
    $$$$$: 4277-block 10
call   14 never executed
    $$$$$: 4277-block 11
    $$$$$: 4277-block 12
    #####: 4278:                     test_info.should_run()
    %%%%%: 4278-block  0
call    0 never executed
    #####: 4279:                         ? (result.Skipped() ? "skipped" : "completed")
    %%%%%: 4279-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4279-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 4279-block  2
    %%%%%: 4279-block  3
        -: 4280:                         : "suppressed");
    #####: 4281:  OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 4281-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4281-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4281-block  2
call    6 never executed
    $$$$$: 4281-block  3
call    7 never executed
    $$$$$: 4281-block  4
    $$$$$: 4281-block  5
    #####: 4282:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
    %%%%%: 4282-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4282-block  1
call    4 never executed
    $$$$$: 4282-block  2
call    5 never executed
    $$$$$: 4282-block  3
    #####: 4283:  OutputXmlAttribute(
    %%%%%: 4283-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4283-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4283-block  2
call    6 never executed
    $$$$$: 4283-block  3
call    7 never executed
    $$$$$: 4283-block  4
    $$$$$: 4283-block  5
        -: 4284:      stream, kTestsuite, "timestamp",
    #####: 4285:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4285-block  0
call    4 never executed
    $$$$$: 4285-block  1
call    5 never executed
    $$$$$: 4285-block  2
    #####: 4286:  OutputXmlAttribute(stream, kTestsuite, "classname", test_suite_name);
    %%%%%: 4286-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4286-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4286-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4286-block  3
call    9 never executed
    %%%%%: 4286-block  4
call   10 never executed
    $$$$$: 4286-block  5
call   11 never executed
    $$$$$: 4286-block  6
    $$$$$: 4286-block  7
    $$$$$: 4286-block  8
call   12 never executed
    $$$$$: 4286-block  9
    $$$$$: 4286-block 10
        -: 4287:
    #####: 4288:  OutputXmlTestResult(stream, result);
    %%%%%: 4288-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4289:}
    %%%%%: 4289-block  0
    %%%%%: 4289-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    $$$$$: 4289-block  2
call    3 never executed
        -: 4290:
function _ZN7testing8internal24XmlUnitTestResultPrinter19OutputXmlTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4291:void XmlUnitTestResultPrinter::OutputXmlTestResult(::std::ostream* stream,
        -: 4292:                                                   const TestResult& result) {
    #####: 4293:  int failures = 0;
    #####: 4294:  int skips = 0;
    #####: 4295:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4295-block  0
    %%%%%: 4295-block  1
    %%%%%: 4295-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4296:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4296-block  0
call    0 never executed
    #####: 4297:    if (part.failed()) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4298:      if (++failures == 1 && skips == 0) {
    %%%%%: 4298-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4298-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 4298-block  2
    %%%%%: 4298-block  3
    %%%%%: 4298-block  4
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4299:        *stream << ">\n";
    %%%%%: 4299-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4300:      }
        -: 4301:      const std::string location =
        -: 4302:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4303:                                                          part.line_number());
    %%%%%: 4303-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 4304:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4304-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4304-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4304-block  2
call    7 never executed
    $$$$$: 4304-block  3
call    8 never executed
    $$$$$: 4304-block  4
    #####: 4305:      *stream << "      <failure message=\"" << EscapeXmlAttribute(summary)
    %%%%%: 4305-block  0
call    0 never executed
    $$$$$: 4305-block  1
call    1 never executed
    $$$$$: 4305-block  2
    #####: 4306:              << "\" type=\"\">";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4306-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4306-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4306-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 4307:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4307-block  0
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4307-block  1
call    7 never executed
    $$$$$: 4307-block  2
call    8 never executed
    $$$$$: 4307-block  3
    #####: 4308:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4308-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4308-block  1
call    7 never executed
    $$$$$: 4308-block  2
call    8 never executed
    $$$$$: 4308-block  3
    #####: 4309:      *stream << "</failure>\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4310:    } else if (part.skipped()) {
    %%%%%: 4310-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    %%%%%: 4310-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    $$$$$: 4310-block  2
call    6 never executed
    $$$$$: 4310-block  3
call    7 never executed
    $$$$$: 4310-block  4
call    8 never executed
    #####: 4311:      if (++skips == 1 && failures == 0) {
    %%%%%: 4311-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4311-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 4311-block  2
    %%%%%: 4311-block  3
    %%%%%: 4311-block  4
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4312:        *stream << ">\n";
    %%%%%: 4312-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4313:      }
        -: 4314:      const std::string location =
        -: 4315:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4316:                                                          part.line_number());
    %%%%%: 4316-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 4317:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4317-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4317-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4317-block  2
call    7 never executed
    $$$$$: 4317-block  3
call    8 never executed
    $$$$$: 4317-block  4
        -: 4318:      *stream << "      <skipped message=\""
    #####: 4319:              << EscapeXmlAttribute(summary.c_str()) << "\">";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4319-block  0
    %%%%%: 4319-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4319-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4319-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4319-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 4319-block  5
call   16 never executed
call   17 never executed
    $$$$$: 4319-block  6
call   18 never executed
    $$$$$: 4319-block  7
call   19 never executed
    $$$$$: 4319-block  8
    $$$$$: 4319-block  9
    $$$$$: 4319-block 10
    #####: 4320:      const std::string detail = location + "\n" + part.message();
    %%%%%: 4320-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4320-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4320-block  2
call    7 never executed
    $$$$$: 4320-block  3
call    8 never executed
    $$$$$: 4320-block  4
    #####: 4321:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4321-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4321-block  1
call    7 never executed
    $$$$$: 4321-block  2
call    8 never executed
    $$$$$: 4321-block  3
    #####: 4322:      *stream << "</skipped>\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4323:    }
    %%%%%: 4323-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4323-block  1
call    3 never executed
    $$$$$: 4323-block  2
call    4 never executed
    $$$$$: 4323-block  3
call    5 never executed
        -: 4324:  }
        -: 4325:
    #####: 4326:  if (failures == 0 && skips == 0 && result.test_property_count() == 0) {
    %%%%%: 4326-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4326-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 4326-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 4326-block  3
    %%%%%: 4326-block  4
    %%%%%: 4326-block  5
branch  7 never executed (fallthrough)
branch  8 never executed
    #####: 4327:    *stream << " />\n";
    %%%%%: 4327-block  0
call    0 never executed
        -: 4328:  } else {
    #####: 4329:    if (failures == 0 && skips == 0) {
    %%%%%: 4329-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4329-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 4330:      *stream << ">\n";
    %%%%%: 4330-block  0
call    0 never executed
        -: 4331:    }
    #####: 4332:    OutputXmlTestProperties(stream, result);
    %%%%%: 4332-block  0
call    0 never executed
    #####: 4333:    *stream << "    </testcase>\n";
call    0 never executed
        -: 4334:  }
    #####: 4335:}
    %%%%%: 4335-block  0
        -: 4336:
        -: 4337:// Prints an XML representation of a TestSuite object
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4338:void XmlUnitTestResultPrinter::PrintXmlTestSuite(std::ostream* stream,
    %%%%%: 4338-block  0
        -: 4339:                                                 const TestSuite& test_suite) {
    #####: 4340:  const std::string kTestsuite = "testsuite";
    %%%%%: 4340-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4340-block  1
    #####: 4341:  *stream << "  <" << kTestsuite;
    %%%%%: 4341-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4341-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 4342:  OutputXmlAttribute(stream, kTestsuite, "name", test_suite.name());
    %%%%%: 4342-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4342-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4342-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4342-block  3
call   10 never executed
    %%%%%: 4342-block  4
call   11 never executed
    $$$$$: 4342-block  5
call   12 never executed
    $$$$$: 4342-block  6
    $$$$$: 4342-block  7
    $$$$$: 4342-block  8
call   13 never executed
    $$$$$: 4342-block  9
    $$$$$: 4342-block 10
    #####: 4343:  OutputXmlAttribute(stream, kTestsuite, "tests",
    %%%%%: 4343-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4343-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4343-block  2
call    6 never executed
    $$$$$: 4343-block  3
call    7 never executed
    $$$$$: 4343-block  4
    $$$$$: 4343-block  5
    #####: 4344:                     StreamableToString(test_suite.reportable_test_count()));
    %%%%%: 4344-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4344-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4344-block  2
call    6 never executed
    $$$$$: 4344-block  3
call    7 never executed
    $$$$$: 4344-block  4
    $$$$$: 4344-block  5
    #####: 4345:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4346:    OutputXmlAttribute(stream, kTestsuite, "failures",
    %%%%%: 4346-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4346-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4346-block  2
call    6 never executed
    $$$$$: 4346-block  3
call    7 never executed
    $$$$$: 4346-block  4
    $$$$$: 4346-block  5
    #####: 4347:                       StreamableToString(test_suite.failed_test_count()));
    %%%%%: 4347-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4347-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4347-block  2
call    6 never executed
    $$$$$: 4347-block  3
call    7 never executed
    $$$$$: 4347-block  4
    $$$$$: 4347-block  5
    #####: 4348:    OutputXmlAttribute(
    %%%%%: 4348-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4348-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4348-block  2
call    6 never executed
    $$$$$: 4348-block  3
call    7 never executed
    $$$$$: 4348-block  4
    $$$$$: 4348-block  5
        -: 4349:        stream, kTestsuite, "disabled",
    #####: 4350:        StreamableToString(test_suite.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4350-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4350-block  1
call    6 never executed
    $$$$$: 4350-block  2
call    7 never executed
    $$$$$: 4350-block  3
    $$$$$: 4350-block  4
    #####: 4351:    OutputXmlAttribute(stream, kTestsuite, "skipped",
    %%%%%: 4351-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4351-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4351-block  2
call    6 never executed
    $$$$$: 4351-block  3
call    7 never executed
    $$$$$: 4351-block  4
    $$$$$: 4351-block  5
    #####: 4352:                       StreamableToString(test_suite.skipped_test_count()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4352-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4352-block  1
call    6 never executed
    $$$$$: 4352-block  2
call    7 never executed
    $$$$$: 4352-block  3
    $$$$$: 4352-block  4
        -: 4353:
    #####: 4354:    OutputXmlAttribute(stream, kTestsuite, "errors", "0");
    %%%%%: 4354-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4354-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4354-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4354-block  3
call    9 never executed
    %%%%%: 4354-block  4
call   10 never executed
    $$$$$: 4354-block  5
call   11 never executed
    $$$$$: 4354-block  6
    $$$$$: 4354-block  7
    $$$$$: 4354-block  8
call   12 never executed
    $$$$$: 4354-block  9
    $$$$$: 4354-block 10
        -: 4355:
    #####: 4356:    OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 4356-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4356-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4356-block  2
call    6 never executed
    $$$$$: 4356-block  3
call    7 never executed
    $$$$$: 4356-block  4
    $$$$$: 4356-block  5
    #####: 4357:                       FormatTimeInMillisAsSeconds(test_suite.elapsed_time()));
    %%%%%: 4357-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4357-block  1
call    4 never executed
    $$$$$: 4357-block  2
call    5 never executed
    $$$$$: 4357-block  3
    #####: 4358:    OutputXmlAttribute(
    %%%%%: 4358-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4358-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4358-block  2
call    6 never executed
    $$$$$: 4358-block  3
call    7 never executed
    $$$$$: 4358-block  4
    $$$$$: 4358-block  5
        -: 4359:        stream, kTestsuite, "timestamp",
    #####: 4360:        FormatEpochTimeInMillisAsIso8601(test_suite.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4360-block  0
call    4 never executed
    $$$$$: 4360-block  1
call    5 never executed
    $$$$$: 4360-block  2
    #####: 4361:    *stream << TestPropertiesAsXmlAttributes(test_suite.ad_hoc_test_result());
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4361-block  0
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4361-block  1
call    7 never executed
    $$$$$: 4361-block  2
call    8 never executed
    $$$$$: 4361-block  3
        -: 4362:  }
    #####: 4363:  *stream << ">\n";
    %%%%%: 4363-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4364:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4364-block  0
    %%%%%: 4364-block  1
    %%%%%: 4364-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4365:    if (test_suite.GetTestInfo(i)->is_reportable())
    %%%%%: 4365-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4365-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4366:      OutputXmlTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4366-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4366-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
        -: 4367:  }
    #####: 4368:  *stream << "  </" << kTestsuite << ">\n";
    %%%%%: 4368-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4368-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4368-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 4369:}
    %%%%%: 4369-block  0
call    0 never executed
    $$$$$: 4369-block  1
call    1 never executed
        -: 4370:
        -: 4371:// Prints an XML summary of unit_test to output stream out.
function _ZN7testing8internal24XmlUnitTestResultPrinter16PrintXmlUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4372:void XmlUnitTestResultPrinter::PrintXmlUnitTest(std::ostream* stream,
    %%%%%: 4372-block  0
        -: 4373:                                                const UnitTest& unit_test) {
    #####: 4374:  const std::string kTestsuites = "testsuites";
    %%%%%: 4374-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4374-block  1
        -: 4375:
    #####: 4376:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
    %%%%%: 4376-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4377:  *stream << "<" << kTestsuites;
    %%%%%: 4377-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4377-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 4378:
    #####: 4379:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 4379-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4379-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4379-block  2
call    6 never executed
    $$$$$: 4379-block  3
call    7 never executed
    $$$$$: 4379-block  4
    $$$$$: 4379-block  5
    #####: 4380:                     StreamableToString(unit_test.reportable_test_count()));
    %%%%%: 4380-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4380-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4380-block  2
call    6 never executed
    $$$$$: 4380-block  3
call    7 never executed
    $$$$$: 4380-block  4
    $$$$$: 4380-block  5
    #####: 4381:  OutputXmlAttribute(stream, kTestsuites, "failures",
    %%%%%: 4381-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4381-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4381-block  2
call    6 never executed
    $$$$$: 4381-block  3
call    7 never executed
    $$$$$: 4381-block  4
    $$$$$: 4381-block  5
    #####: 4382:                     StreamableToString(unit_test.failed_test_count()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4382-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4382-block  1
call    6 never executed
    $$$$$: 4382-block  2
call    7 never executed
    $$$$$: 4382-block  3
    $$$$$: 4382-block  4
    #####: 4383:  OutputXmlAttribute(
    %%%%%: 4383-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4383-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4383-block  2
call    6 never executed
    $$$$$: 4383-block  3
call    7 never executed
    $$$$$: 4383-block  4
    $$$$$: 4383-block  5
        -: 4384:      stream, kTestsuites, "disabled",
    #####: 4385:      StreamableToString(unit_test.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4385-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4385-block  1
call    6 never executed
    $$$$$: 4385-block  2
call    7 never executed
    $$$$$: 4385-block  3
    $$$$$: 4385-block  4
    #####: 4386:  OutputXmlAttribute(stream, kTestsuites, "errors", "0");
    %%%%%: 4386-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4386-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4386-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4386-block  3
call    9 never executed
    %%%%%: 4386-block  4
call   10 never executed
    $$$$$: 4386-block  5
call   11 never executed
    $$$$$: 4386-block  6
    $$$$$: 4386-block  7
    $$$$$: 4386-block  8
call   12 never executed
    $$$$$: 4386-block  9
    $$$$$: 4386-block 10
    #####: 4387:  OutputXmlAttribute(stream, kTestsuites, "time",
    %%%%%: 4387-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4387-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4387-block  2
call    6 never executed
    $$$$$: 4387-block  3
call    7 never executed
    $$$$$: 4387-block  4
    $$$$$: 4387-block  5
    #####: 4388:                     FormatTimeInMillisAsSeconds(unit_test.elapsed_time()));
    %%%%%: 4388-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4388-block  1
call    4 never executed
    $$$$$: 4388-block  2
call    5 never executed
    $$$$$: 4388-block  3
    #####: 4389:  OutputXmlAttribute(
    %%%%%: 4389-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4389-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4389-block  2
call    6 never executed
    $$$$$: 4389-block  3
call    7 never executed
    $$$$$: 4389-block  4
    $$$$$: 4389-block  5
        -: 4390:      stream, kTestsuites, "timestamp",
    #####: 4391:      FormatEpochTimeInMillisAsIso8601(unit_test.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4391-block  0
call    4 never executed
    $$$$$: 4391-block  1
call    5 never executed
    $$$$$: 4391-block  2
        -: 4392:
    #####: 4393:  if (GTEST_FLAG_GET(shuffle)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4394:    OutputXmlAttribute(stream, kTestsuites, "random_seed",
    %%%%%: 4394-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4394-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4394-block  2
call    6 never executed
    $$$$$: 4394-block  3
call    7 never executed
    $$$$$: 4394-block  4
    $$$$$: 4394-block  5
    #####: 4395:                       StreamableToString(unit_test.random_seed()));
    %%%%%: 4395-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4395-block  1
call    4 never executed
    $$$$$: 4395-block  2
call    5 never executed
    $$$$$: 4395-block  3
    $$$$$: 4395-block  4
        -: 4396:  }
    #####: 4397:  *stream << TestPropertiesAsXmlAttributes(unit_test.ad_hoc_test_result());
    %%%%%: 4397-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4397-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4397-block  2
call    7 never executed
    $$$$$: 4397-block  3
call    8 never executed
    $$$$$: 4397-block  4
        -: 4398:
    #####: 4399:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
    %%%%%: 4399-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4399-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4399-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4399-block  3
call    9 never executed
    %%%%%: 4399-block  4
call   10 never executed
    $$$$$: 4399-block  5
call   11 never executed
    $$$$$: 4399-block  6
    $$$$$: 4399-block  7
    $$$$$: 4399-block  8
call   12 never executed
    $$$$$: 4399-block  9
    $$$$$: 4399-block 10
    #####: 4400:  *stream << ">\n";
    %%%%%: 4400-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4401:
    #####: 4402:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4402-block  0
    %%%%%: 4402-block  1
    %%%%%: 4402-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4403:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0)
    %%%%%: 4403-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4403-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4403-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 4404:      PrintXmlTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4404-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4404-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 4405:  }
        -: 4406:
        -: 4407:  // If there was a test failure outside of one of the test suites (like in a
        -: 4408:  // test environment) include that in the output.
    #####: 4409:  if (unit_test.ad_hoc_test_result().Failed()) {
    %%%%%: 4409-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4409-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4410:    OutputXmlTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());
    %%%%%: 4410-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 4411:  }
        -: 4412:
    #####: 4413:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4413-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4413-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4413-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 4414:}
    %%%%%: 4414-block  0
call    0 never executed
    $$$$$: 4414-block  1
call    1 never executed
        -: 4415:
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestsListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4416:void XmlUnitTestResultPrinter::PrintXmlTestsList(
    %%%%%: 4416-block  0
        -: 4417:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4418:  const std::string kTestsuites = "testsuites";
    %%%%%: 4418-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4418-block  1
        -: 4419:
    #####: 4420:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
    %%%%%: 4420-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4421:  *stream << "<" << kTestsuites;
    %%%%%: 4421-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4421-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 4422:
    #####: 4423:  int total_tests = 0;
    #####: 4424:  for (auto test_suite : test_suites) {
    %%%%%: 4424-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4424-block  1
call    2 never executed
    %%%%%: 4424-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 4425:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
        -: 4426:  }
    #####: 4427:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 4427-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4427-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4427-block  2
call    6 never executed
    $$$$$: 4427-block  3
call    7 never executed
    $$$$$: 4427-block  4
    $$$$$: 4427-block  5
    #####: 4428:                     StreamableToString(total_tests));
    %%%%%: 4428-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4428-block  1
call    3 never executed
    $$$$$: 4428-block  2
call    4 never executed
    $$$$$: 4428-block  3
    #####: 4429:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
    %%%%%: 4429-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4429-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4429-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4429-block  3
call    9 never executed
    %%%%%: 4429-block  4
call   10 never executed
    $$$$$: 4429-block  5
call   11 never executed
    $$$$$: 4429-block  6
    $$$$$: 4429-block  7
    $$$$$: 4429-block  8
call   12 never executed
    $$$$$: 4429-block  9
    $$$$$: 4429-block 10
    #####: 4430:  *stream << ">\n";
    %%%%%: 4430-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4431:
    #####: 4432:  for (auto test_suite : test_suites) {
    %%%%%: 4432-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4432-block  1
call    2 never executed
    %%%%%: 4432-block  2
call    3 never executed
    %%%%%: 4432-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
    #####: 4433:    PrintXmlTestSuite(stream, *test_suite);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4434:  }
    #####: 4435:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4435-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4435-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4435-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 4436:}
    %%%%%: 4436-block  0
call    0 never executed
    $$$$$: 4436-block  1
call    1 never executed
        -: 4437:
        -: 4438:// Produces a string representing the test properties in a result as space
        -: 4439:// delimited XML attributes based on the property key="value" pairs.
function _ZN7testing8internal24XmlUnitTestResultPrinter29TestPropertiesAsXmlAttributesB5cxx11ERKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4440:std::string XmlUnitTestResultPrinter::TestPropertiesAsXmlAttributes(
        -: 4441:    const TestResult& result) {
    #####: 4442:  Message attributes;
    %%%%%: 4442-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4443:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4443-block  0
    %%%%%: 4443-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4444:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4444-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4445:    attributes << " " << property.key() << "="
    %%%%%: 4445-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4445-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4445-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    $$$$$: 4445-block  3
    #####: 4446:               << "\"" << EscapeXmlAttribute(property.value()) << "\"";
    %%%%%: 4446-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4446-block  1
    %%%%%: 4446-block  2
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4446-block  3
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4446-block  4
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4446-block  5
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 4446-block  6
call   16 never executed
call   17 never executed
    %%%%%: 4446-block  7
    $$$$$: 4446-block  8
call   18 never executed
    $$$$$: 4446-block  9
call   19 never executed
    $$$$$: 4446-block 10
    $$$$$: 4446-block 11
    $$$$$: 4446-block 12
        -: 4447:  }
    #####: 4448:  return attributes.GetString();
    %%%%%: 4448-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4448-block  1
    #####: 4449:}
    %%%%%: 4449-block  0
call    0 never executed
    $$$$$: 4449-block  1
call    1 never executed
        -: 4450:
function _ZN7testing8internal24XmlUnitTestResultPrinter23OutputXmlTestPropertiesEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4451:void XmlUnitTestResultPrinter::OutputXmlTestProperties(
    %%%%%: 4451-block  0
        -: 4452:    std::ostream* stream, const TestResult& result) {
    #####: 4453:  const std::string kProperties = "properties";
    %%%%%: 4453-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4453-block  1
    $$$$$: 4453-block  2
    #####: 4454:  const std::string kProperty = "property";
    %%%%%: 4454-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4454-block  1
        -: 4455:
    #####: 4456:  if (result.test_property_count() <= 0) {
    %%%%%: 4456-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4457:    return;
    %%%%%: 4457-block  0
        -: 4458:  }
        -: 4459:
    #####: 4460:  *stream << "      <" << kProperties << ">\n";
    %%%%%: 4460-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4460-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4460-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 4461:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4461-block  0
    %%%%%: 4461-block  1
    %%%%%: 4461-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4462:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4462-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4463:    *stream << "        <" << kProperty;
    %%%%%: 4463-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4463-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 4464:    *stream << " name=\"" << EscapeXmlAttribute(property.key()) << "\"";
    %%%%%: 4464-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4464-block  1
    %%%%%: 4464-block  2
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4464-block  3
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4464-block  4
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4464-block  5
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 4464-block  6
call   16 never executed
call   17 never executed
    $$$$$: 4464-block  7
call   18 never executed
    $$$$$: 4464-block  8
call   19 never executed
    $$$$$: 4464-block  9
    $$$$$: 4464-block 10
    $$$$$: 4464-block 11
    #####: 4465:    *stream << " value=\"" << EscapeXmlAttribute(property.value()) << "\"";
    %%%%%: 4465-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4465-block  1
    %%%%%: 4465-block  2
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4465-block  3
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4465-block  4
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4465-block  5
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 4465-block  6
call   16 never executed
call   17 never executed
    $$$$$: 4465-block  7
call   18 never executed
    $$$$$: 4465-block  8
call   19 never executed
    $$$$$: 4465-block  9
    $$$$$: 4465-block 10
    $$$$$: 4465-block 11
    #####: 4466:    *stream << "/>\n";
    %%%%%: 4466-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4467:  }
    #####: 4468:  *stream << "      </" << kProperties << ">\n";
    %%%%%: 4468-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4468-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4468-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 4469:}
    %%%%%: 4469-block  0
    %%%%%: 4469-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 4469-block  2
    %%%%%: 4469-block  3
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    $$$$$: 4469-block  4
call    6 never executed
    $$$$$: 4469-block  5
call    7 never executed
        -: 4470:
        -: 4471:// End XmlUnitTestResultPrinter
        -: 4472:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 4473:
        -: 4474:#if GTEST_HAS_FILE_SYSTEM
        -: 4475:// This class generates an JSON output file.
        -: 4476:class JsonUnitTestResultPrinter : public EmptyTestEventListener {
        -: 4477: public:
        -: 4478:  explicit JsonUnitTestResultPrinter(const char* output_file);
        -: 4479:
        -: 4480:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 4481:
        -: 4482:  // Prints an JSON summary of all unit tests.
        -: 4483:  static void PrintJsonTestList(::std::ostream* stream,
        -: 4484:                                const std::vector<TestSuite*>& test_suites);
        -: 4485:
        -: 4486: private:
        -: 4487:  // Returns an JSON-escaped copy of the input string str.
        -: 4488:  static std::string EscapeJson(const std::string& str);
        -: 4489:
        -: 4490:  //// Verifies that the given attribute belongs to the given element and
        -: 4491:  //// streams the attribute as JSON.
        -: 4492:  static void OutputJsonKey(std::ostream* stream,
        -: 4493:                            const std::string& element_name,
        -: 4494:                            const std::string& name, const std::string& value,
        -: 4495:                            const std::string& indent, bool comma = true);
        -: 4496:  static void OutputJsonKey(std::ostream* stream,
        -: 4497:                            const std::string& element_name,
        -: 4498:                            const std::string& name, int value,
        -: 4499:                            const std::string& indent, bool comma = true);
        -: 4500:
        -: 4501:  // Streams a test suite JSON stanza containing the given test result.
        -: 4502:  //
        -: 4503:  // Requires: result.Failed()
        -: 4504:  static void OutputJsonTestSuiteForTestResult(::std::ostream* stream,
        -: 4505:                                               const TestResult& result);
        -: 4506:
        -: 4507:  // Streams a JSON representation of a TestResult object.
        -: 4508:  static void OutputJsonTestResult(::std::ostream* stream,
        -: 4509:                                   const TestResult& result);
        -: 4510:
        -: 4511:  // Streams a JSON representation of a TestInfo object.
        -: 4512:  static void OutputJsonTestInfo(::std::ostream* stream,
        -: 4513:                                 const char* test_suite_name,
        -: 4514:                                 const TestInfo& test_info);
        -: 4515:
        -: 4516:  // Prints a JSON representation of a TestSuite object
        -: 4517:  static void PrintJsonTestSuite(::std::ostream* stream,
        -: 4518:                                 const TestSuite& test_suite);
        -: 4519:
        -: 4520:  // Prints a JSON summary of unit_test to output stream out.
        -: 4521:  static void PrintJsonUnitTest(::std::ostream* stream,
        -: 4522:                                const UnitTest& unit_test);
        -: 4523:
        -: 4524:  // Produces a string representing the test properties in a result as
        -: 4525:  // a JSON dictionary.
        -: 4526:  static std::string TestPropertiesAsJson(const TestResult& result,
        -: 4527:                                          const std::string& indent);
        -: 4528:
        -: 4529:  // The output file.
        -: 4530:  const std::string output_file_;
        -: 4531:
        -: 4532:  JsonUnitTestResultPrinter(const JsonUnitTestResultPrinter&) = delete;
        -: 4533:  JsonUnitTestResultPrinter& operator=(const JsonUnitTestResultPrinter&) =
        -: 4534:      delete;
        -: 4535:};
        -: 4536:
        -: 4537:// Creates a new JsonUnitTestResultPrinter.
function _ZN7testing8internal25JsonUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 4538:JsonUnitTestResultPrinter::JsonUnitTestResultPrinter(const char* output_file)
    #####: 4539:    : output_file_(output_file) {
    %%%%%: 4539-block  0
call    0 never executed
    %%%%%: 4539-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 4539-block  2
    #####: 4540:  if (output_file_.empty()) {
    %%%%%: 4540-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4541:    GTEST_LOG_(FATAL) << "JSON output file may not be null";
    %%%%%: 4541-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4541-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4541-block  2
call    7 never executed
    $$$$$: 4541-block  3
call    8 never executed
    $$$$$: 4541-block  4
        -: 4542:  }
    #####: 4543:}
    %%%%%: 4543-block  0
    $$$$$: 4543-block  1
call    0 never executed
    $$$$$: 4543-block  2
call    1 never executed
        -: 4544:
function _ZN7testing8internal25JsonUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 4545:void JsonUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 4546:                                                   int /*iteration*/) {
    #####: 4547:  FILE* jsonout = OpenFileForWriting(output_file_);
    %%%%%: 4547-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4548:  std::stringstream stream;
    %%%%%: 4548-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4549:  PrintJsonUnitTest(&stream, unit_test);
    %%%%%: 4549-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4550:  fprintf(jsonout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4550-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4550-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    $$$$$: 4550-block  2
    #####: 4551:  fclose(jsonout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4552:}
    %%%%%: 4552-block  0
call    0 never executed
    $$$$$: 4552-block  1
call    1 never executed
        -: 4553:
        -: 4554:// Returns an JSON-escaped copy of the input string str.
function _ZN7testing8internal25JsonUnitTestResultPrinter10EscapeJsonERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4555:std::string JsonUnitTestResultPrinter::EscapeJson(const std::string& str) {
    #####: 4556:  Message m;
    %%%%%: 4556-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4557:
    #####: 4558:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4558-block  0
    %%%%%: 4558-block  1
    %%%%%: 4558-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4559:    const char ch = str[i];
    %%%%%: 4559-block  0
call    0 never executed
    #####: 4560:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4561:      case '\\':
        -: 4562:      case '"':
        -: 4563:      case '/':
    #####: 4564:        m << '\\' << ch;
    %%%%%: 4564-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4564-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 4564-block  2
    #####: 4565:        break;
    %%%%%: 4565-block  0
    #####: 4566:      case '\b':
    #####: 4567:        m << "\\b";
    %%%%%: 4567-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4568:        break;
    %%%%%: 4568-block  0
    #####: 4569:      case '\t':
    #####: 4570:        m << "\\t";
    %%%%%: 4570-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4571:        break;
    %%%%%: 4571-block  0
    #####: 4572:      case '\n':
    #####: 4573:        m << "\\n";
    %%%%%: 4573-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4574:        break;
    %%%%%: 4574-block  0
    #####: 4575:      case '\f':
    #####: 4576:        m << "\\f";
    %%%%%: 4576-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4577:        break;
    %%%%%: 4577-block  0
    #####: 4578:      case '\r':
    #####: 4579:        m << "\\r";
    %%%%%: 4579-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4580:        break;
    %%%%%: 4580-block  0
    #####: 4581:      default:
    #####: 4582:        if (ch < ' ') {
    %%%%%: 4582-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4583:          m << "\\u00" << String::FormatByte(static_cast<unsigned char>(ch));
    %%%%%: 4583-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4583-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4583-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4583-block  3
call    9 never executed
    $$$$$: 4583-block  4
call   10 never executed
    $$$$$: 4583-block  5
        -: 4584:        } else {
    #####: 4585:          m << ch;
    %%%%%: 4585-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4586:        }
    #####: 4587:        break;
    %%%%%: 4587-block  0
        -: 4588:    }
        -: 4589:  }
        -: 4590:
    #####: 4591:  return m.GetString();
    %%%%%: 4591-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4591-block  1
    #####: 4592:}
    %%%%%: 4592-block  0
call    0 never executed
    $$$$$: 4592-block  1
call    1 never executed
        -: 4593:
        -: 4594:// The following routines generate an JSON representation of a UnitTest
        -: 4595:// object.
        -: 4596:
        -: 4597:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internalL28FormatTimeInMillisAsDurationEx called 0 returned 0% blocks executed 0%
    #####: 4598:static std::string FormatTimeInMillisAsDuration(TimeInMillis ms) {
    #####: 4599:  ::std::stringstream ss;
    %%%%%: 4599-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4600:  ss << (static_cast<double>(ms) * 1e-3) << "s";
    %%%%%: 4600-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4600-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 4601:  return ss.str();
    %%%%%: 4601-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4601-block  1
    #####: 4602:}
    %%%%%: 4602-block  0
call    0 never executed
    $$$$$: 4602-block  1
call    1 never executed
        -: 4603:
        -: 4604:// Converts the given epoch time in milliseconds to a date string in the
        -: 4605:// RFC3339 format, without the timezone information.
function _ZN7testing8internalL32FormatEpochTimeInMillisAsRFC3339Ex called 0 returned 0% blocks executed 0%
    #####: 4606:static std::string FormatEpochTimeInMillisAsRFC3339(TimeInMillis ms) {
        -: 4607:  struct tm time_struct;
    #####: 4608:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4608-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4608-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 4609:    return "";
    %%%%%: 4609-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4609-block  1
    $$$$$: 4609-block  2
        -: 4610:  // YYYY-MM-DDThh:mm:ss
    #####: 4611:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4611-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4611-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4611-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4611-block  3
call   12 never executed
    $$$$$: 4611-block  4
call   13 never executed
    $$$$$: 4611-block  5
call   14 never executed
    $$$$$: 4611-block  6
    $$$$$: 4611-block  7
    $$$$$: 4611-block  8
    $$$$$: 4611-block  9
    #####: 4612:         String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4612-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4612-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4612-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4612-block  3
call   12 never executed
    $$$$$: 4612-block  4
call   13 never executed
    $$$$$: 4612-block  5
call   14 never executed
    $$$$$: 4612-block  6
    $$$$$: 4612-block  7
    $$$$$: 4612-block  8
    #####: 4613:         String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4613-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4613-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4613-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4613-block  3
call   12 never executed
    $$$$$: 4613-block  4
call   13 never executed
    $$$$$: 4613-block  5
call   14 never executed
    $$$$$: 4613-block  6
    $$$$$: 4613-block  7
    $$$$$: 4613-block  8
    #####: 4614:         String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4614-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4614-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4614-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4614-block  3
call   12 never executed
    $$$$$: 4614-block  4
call   13 never executed
    $$$$$: 4614-block  5
call   14 never executed
    $$$$$: 4614-block  6
    $$$$$: 4614-block  7
    $$$$$: 4614-block  8
    #####: 4615:         String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4615-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4615-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4615-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4615-block  3
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4615-block  4
call   12 never executed
    $$$$$: 4615-block  5
call   13 never executed
    $$$$$: 4615-block  6
call   14 never executed
    $$$$$: 4615-block  7
    $$$$$: 4615-block  8
    $$$$$: 4615-block  9
    #####: 4616:         String::FormatIntWidth2(time_struct.tm_sec) + "Z";
    %%%%%: 4616-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4616-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 4616-block  2
call    7 never executed
    $$$$$: 4616-block  3
        -: 4617:}
        -: 4618:
function _ZN7testing8internalL6IndentEy called 0 returned 0% blocks executed 0%
    #####: 4619:static inline std::string Indent(size_t width) {
    %%%%%: 4619-block  0
    #####: 4620:  return std::string(width, ' ');
    %%%%%: 4620-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4620-block  1
    %%%%%: 4620-block  2
        -: 4621:}
        -: 4622:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_SA_b called 0 returned 0% blocks executed 0%
    #####: 4623:void JsonUnitTestResultPrinter::OutputJsonKey(std::ostream* stream,
        -: 4624:                                              const std::string& element_name,
        -: 4625:                                              const std::string& name,
        -: 4626:                                              const std::string& value,
        -: 4627:                                              const std::string& indent,
        -: 4628:                                              bool comma) {
        -: 4629:  const std::vector<std::string>& allowed_names =
    #####: 4630:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4630-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4631:
    #####: 4632:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4632-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4632-block  1
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed
    %%%%%: 4632-block  2
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4632-block  3
call   13 never executed
    %%%%%: 4632-block  4
call   14 never executed
    $$$$$: 4632-block  5
    $$$$$: 4632-block  6
    $$$$$: 4632-block  7
call   15 never executed
    $$$$$: 4632-block  8
        -: 4633:               allowed_names.end())
        -: 4634:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4635:      << "\".";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4635-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4635-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4635-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4635-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4635-block  4
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
        -: 4636:
    #####: 4637:  *stream << indent << "\"" << name << "\": \"" << EscapeJson(value) << "\"";
    %%%%%: 4637-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4637-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4637-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4637-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4637-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4637-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 4637-block  6
call   18 never executed
branch 19 never executed (fallthrough)
branch 20 never executed (throw)
    %%%%%: 4637-block  7
call   21 never executed
    $$$$$: 4637-block  8
call   22 never executed
    $$$$$: 4637-block  9
    #####: 4638:  if (comma) *stream << ",\n";
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4638-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 4639:}
    %%%%%: 4639-block  0
call    0 never executed
    $$$$$: 4639-block  1
call    1 never executed
        -: 4640:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_iSA_b called 0 returned 0% blocks executed 0%
    #####: 4641:void JsonUnitTestResultPrinter::OutputJsonKey(
        -: 4642:    std::ostream* stream, const std::string& element_name,
        -: 4643:    const std::string& name, int value, const std::string& indent, bool comma) {
        -: 4644:  const std::vector<std::string>& allowed_names =
    #####: 4645:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4645-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4646:
    #####: 4647:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4647-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4647-block  1
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed
    %%%%%: 4647-block  2
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4647-block  3
call   13 never executed
    %%%%%: 4647-block  4
call   14 never executed
    $$$$$: 4647-block  5
    $$$$$: 4647-block  6
    $$$$$: 4647-block  7
call   15 never executed
    $$$$$: 4647-block  8
        -: 4648:               allowed_names.end())
        -: 4649:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4650:      << "\".";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4650-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4650-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4650-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4650-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4650-block  4
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
        -: 4651:
    #####: 4652:  *stream << indent << "\"" << name << "\": " << StreamableToString(value);
    %%%%%: 4652-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4652-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4652-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4652-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4652-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4652-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 4652-block  6
call   18 never executed
    $$$$$: 4652-block  7
call   19 never executed
    $$$$$: 4652-block  8
    #####: 4653:  if (comma) *stream << ",\n";
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4653-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 4654:}
    %%%%%: 4654-block  0
call    0 never executed
    $$$$$: 4654-block  1
call    1 never executed
        -: 4655:
        -: 4656:// Streams a test suite JSON stanza containing the given test result.
function _ZN7testing8internal25JsonUnitTestResultPrinter32OutputJsonTestSuiteForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4657:void JsonUnitTestResultPrinter::OutputJsonTestSuiteForTestResult(
        -: 4658:    ::std::ostream* stream, const TestResult& result) {
        -: 4659:  // Output the boilerplate for a new test suite.
    #####: 4660:  *stream << Indent(4) << "{\n";
    %%%%%: 4660-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4660-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4660-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4660-block  3
call    9 never executed
    $$$$$: 4660-block  4
call   10 never executed
    $$$$$: 4660-block  5
call   11 never executed
    #####: 4661:  OutputJsonKey(stream, "testsuite", "name", "NonTestSuiteFailure", Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4661-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4661-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4661-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4661-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4661-block  4
call   15 never executed
    %%%%%: 4661-block  5
call   16 never executed
    %%%%%: 4661-block  6
call   17 never executed
    %%%%%: 4661-block  7
call   18 never executed
    $$$$$: 4661-block  8
call   19 never executed
    $$$$$: 4661-block  9
    $$$$$: 4661-block 10
    $$$$$: 4661-block 11
call   20 never executed
    $$$$$: 4661-block 12
    $$$$$: 4661-block 13
    $$$$$: 4661-block 14
call   21 never executed
    $$$$$: 4661-block 15
    $$$$$: 4661-block 16
    $$$$$: 4661-block 17
call   22 never executed
    $$$$$: 4661-block 18
call   23 never executed
    #####: 4662:  OutputJsonKey(stream, "testsuite", "tests", 1, Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4662-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4662-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4662-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4662-block  3
call   12 never executed
    %%%%%: 4662-block  4
call   13 never executed
    %%%%%: 4662-block  5
call   14 never executed
    $$$$$: 4662-block  6
call   15 never executed
    $$$$$: 4662-block  7
    $$$$$: 4662-block  8
    $$$$$: 4662-block  9
call   16 never executed
    $$$$$: 4662-block 10
    $$$$$: 4662-block 11
    $$$$$: 4662-block 12
call   17 never executed
    $$$$$: 4662-block 13
call   18 never executed
    #####: 4663:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4664:    OutputJsonKey(stream, "testsuite", "failures", 1, Indent(6));
    %%%%%: 4664-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4664-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4664-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4664-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4664-block  4
call   12 never executed
    %%%%%: 4664-block  5
call   13 never executed
    %%%%%: 4664-block  6
call   14 never executed
    $$$$$: 4664-block  7
call   15 never executed
    $$$$$: 4664-block  8
    $$$$$: 4664-block  9
    $$$$$: 4664-block 10
call   16 never executed
    $$$$$: 4664-block 11
    $$$$$: 4664-block 12
    $$$$$: 4664-block 13
call   17 never executed
    $$$$$: 4664-block 14
call   18 never executed
    #####: 4665:    OutputJsonKey(stream, "testsuite", "disabled", 0, Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4665-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4665-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4665-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4665-block  3
call   12 never executed
    %%%%%: 4665-block  4
call   13 never executed
    %%%%%: 4665-block  5
call   14 never executed
    $$$$$: 4665-block  6
call   15 never executed
    $$$$$: 4665-block  7
    $$$$$: 4665-block  8
    $$$$$: 4665-block  9
call   16 never executed
    $$$$$: 4665-block 10
    $$$$$: 4665-block 11
    $$$$$: 4665-block 12
call   17 never executed
    $$$$$: 4665-block 13
call   18 never executed
    #####: 4666:    OutputJsonKey(stream, "testsuite", "skipped", 0, Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4666-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4666-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4666-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4666-block  3
call   12 never executed
    %%%%%: 4666-block  4
call   13 never executed
    %%%%%: 4666-block  5
call   14 never executed
    $$$$$: 4666-block  6
call   15 never executed
    $$$$$: 4666-block  7
    $$$$$: 4666-block  8
    $$$$$: 4666-block  9
call   16 never executed
    $$$$$: 4666-block 10
    $$$$$: 4666-block 11
    $$$$$: 4666-block 12
call   17 never executed
    $$$$$: 4666-block 13
call   18 never executed
    #####: 4667:    OutputJsonKey(stream, "testsuite", "errors", 0, Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4667-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4667-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4667-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4667-block  3
call   12 never executed
    %%%%%: 4667-block  4
call   13 never executed
    %%%%%: 4667-block  5
call   14 never executed
    $$$$$: 4667-block  6
call   15 never executed
    $$$$$: 4667-block  7
    $$$$$: 4667-block  8
    $$$$$: 4667-block  9
call   16 never executed
    $$$$$: 4667-block 10
    $$$$$: 4667-block 11
    $$$$$: 4667-block 12
call   17 never executed
    $$$$$: 4667-block 13
call   18 never executed
    #####: 4668:    OutputJsonKey(stream, "testsuite", "time",
    %%%%%: 4668-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4668-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4668-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4668-block  3
call    9 never executed
    %%%%%: 4668-block  4
call   10 never executed
    $$$$$: 4668-block  5
call   11 never executed
    $$$$$: 4668-block  6
    $$$$$: 4668-block  7
    $$$$$: 4668-block  8
call   12 never executed
    $$$$$: 4668-block  9
    $$$$$: 4668-block 10
    #####: 4669:                  FormatTimeInMillisAsDuration(result.elapsed_time()),
    %%%%%: 4669-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4669-block  1
call    4 never executed
    $$$$$: 4669-block  2
call    5 never executed
    $$$$$: 4669-block  3
    #####: 4670:                  Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 4670-block  0
call    4 never executed
    $$$$$: 4670-block  1
call    5 never executed
    #####: 4671:    OutputJsonKey(stream, "testsuite", "timestamp",
    %%%%%: 4671-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4671-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4671-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4671-block  3
call    9 never executed
    %%%%%: 4671-block  4
call   10 never executed
    $$$$$: 4671-block  5
call   11 never executed
    $$$$$: 4671-block  6
    $$$$$: 4671-block  7
    $$$$$: 4671-block  8
call   12 never executed
    $$$$$: 4671-block  9
    $$$$$: 4671-block 10
    #####: 4672:                  FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
    %%%%%: 4672-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4672-block  1
call    4 never executed
    $$$$$: 4672-block  2
call    5 never executed
    $$$$$: 4672-block  3
    #####: 4673:                  Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 4673-block  0
call    4 never executed
    $$$$$: 4673-block  1
call    5 never executed
        -: 4674:  }
    #####: 4675:  *stream << Indent(6) << "\"testsuite\": [\n";
    %%%%%: 4675-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4675-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4675-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4675-block  3
call    9 never executed
    $$$$$: 4675-block  4
call   10 never executed
    $$$$$: 4675-block  5
call   11 never executed
        -: 4676:
        -: 4677:  // Output the boilerplate for a new test case.
    #####: 4678:  *stream << Indent(8) << "{\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4678-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4678-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4678-block  2
call    9 never executed
    $$$$$: 4678-block  3
call   10 never executed
    $$$$$: 4678-block  4
call   11 never executed
    #####: 4679:  OutputJsonKey(stream, "testcase", "name", "", Indent(10));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4679-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4679-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4679-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4679-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4679-block  4
call   15 never executed
    %%%%%: 4679-block  5
call   16 never executed
    %%%%%: 4679-block  6
call   17 never executed
    %%%%%: 4679-block  7
call   18 never executed
    $$$$$: 4679-block  8
call   19 never executed
    $$$$$: 4679-block  9
    $$$$$: 4679-block 10
    $$$$$: 4679-block 11
call   20 never executed
    $$$$$: 4679-block 12
    $$$$$: 4679-block 13
    $$$$$: 4679-block 14
call   21 never executed
    $$$$$: 4679-block 15
    $$$$$: 4679-block 16
    $$$$$: 4679-block 17
call   22 never executed
    $$$$$: 4679-block 18
call   23 never executed
    #####: 4680:  OutputJsonKey(stream, "testcase", "status", "RUN", Indent(10));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4680-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4680-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4680-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4680-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4680-block  4
call   15 never executed
    %%%%%: 4680-block  5
call   16 never executed
    %%%%%: 4680-block  6
call   17 never executed
    %%%%%: 4680-block  7
call   18 never executed
    $$$$$: 4680-block  8
call   19 never executed
    $$$$$: 4680-block  9
    $$$$$: 4680-block 10
    $$$$$: 4680-block 11
call   20 never executed
    $$$$$: 4680-block 12
    $$$$$: 4680-block 13
    $$$$$: 4680-block 14
call   21 never executed
    $$$$$: 4680-block 15
    $$$$$: 4680-block 16
    $$$$$: 4680-block 17
call   22 never executed
    $$$$$: 4680-block 18
call   23 never executed
    #####: 4681:  OutputJsonKey(stream, "testcase", "result", "COMPLETED", Indent(10));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4681-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4681-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4681-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4681-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4681-block  4
call   15 never executed
    %%%%%: 4681-block  5
call   16 never executed
    %%%%%: 4681-block  6
call   17 never executed
    %%%%%: 4681-block  7
call   18 never executed
    $$$$$: 4681-block  8
call   19 never executed
    $$$$$: 4681-block  9
    $$$$$: 4681-block 10
    $$$$$: 4681-block 11
call   20 never executed
    $$$$$: 4681-block 12
    $$$$$: 4681-block 13
    $$$$$: 4681-block 14
call   21 never executed
    $$$$$: 4681-block 15
    $$$$$: 4681-block 16
    $$$$$: 4681-block 17
call   22 never executed
    $$$$$: 4681-block 18
call   23 never executed
    #####: 4682:  OutputJsonKey(stream, "testcase", "timestamp",
    %%%%%: 4682-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4682-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4682-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4682-block  3
call    9 never executed
    %%%%%: 4682-block  4
call   10 never executed
    $$$$$: 4682-block  5
call   11 never executed
    $$$$$: 4682-block  6
    $$$$$: 4682-block  7
    $$$$$: 4682-block  8
call   12 never executed
    $$$$$: 4682-block  9
    $$$$$: 4682-block 10
    #####: 4683:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
    %%%%%: 4683-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4683-block  1
call    4 never executed
    $$$$$: 4683-block  2
call    5 never executed
    $$$$$: 4683-block  3
    #####: 4684:                Indent(10));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 4684-block  0
call    4 never executed
    $$$$$: 4684-block  1
call    5 never executed
    #####: 4685:  OutputJsonKey(stream, "testcase", "time",
    %%%%%: 4685-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4685-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4685-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4685-block  3
call    9 never executed
    %%%%%: 4685-block  4
call   10 never executed
    $$$$$: 4685-block  5
call   11 never executed
    $$$$$: 4685-block  6
    $$$$$: 4685-block  7
    $$$$$: 4685-block  8
call   12 never executed
    $$$$$: 4685-block  9
    $$$$$: 4685-block 10
    #####: 4686:                FormatTimeInMillisAsDuration(result.elapsed_time()),
    %%%%%: 4686-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4686-block  1
call    4 never executed
    $$$$$: 4686-block  2
call    5 never executed
    $$$$$: 4686-block  3
    #####: 4687:                Indent(10));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 4687-block  0
call    4 never executed
    $$$$$: 4687-block  1
call    5 never executed
    #####: 4688:  OutputJsonKey(stream, "testcase", "classname", "", Indent(10), false);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4688-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4688-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4688-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4688-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4688-block  4
call   15 never executed
    %%%%%: 4688-block  5
call   16 never executed
    %%%%%: 4688-block  6
call   17 never executed
    %%%%%: 4688-block  7
call   18 never executed
    $$$$$: 4688-block  8
call   19 never executed
    $$$$$: 4688-block  9
    $$$$$: 4688-block 10
    $$$$$: 4688-block 11
call   20 never executed
    $$$$$: 4688-block 12
    $$$$$: 4688-block 13
    $$$$$: 4688-block 14
call   21 never executed
    $$$$$: 4688-block 15
    $$$$$: 4688-block 16
    $$$$$: 4688-block 17
call   22 never executed
    $$$$$: 4688-block 18
call   23 never executed
    #####: 4689:  *stream << TestPropertiesAsJson(result, Indent(10));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4689-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4689-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4689-block  2
call    9 never executed
call   10 never executed
    $$$$$: 4689-block  3
call   11 never executed
    $$$$$: 4689-block  4
call   12 never executed
    $$$$$: 4689-block  5
    $$$$$: 4689-block  6
call   13 never executed
        -: 4690:
        -: 4691:  // Output the actual test result.
    #####: 4692:  OutputJsonTestResult(stream, result);
call    0 never executed
        -: 4693:
        -: 4694:  // Finish the test suite.
    #####: 4695:  *stream << "\n" << Indent(6) << "]\n" << Indent(4) << "}";
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4695-block  0
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4695-block  1
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4695-block  2
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4695-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 4695-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%: 4695-block  5
call   19 never executed
call   20 never executed
    $$$$$: 4695-block  6
call   21 never executed
    $$$$$: 4695-block  7
    $$$$$: 4695-block  8
call   22 never executed
    #####: 4696:}
        -: 4697:
        -: 4698:// Prints a JSON representation of a TestInfo object.
function _ZN7testing8internal25JsonUnitTestResultPrinter18OutputJsonTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4699:void JsonUnitTestResultPrinter::OutputJsonTestInfo(::std::ostream* stream,
        -: 4700:                                                   const char* test_suite_name,
        -: 4701:                                                   const TestInfo& test_info) {
    #####: 4702:  const TestResult& result = *test_info.result();
    %%%%%: 4702-block  0
call    0 never executed
    #####: 4703:  const std::string kTestsuite = "testcase";
    %%%%%: 4703-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4703-block  1
    #####: 4704:  const std::string kIndent = Indent(10);
    %%%%%: 4704-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4705:
    #####: 4706:  *stream << Indent(8) << "{\n";
    %%%%%: 4706-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4706-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4706-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4706-block  3
call    9 never executed
    $$$$$: 4706-block  4
call   10 never executed
    $$$$$: 4706-block  5
    #####: 4707:  OutputJsonKey(stream, kTestsuite, "name", test_info.name(), kIndent);
    %%%%%: 4707-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4707-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4707-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4707-block  3
call   10 never executed
    %%%%%: 4707-block  4
call   11 never executed
    $$$$$: 4707-block  5
call   12 never executed
    $$$$$: 4707-block  6
    $$$$$: 4707-block  7
    $$$$$: 4707-block  8
call   13 never executed
    $$$$$: 4707-block  9
    $$$$$: 4707-block 10
        -: 4708:
    #####: 4709:  if (test_info.value_param() != nullptr) {
    %%%%%: 4709-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4710:    OutputJsonKey(stream, kTestsuite, "value_param", test_info.value_param(),
    %%%%%: 4710-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4710-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4710-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4710-block  3
call   10 never executed
    %%%%%: 4710-block  4
call   11 never executed
    %%%%%: 4710-block  5
    $$$$$: 4710-block  6
call   12 never executed
    $$$$$: 4710-block  7
    $$$$$: 4710-block  8
    $$$$$: 4710-block  9
call   13 never executed
    $$$$$: 4710-block 10
    $$$$$: 4710-block 11
        -: 4711:                  kIndent);
        -: 4712:  }
    #####: 4713:  if (test_info.type_param() != nullptr) {
    %%%%%: 4713-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4714:    OutputJsonKey(stream, kTestsuite, "type_param", test_info.type_param(),
    %%%%%: 4714-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4714-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4714-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4714-block  3
call   10 never executed
    %%%%%: 4714-block  4
call   11 never executed
    %%%%%: 4714-block  5
    $$$$$: 4714-block  6
call   12 never executed
    $$$$$: 4714-block  7
    $$$$$: 4714-block  8
    $$$$$: 4714-block  9
call   13 never executed
    $$$$$: 4714-block 10
    $$$$$: 4714-block 11
        -: 4715:                  kIndent);
        -: 4716:  }
        -: 4717:
    #####: 4718:  OutputJsonKey(stream, kTestsuite, "file", test_info.file(), kIndent);
    %%%%%: 4718-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4718-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4718-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4718-block  3
call   10 never executed
    %%%%%: 4718-block  4
call   11 never executed
    $$$$$: 4718-block  5
call   12 never executed
    $$$$$: 4718-block  6
    $$$$$: 4718-block  7
    $$$$$: 4718-block  8
call   13 never executed
    $$$$$: 4718-block  9
    $$$$$: 4718-block 10
    #####: 4719:  OutputJsonKey(stream, kTestsuite, "line", test_info.line(), kIndent, false);
    %%%%%: 4719-block  0
call    0 never executed
    %%%%%: 4719-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4719-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4719-block  3
call    7 never executed
    $$$$$: 4719-block  4
call    8 never executed
    $$$$$: 4719-block  5
    $$$$$: 4719-block  6
    #####: 4720:  if (GTEST_FLAG_GET(list_tests)) {
    %%%%%: 4720-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4721:    *stream << "\n" << Indent(8) << "}";
    %%%%%: 4721-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4721-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4721-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4721-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4721-block  4
call   12 never executed
    $$$$$: 4721-block  5
call   13 never executed
    $$$$$: 4721-block  6
    #####: 4722:    return;
        -: 4723:  } else {
    #####: 4724:    *stream << ",\n";
    %%%%%: 4724-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4725:  }
        -: 4726:
    #####: 4727:  OutputJsonKey(stream, kTestsuite, "status",
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4727-block  0
    %%%%%: 4727-block  1
    %%%%%: 4727-block  2
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 4727-block  3
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 4727-block  4
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 4727-block  5
call   11 never executed
    %%%%%: 4727-block  6
call   12 never executed
    %%%%%: 4727-block  7
    $$$$$: 4727-block  8
call   13 never executed
    $$$$$: 4727-block  9
    $$$$$: 4727-block 10
    $$$$$: 4727-block 11
call   14 never executed
    $$$$$: 4727-block 12
    $$$$$: 4727-block 13
    #####: 4728:                test_info.should_run() ? "RUN" : "NOTRUN", kIndent);
    %%%%%: 4728-block  0
call    0 never executed
    #####: 4729:  OutputJsonKey(stream, kTestsuite, "result",
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4729-block  0
    %%%%%: 4729-block  1
    %%%%%: 4729-block  2
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 4729-block  3
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 4729-block  4
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 4729-block  5
call   11 never executed
    %%%%%: 4729-block  6
call   12 never executed
    $$$$$: 4729-block  7
call   13 never executed
    $$$$$: 4729-block  8
    $$$$$: 4729-block  9
    $$$$$: 4729-block 10
call   14 never executed
    $$$$$: 4729-block 11
    $$$$$: 4729-block 12
    #####: 4730:                test_info.should_run()
    %%%%%: 4730-block  0
call    0 never executed
    #####: 4731:                    ? (result.Skipped() ? "SKIPPED" : "COMPLETED")
    %%%%%: 4731-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4731-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 4731-block  2
    %%%%%: 4731-block  3
        -: 4732:                    : "SUPPRESSED",
        -: 4733:                kIndent);
    #####: 4734:  OutputJsonKey(stream, kTestsuite, "timestamp",
    %%%%%: 4734-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4734-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4734-block  2
call    6 never executed
    $$$$$: 4734-block  3
call    7 never executed
    $$$$$: 4734-block  4
    $$$$$: 4734-block  5
    #####: 4735:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
    %%%%%: 4735-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4735-block  1
call    4 never executed
    $$$$$: 4735-block  2
call    5 never executed
    $$$$$: 4735-block  3
        -: 4736:                kIndent);
    #####: 4737:  OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 4737-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4737-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4737-block  2
call    6 never executed
    $$$$$: 4737-block  3
call    7 never executed
    $$$$$: 4737-block  4
    $$$$$: 4737-block  5
    #####: 4738:                FormatTimeInMillisAsDuration(result.elapsed_time()), kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4738-block  0
call    4 never executed
    $$$$$: 4738-block  1
call    5 never executed
    $$$$$: 4738-block  2
    #####: 4739:  OutputJsonKey(stream, kTestsuite, "classname", test_suite_name, kIndent,
    %%%%%: 4739-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4739-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4739-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4739-block  3
call    9 never executed
    %%%%%: 4739-block  4
call   10 never executed
    $$$$$: 4739-block  5
call   11 never executed
    $$$$$: 4739-block  6
    $$$$$: 4739-block  7
    $$$$$: 4739-block  8
call   12 never executed
    $$$$$: 4739-block  9
    $$$$$: 4739-block 10
        -: 4740:                false);
    #####: 4741:  *stream << TestPropertiesAsJson(result, kIndent);
    %%%%%: 4741-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4741-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4741-block  2
call    6 never executed
    $$$$$: 4741-block  3
call    7 never executed
    $$$$$: 4741-block  4
        -: 4742:
    #####: 4743:  OutputJsonTestResult(stream, result);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4744:}
    %%%%%: 4744-block  0
    %%%%%: 4744-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 4744-block  2
    %%%%%: 4744-block  3
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    $$$$$: 4744-block  4
call    6 never executed
    $$$$$: 4744-block  5
call    7 never executed
        -: 4745:
function _ZN7testing8internal25JsonUnitTestResultPrinter20OutputJsonTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4746:void JsonUnitTestResultPrinter::OutputJsonTestResult(::std::ostream* stream,
        -: 4747:                                                     const TestResult& result) {
    #####: 4748:  const std::string kIndent = Indent(10);
    %%%%%: 4748-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4749:
    #####: 4750:  int failures = 0;
    #####: 4751:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4751-block  0
    %%%%%: 4751-block  1
    %%%%%: 4751-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4752:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4752-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4753:    if (part.failed()) {
    %%%%%: 4753-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4754:      *stream << ",\n";
    %%%%%: 4754-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4755:      if (++failures == 1) {
    %%%%%: 4755-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 4756:        *stream << kIndent << "\""
        -: 4757:                << "failures"
    #####: 4758:                << "\": [\n";
    %%%%%: 4758-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4758-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4758-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4758-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
        -: 4759:      }
        -: 4760:      const std::string location =
        -: 4761:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4762:                                                          part.line_number());
    %%%%%: 4762-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 4763:      const std::string message = EscapeJson(location + "\n" + part.message());
    %%%%%: 4763-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4763-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4763-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4763-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4763-block  4
call   12 never executed
    $$$$$: 4763-block  5
call   13 never executed
    $$$$$: 4763-block  6
    $$$$$: 4763-block  7
        -: 4764:      *stream << kIndent << "  {\n"
        -: 4765:              << kIndent << "    \"failure\": \"" << message << "\",\n"
        -: 4766:              << kIndent << "    \"type\": \"\"\n"
    #####: 4767:              << kIndent << "  }";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4767-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4767-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4767-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4767-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4767-block  4
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 4767-block  5
call   18 never executed
branch 19 never executed (fallthrough)
branch 20 never executed (throw)
    %%%%%: 4767-block  6
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%: 4767-block  7
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%: 4767-block  8
call   27 never executed
branch 28 never executed (fallthrough)
branch 29 never executed (throw)
    #####: 4768:    }
    %%%%%: 4768-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4768-block  1
call    2 never executed
    $$$$$: 4768-block  2
call    3 never executed
        -: 4769:  }
        -: 4770:
    #####: 4771:  if (failures > 0) *stream << "\n" << kIndent << "]";
    %%%%%: 4771-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4771-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 4771-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 4771-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    #####: 4772:  *stream << "\n" << Indent(8) << "}";
    %%%%%: 4772-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4772-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4772-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4772-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4772-block  4
call   12 never executed
    $$$$$: 4772-block  5
call   13 never executed
    $$$$$: 4772-block  6
    #####: 4773:}
call    0 never executed
    $$$$$: 4773-block  0
call    1 never executed
        -: 4774:
        -: 4775:// Prints an JSON representation of a TestSuite object
function _ZN7testing8internal25JsonUnitTestResultPrinter18PrintJsonTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4776:void JsonUnitTestResultPrinter::PrintJsonTestSuite(
    %%%%%: 4776-block  0
        -: 4777:    std::ostream* stream, const TestSuite& test_suite) {
    #####: 4778:  const std::string kTestsuite = "testsuite";
    %%%%%: 4778-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4778-block  1
    #####: 4779:  const std::string kIndent = Indent(6);
    %%%%%: 4779-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4780:
    #####: 4781:  *stream << Indent(4) << "{\n";
    %%%%%: 4781-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4781-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4781-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4781-block  3
call    9 never executed
    $$$$$: 4781-block  4
call   10 never executed
    $$$$$: 4781-block  5
    #####: 4782:  OutputJsonKey(stream, kTestsuite, "name", test_suite.name(), kIndent);
    %%%%%: 4782-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4782-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4782-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4782-block  3
call   10 never executed
    %%%%%: 4782-block  4
call   11 never executed
    $$$$$: 4782-block  5
call   12 never executed
    $$$$$: 4782-block  6
    $$$$$: 4782-block  7
    $$$$$: 4782-block  8
call   13 never executed
    $$$$$: 4782-block  9
    $$$$$: 4782-block 10
    #####: 4783:  OutputJsonKey(stream, kTestsuite, "tests", test_suite.reportable_test_count(),
    %%%%%: 4783-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4783-block  1
    %%%%%: 4783-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4783-block  3
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4783-block  4
call    9 never executed
    $$$$$: 4783-block  5
call   10 never executed
    $$$$$: 4783-block  6
    $$$$$: 4783-block  7
        -: 4784:                kIndent);
    #####: 4785:  if (!GTEST_FLAG_GET(list_tests)) {
    %%%%%: 4785-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4786:    OutputJsonKey(stream, kTestsuite, "failures",
    %%%%%: 4786-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4786-block  1
    %%%%%: 4786-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4786-block  3
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4786-block  4
call    9 never executed
    $$$$$: 4786-block  5
call   10 never executed
    $$$$$: 4786-block  6
    $$$$$: 4786-block  7
        -: 4787:                  test_suite.failed_test_count(), kIndent);
    #####: 4788:    OutputJsonKey(stream, kTestsuite, "disabled",
    %%%%%: 4788-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4788-block  1
    %%%%%: 4788-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4788-block  3
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4788-block  4
call    9 never executed
    %%%%%: 4788-block  5
    $$$$$: 4788-block  6
call   10 never executed
    $$$$$: 4788-block  7
    $$$$$: 4788-block  8
        -: 4789:                  test_suite.reportable_disabled_test_count(), kIndent);
    #####: 4790:    OutputJsonKey(stream, kTestsuite, "errors", 0, kIndent);
    %%%%%: 4790-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4790-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4790-block  2
call    6 never executed
    $$$$$: 4790-block  3
call    7 never executed
    $$$$$: 4790-block  4
    $$$$$: 4790-block  5
    #####: 4791:    OutputJsonKey(
    %%%%%: 4791-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4791-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4791-block  2
call    6 never executed
    $$$$$: 4791-block  3
call    7 never executed
    $$$$$: 4791-block  4
    $$$$$: 4791-block  5
        -: 4792:        stream, kTestsuite, "timestamp",
    #####: 4793:        FormatEpochTimeInMillisAsRFC3339(test_suite.start_timestamp()),
    %%%%%: 4793-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4793-block  1
call    4 never executed
    $$$$$: 4793-block  2
call    5 never executed
    $$$$$: 4793-block  3
        -: 4794:        kIndent);
    #####: 4795:    OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 4795-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4795-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4795-block  2
call    6 never executed
    $$$$$: 4795-block  3
call    7 never executed
    $$$$$: 4795-block  4
    $$$$$: 4795-block  5
    #####: 4796:                  FormatTimeInMillisAsDuration(test_suite.elapsed_time()),
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4796-block  0
call    4 never executed
    $$$$$: 4796-block  1
call    5 never executed
    $$$$$: 4796-block  2
        -: 4797:                  kIndent, false);
    #####: 4798:    *stream << TestPropertiesAsJson(test_suite.ad_hoc_test_result(), kIndent)
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4798-block  0
call    3 never executed
    $$$$$: 4798-block  1
call    4 never executed
    $$$$$: 4798-block  2
    #####: 4799:            << ",\n";
call    0 never executed
    %%%%%: 4799-block  0
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4799-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
        -: 4800:  }
        -: 4801:
    #####: 4802:  *stream << kIndent << "\"" << kTestsuite << "\": [\n";
    %%%%%: 4802-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4802-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4802-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4802-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
        -: 4803:
    #####: 4804:  bool comma = false;
    #####: 4805:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4805-block  0
    %%%%%: 4805-block  1
    %%%%%: 4805-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4806:    if (test_suite.GetTestInfo(i)->is_reportable()) {
    %%%%%: 4806-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4806-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4807:      if (comma) {
    %%%%%: 4807-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4808:        *stream << ",\n";
    %%%%%: 4808-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4809:      } else {
    #####: 4810:        comma = true;
    %%%%%: 4810-block  0
        -: 4811:      }
    #####: 4812:      OutputJsonTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4812-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4812-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
        -: 4813:    }
        -: 4814:  }
    #####: 4815:  *stream << "\n" << kIndent << "]\n" << Indent(4) << "}";
    %%%%%: 4815-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4815-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4815-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4815-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4815-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4815-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 4815-block  6
call   18 never executed
    $$$$$: 4815-block  7
call   19 never executed
    $$$$$: 4815-block  8
    #####: 4816:}
call    0 never executed
call    1 never executed
    $$$$$: 4816-block  0
call    2 never executed
    $$$$$: 4816-block  1
call    3 never executed
        -: 4817:
        -: 4818:// Prints a JSON summary of unit_test to output stream out.
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4819:void JsonUnitTestResultPrinter::PrintJsonUnitTest(std::ostream* stream,
    %%%%%: 4819-block  0
        -: 4820:                                                  const UnitTest& unit_test) {
    #####: 4821:  const std::string kTestsuites = "testsuites";
    %%%%%: 4821-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4821-block  1
    #####: 4822:  const std::string kIndent = Indent(2);
    %%%%%: 4822-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4823:  *stream << "{\n";
    %%%%%: 4823-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4824:
    #####: 4825:  OutputJsonKey(stream, kTestsuites, "tests", unit_test.reportable_test_count(),
    %%%%%: 4825-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4825-block  1
    %%%%%: 4825-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4825-block  3
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4825-block  4
call    9 never executed
    $$$$$: 4825-block  5
call   10 never executed
    $$$$$: 4825-block  6
    $$$$$: 4825-block  7
        -: 4826:                kIndent);
    #####: 4827:  OutputJsonKey(stream, kTestsuites, "failures", unit_test.failed_test_count(),
    %%%%%: 4827-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4827-block  1
    %%%%%: 4827-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4827-block  3
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4827-block  4
call    9 never executed
    $$$$$: 4827-block  5
call   10 never executed
    $$$$$: 4827-block  6
    $$$$$: 4827-block  7
        -: 4828:                kIndent);
    #####: 4829:  OutputJsonKey(stream, kTestsuites, "disabled",
    %%%%%: 4829-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4829-block  1
    %%%%%: 4829-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4829-block  3
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4829-block  4
call    9 never executed
    %%%%%: 4829-block  5
    $$$$$: 4829-block  6
call   10 never executed
    $$$$$: 4829-block  7
    $$$$$: 4829-block  8
        -: 4830:                unit_test.reportable_disabled_test_count(), kIndent);
    #####: 4831:  OutputJsonKey(stream, kTestsuites, "errors", 0, kIndent);
    %%%%%: 4831-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4831-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4831-block  2
call    6 never executed
    $$$$$: 4831-block  3
call    7 never executed
    $$$$$: 4831-block  4
    $$$$$: 4831-block  5
    #####: 4832:  if (GTEST_FLAG_GET(shuffle)) {
    %%%%%: 4832-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4833:    OutputJsonKey(stream, kTestsuites, "random_seed", unit_test.random_seed(),
    %%%%%: 4833-block  0
call    0 never executed
    %%%%%: 4833-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4833-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4833-block  3
call    7 never executed
    %%%%%: 4833-block  4
    $$$$$: 4833-block  5
call    8 never executed
    $$$$$: 4833-block  6
    $$$$$: 4833-block  7
        -: 4834:                  kIndent);
        -: 4835:  }
    #####: 4836:  OutputJsonKey(stream, kTestsuites, "timestamp",
    %%%%%: 4836-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4836-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4836-block  2
call    6 never executed
    $$$$$: 4836-block  3
call    7 never executed
    $$$$$: 4836-block  4
    $$$$$: 4836-block  5
    #####: 4837:                FormatEpochTimeInMillisAsRFC3339(unit_test.start_timestamp()),
    %%%%%: 4837-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4837-block  1
call    4 never executed
    $$$$$: 4837-block  2
call    5 never executed
    $$$$$: 4837-block  3
        -: 4838:                kIndent);
    #####: 4839:  OutputJsonKey(stream, kTestsuites, "time",
    %%%%%: 4839-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4839-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4839-block  2
call    6 never executed
    $$$$$: 4839-block  3
call    7 never executed
    $$$$$: 4839-block  4
    $$$$$: 4839-block  5
    #####: 4840:                FormatTimeInMillisAsDuration(unit_test.elapsed_time()), kIndent,
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4840-block  0
call    4 never executed
    $$$$$: 4840-block  1
call    5 never executed
    $$$$$: 4840-block  2
        -: 4841:                false);
        -: 4842:
    #####: 4843:  *stream << TestPropertiesAsJson(unit_test.ad_hoc_test_result(), kIndent)
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4843-block  0
call    3 never executed
    $$$$$: 4843-block  1
call    4 never executed
    $$$$$: 4843-block  2
    #####: 4844:          << ",\n";
call    0 never executed
    %%%%%: 4844-block  0
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4844-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
        -: 4845:
    #####: 4846:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
    %%%%%: 4846-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4846-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4846-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4846-block  3
call    9 never executed
    %%%%%: 4846-block  4
call   10 never executed
    $$$$$: 4846-block  5
call   11 never executed
    $$$$$: 4846-block  6
    $$$$$: 4846-block  7
    $$$$$: 4846-block  8
call   12 never executed
    $$$$$: 4846-block  9
    $$$$$: 4846-block 10
    #####: 4847:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
    %%%%%: 4847-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4847-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4847-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4847-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
        -: 4848:
    #####: 4849:  bool comma = false;
    #####: 4850:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4850-block  0
    %%%%%: 4850-block  1
    %%%%%: 4850-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4851:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0) {
    %%%%%: 4851-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4851-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4851-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 4852:      if (comma) {
    %%%%%: 4852-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4853:        *stream << ",\n";
    %%%%%: 4853-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4854:      } else {
    #####: 4855:        comma = true;
    %%%%%: 4855-block  0
        -: 4856:      }
    #####: 4857:      PrintJsonTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4857-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4857-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 4858:    }
        -: 4859:  }
        -: 4860:
        -: 4861:  // If there was a test failure outside of one of the test suites (like in a
        -: 4862:  // test environment) include that in the output.
    #####: 4863:  if (unit_test.ad_hoc_test_result().Failed()) {
    %%%%%: 4863-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4863-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4864:    if (comma) {
    %%%%%: 4864-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4865:      *stream << ",\n";
    %%%%%: 4865-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4866:    }
    #####: 4867:    OutputJsonTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());
    %%%%%: 4867-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 4868:  }
        -: 4869:
        -: 4870:  *stream << "\n"
        -: 4871:          << kIndent << "]\n"
    #####: 4872:          << "}\n";
    %%%%%: 4872-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4872-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4872-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4872-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 4873:}
    %%%%%: 4873-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4873-block  1
call    2 never executed
    $$$$$: 4873-block  2
call    3 never executed
        -: 4874:
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonTestListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4875:void JsonUnitTestResultPrinter::PrintJsonTestList(
    %%%%%: 4875-block  0
        -: 4876:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4877:  const std::string kTestsuites = "testsuites";
    %%%%%: 4877-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4877-block  1
    #####: 4878:  const std::string kIndent = Indent(2);
    %%%%%: 4878-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4879:  *stream << "{\n";
    %%%%%: 4879-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4880:  int total_tests = 0;
    #####: 4881:  for (auto test_suite : test_suites) {
    %%%%%: 4881-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4881-block  1
call    2 never executed
    %%%%%: 4881-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 4882:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
        -: 4883:  }
    #####: 4884:  OutputJsonKey(stream, kTestsuites, "tests", total_tests, kIndent);
    %%%%%: 4884-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4884-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4884-block  2
call    6 never executed
    %%%%%: 4884-block  3
    $$$$$: 4884-block  4
call    7 never executed
    $$$$$: 4884-block  5
    $$$$$: 4884-block  6
        -: 4885:
    #####: 4886:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
    %%%%%: 4886-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4886-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4886-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4886-block  3
call    9 never executed
    %%%%%: 4886-block  4
call   10 never executed
    $$$$$: 4886-block  5
call   11 never executed
    $$$$$: 4886-block  6
    $$$$$: 4886-block  7
    $$$$$: 4886-block  8
call   12 never executed
    $$$$$: 4886-block  9
    $$$$$: 4886-block 10
    #####: 4887:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
    %%%%%: 4887-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4887-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4887-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4887-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
        -: 4888:
    #####: 4889:  for (size_t i = 0; i < test_suites.size(); ++i) {
    %%%%%: 4889-block  0
    %%%%%: 4889-block  1
    %%%%%: 4889-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4890:    if (i != 0) {
    %%%%%: 4890-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4891:      *stream << ",\n";
    %%%%%: 4891-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4892:    }
    #####: 4893:    PrintJsonTestSuite(stream, *test_suites[i]);
    %%%%%: 4893-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 4894:  }
        -: 4895:
        -: 4896:  *stream << "\n"
        -: 4897:          << kIndent << "]\n"
    #####: 4898:          << "}\n";
    %%%%%: 4898-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4898-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4898-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4898-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 4899:}
    %%%%%: 4899-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4899-block  1
call    2 never executed
    $$$$$: 4899-block  2
call    3 never executed
        -: 4900:// Produces a string representing the test properties in a result as
        -: 4901:// a JSON dictionary.
function _ZN7testing8internal25JsonUnitTestResultPrinter20TestPropertiesAsJsonERKNS_10TestResultERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4902:std::string JsonUnitTestResultPrinter::TestPropertiesAsJson(
        -: 4903:    const TestResult& result, const std::string& indent) {
    #####: 4904:  Message attributes;
    %%%%%: 4904-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4905:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4905-block  0
    %%%%%: 4905-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4906:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4906-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4907:    attributes << ",\n"
    %%%%%: 4907-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4908:               << indent << "\"" << property.key() << "\": "
    %%%%%: 4908-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4908-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4908-block  2
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4908-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    $$$$$: 4908-block  4
    #####: 4909:               << "\"" << EscapeJson(property.value()) << "\"";
    %%%%%: 4909-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4909-block  1
    %%%%%: 4909-block  2
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4909-block  3
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4909-block  4
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4909-block  5
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 4909-block  6
call   16 never executed
call   17 never executed
    %%%%%: 4909-block  7
    $$$$$: 4909-block  8
call   18 never executed
    $$$$$: 4909-block  9
call   19 never executed
    $$$$$: 4909-block 10
    $$$$$: 4909-block 11
    $$$$$: 4909-block 12
        -: 4910:  }
    #####: 4911:  return attributes.GetString();
    %%%%%: 4911-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4911-block  1
    #####: 4912:}
    %%%%%: 4912-block  0
call    0 never executed
    $$$$$: 4912-block  1
call    1 never executed
        -: 4913:
        -: 4914:// End JsonUnitTestResultPrinter
        -: 4915:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 4916:
        -: 4917:#if GTEST_CAN_STREAM_RESULTS_
        -: 4918:
        -: 4919:// Checks if str contains '=', '&', '%' or '\n' characters. If yes,
        -: 4920:// replaces them by "%xx" where xx is their hexadecimal value. For
        -: 4921:// example, replaces "=" with "%3D".  This algorithm is O(strlen(str))
        -: 4922:// in both time and space -- important as the input str may contain an
        -: 4923:// arbitrarily long test failure message and stack trace.
        -: 4924:std::string StreamingListener::UrlEncode(const char* str) {
        -: 4925:  std::string result;
        -: 4926:  result.reserve(strlen(str) + 1);
        -: 4927:  for (char ch = *str; ch != '\0'; ch = *++str) {
        -: 4928:    switch (ch) {
        -: 4929:      case '%':
        -: 4930:      case '=':
        -: 4931:      case '&':
        -: 4932:      case '\n':
        -: 4933:        result.push_back('%');
        -: 4934:        result.append(String::FormatByte(static_cast<unsigned char>(ch)));
        -: 4935:        break;
        -: 4936:      default:
        -: 4937:        result.push_back(ch);
        -: 4938:        break;
        -: 4939:    }
        -: 4940:  }
        -: 4941:  return result;
        -: 4942:}
        -: 4943:
        -: 4944:void StreamingListener::SocketWriter::MakeConnection() {
        -: 4945:  GTEST_CHECK_(sockfd_ == -1)
        -: 4946:      << "MakeConnection() can't be called when there is already a connection.";
        -: 4947:
        -: 4948:  addrinfo hints;
        -: 4949:  memset(&hints, 0, sizeof(hints));
        -: 4950:  hints.ai_family = AF_UNSPEC;  // To allow both IPv4 and IPv6 addresses.
        -: 4951:  hints.ai_socktype = SOCK_STREAM;
        -: 4952:  addrinfo* servinfo = nullptr;
        -: 4953:
        -: 4954:  // Use the getaddrinfo() to get a linked list of IP addresses for
        -: 4955:  // the given host name.
        -: 4956:  const int error_num =
        -: 4957:      getaddrinfo(host_name_.c_str(), port_num_.c_str(), &hints, &servinfo);
        -: 4958:  if (error_num != 0) {
        -: 4959:    GTEST_LOG_(WARNING) << "stream_result_to: getaddrinfo() failed: "
        -: 4960:                        << gai_strerror(error_num);
        -: 4961:  }
        -: 4962:
        -: 4963:  // Loop through all the results and connect to the first we can.
        -: 4964:  for (addrinfo* cur_addr = servinfo; sockfd_ == -1 && cur_addr != nullptr;
        -: 4965:       cur_addr = cur_addr->ai_next) {
        -: 4966:    sockfd_ = socket(cur_addr->ai_family, cur_addr->ai_socktype,
        -: 4967:                     cur_addr->ai_protocol);
        -: 4968:    if (sockfd_ != -1) {
        -: 4969:      // Connect the client socket to the server socket.
        -: 4970:      if (connect(sockfd_, cur_addr->ai_addr, cur_addr->ai_addrlen) == -1) {
        -: 4971:        close(sockfd_);
        -: 4972:        sockfd_ = -1;
        -: 4973:      }
        -: 4974:    }
        -: 4975:  }
        -: 4976:
        -: 4977:  freeaddrinfo(servinfo);  // all done with this structure
        -: 4978:
        -: 4979:  if (sockfd_ == -1) {
        -: 4980:    GTEST_LOG_(WARNING) << "stream_result_to: failed to connect to "
        -: 4981:                        << host_name_ << ":" << port_num_;
        -: 4982:  }
        -: 4983:}
        -: 4984:
        -: 4985:// End of class Streaming Listener
        -: 4986:#endif  // GTEST_CAN_STREAM_RESULTS__
        -: 4987:
        -: 4988:// class OsStackTraceGetter
        -: 4989:
        -: 4990:const char* const OsStackTraceGetterInterface::kElidedFramesMarker =
        -: 4991:    "... " GTEST_NAME_ " internal frames ...";
        -: 4992:
function _ZN7testing8internal18OsStackTraceGetter17CurrentStackTraceB5cxx11Eii called 7 returned 100% blocks executed 78%
        7: 4993:std::string OsStackTraceGetter::CurrentStackTrace(int max_depth, int skip_count)
        7: 4993-block  0
        -: 4994:    GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 4995:#ifdef GTEST_HAS_ABSL
        -: 4996:  std::string result;
        -: 4997:
        -: 4998:  if (max_depth <= 0) {
        -: 4999:    return result;
        -: 5000:  }
        -: 5001:
        -: 5002:  max_depth = std::min(max_depth, kMaxStackTraceDepth);
        -: 5003:
        -: 5004:  std::vector<void*> raw_stack(max_depth);
        -: 5005:  // Skips the frames requested by the caller, plus this function.
        -: 5006:  const int raw_stack_size =
        -: 5007:      absl::GetStackTrace(&raw_stack[0], max_depth, skip_count + 1);
        -: 5008:
        -: 5009:  void* caller_frame = nullptr;
        -: 5010:  {
        -: 5011:    MutexLock lock(&mutex_);
        -: 5012:    caller_frame = caller_frame_;
        -: 5013:  }
        -: 5014:
        -: 5015:  for (int i = 0; i < raw_stack_size; ++i) {
        -: 5016:    if (raw_stack[i] == caller_frame &&
        -: 5017:        !GTEST_FLAG_GET(show_internal_stack_frames)) {
        -: 5018:      // Add a marker to the trace and stop adding frames.
        -: 5019:      absl::StrAppend(&result, kElidedFramesMarker, "\n");
        -: 5020:      break;
        -: 5021:    }
        -: 5022:
        -: 5023:    char tmp[1024];
        -: 5024:    const char* symbol = "(unknown)";
        -: 5025:    if (absl::Symbolize(raw_stack[i], tmp, sizeof(tmp))) {
        -: 5026:      symbol = tmp;
        -: 5027:    }
        -: 5028:
        -: 5029:    char line[1024];
        -: 5030:    snprintf(line, sizeof(line), "  %p: %s\n", raw_stack[i], symbol);
        -: 5031:    result += line;
        -: 5032:  }
        -: 5033:
        -: 5034:  return result;
        -: 5035:
        -: 5036:#else   // !GTEST_HAS_ABSL
        -: 5037:  static_cast<void>(max_depth);
        -: 5038:  static_cast<void>(skip_count);
       14: 5039:  return "";
        7: 5039-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 5039-block  1
        7: 5039-block  2
        -: 5040:#endif  // GTEST_HAS_ABSL
        -: 5041:}
        -: 5042:
function _ZN7testing8internal18OsStackTraceGetter16UponLeavingGTestEv called 235 returned 100% blocks executed 100%
      235: 5043:void OsStackTraceGetter::UponLeavingGTest() GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 5044:#ifdef GTEST_HAS_ABSL
        -: 5045:  void* caller_frame = nullptr;
        -: 5046:  if (absl::GetStackTrace(&caller_frame, 1, 3) <= 0) {
        -: 5047:    caller_frame = nullptr;
        -: 5048:  }
        -: 5049:
        -: 5050:  MutexLock lock(&mutex_);
        -: 5051:  caller_frame_ = caller_frame;
        -: 5052:#endif  // GTEST_HAS_ABSL
      235: 5053:}
        -: 5054:
        -: 5055:#ifdef GTEST_HAS_DEATH_TEST
        -: 5056:// A helper class that creates the premature-exit file in its
        -: 5057:// constructor and deletes the file in its destructor.
        -: 5058:class ScopedPrematureExitFile {
        -: 5059: public:
function _ZN7testing8internal23ScopedPrematureExitFileC1EPKc called 1 returned 100% blocks executed 53%
        1: 5060:  explicit ScopedPrematureExitFile(const char* premature_exit_filepath)
       2*: 5061:      : premature_exit_filepath_(
        1: 5061-block  0
        1: 5061-block  1
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5061-block  2
        1: 5061-block  3
        1: 5061-block  4
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$: 5061-block  5
call    5 never executed
        -: 5062:            premature_exit_filepath ? premature_exit_filepath : "") {
        -: 5063:    // If a path to the premature-exit file is specified...
        1: 5064:    if (!premature_exit_filepath_.empty()) {
        1: 5064-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 5065:      // create the file with a single "0" character in it.  I/O
        -: 5066:      // errors are ignored as there's nothing better we can do and we
        -: 5067:      // don't want to fail the test because of this.
    #####: 5068:      FILE* pfile = posix::FOpen(premature_exit_filepath_.c_str(), "w");
    %%%%%: 5068-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 5069:      fwrite("0", 1, 1, pfile);
    %%%%%: 5069-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5070:      fclose(pfile);
    %%%%%: 5070-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5071:    }
        1: 5072:  }
        1: 5072-block  0
    $$$$$: 5072-block  1
call    0 never executed
        -: 5073:
function _ZN7testing8internal23ScopedPrematureExitFileD1Ev called 1 returned 100% blocks executed 27%
        2: 5074:  ~ScopedPrematureExitFile() {
        -: 5075:#ifndef GTEST_OS_ESP8266
        1: 5076:    if (!premature_exit_filepath_.empty()) {
        1: 5076-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5077:      int retval = remove(premature_exit_filepath_.c_str());
    %%%%%: 5077-block  0
call    0 never executed
call    1 never executed
    #####: 5078:      if (retval) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5079:        GTEST_LOG_(ERROR) << "Failed to remove premature exit filepath \""
    %%%%%: 5079-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5080:                          << premature_exit_filepath_ << "\" with error "
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5081:                          << retval;
call    0 never executed
        -: 5082:      }
        -: 5083:    }
        -: 5084:#endif
        1: 5085:  }
        1: 5085-block  0
call    0 returned 1
        -: 5086:
        -: 5087: private:
        -: 5088:  const std::string premature_exit_filepath_;
        -: 5089:
        -: 5090:  ScopedPrematureExitFile(const ScopedPrematureExitFile&) = delete;
        -: 5091:  ScopedPrematureExitFile& operator=(const ScopedPrematureExitFile&) = delete;
        -: 5092:};
        -: 5093:#endif  // GTEST_HAS_DEATH_TEST
        -: 5094:
        -: 5095:}  // namespace internal
        -: 5096:
        -: 5097:// class TestEventListeners
        -: 5098:
function _ZN7testing18TestEventListenersC2Ev called 1 returned 100% blocks executed 100%
        1: 5099:TestEventListeners::TestEventListeners()
        1: 5100:    : repeater_(new internal::TestEventRepeater()),
        1: 5100-block  0
call    0 returned 1
call    1 returned 1
        1: 5101:      default_result_printer_(nullptr),
        1: 5102:      default_xml_generator_(nullptr) {}
        -: 5103:
function _ZN7testing18TestEventListenersD2Ev called 0 returned 0% blocks executed 0%
    #####: 5104:TestEventListeners::~TestEventListeners() { delete repeater_; }
    %%%%%: 5104-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5104-block  1
call    2 never executed
        -: 5105:
        -: 5106:// Returns the standard listener responsible for the default console
        -: 5107:// output.  Can be removed from the listeners list to shut down default
        -: 5108:// console output.  Note that removing this object from the listener list
        -: 5109:// with Release transfers its ownership to the user.
function _ZN7testing18TestEventListeners6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 5110:void TestEventListeners::Append(TestEventListener* listener) {
        1: 5111:  repeater_->Append(listener);
        1: 5111-block  0
call    0 returned 1
        1: 5112:}
        -: 5113:
        -: 5114:// Removes the given event listener from the list and returns it.  It then
        -: 5115:// becomes the caller's responsibility to delete the listener. Returns
        -: 5116:// NULL if the listener is not found in the list.
function _ZN7testing18TestEventListeners7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 71%
        1: 5117:TestEventListener* TestEventListeners::Release(TestEventListener* listener) {
        1: 5118:  if (listener == default_result_printer_)
        1: 5118-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5119:    default_result_printer_ = nullptr;
        1: 5119-block  0
    #####: 5120:  else if (listener == default_xml_generator_)
    %%%%%: 5120-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5121:    default_xml_generator_ = nullptr;
    %%%%%: 5121-block  0
        1: 5122:  return repeater_->Release(listener);
        1: 5122-block  0
call    0 returned 1
        -: 5123:}
        -: 5124:
        -: 5125:// Returns repeater that broadcasts the TestEventListener events to all
        -: 5126:// subscribers.
function _ZN7testing18TestEventListeners8repeaterEv called 61 returned 100% blocks executed 100%
       61: 5127:TestEventListener* TestEventListeners::repeater() { return repeater_; }
       61: 5127-block  0
        -: 5128:
        -: 5129:// Sets the default_result_printer attribute to the provided listener.
        -: 5130:// The listener is also added to the listener list and previous
        -: 5131:// default_result_printer is removed from it and deleted. The listener can
        -: 5132:// also be NULL in which case it will not be added to the list. Does
        -: 5133:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners23SetDefaultResultPrinterEPNS_17TestEventListenerE called 1 returned 100% blocks executed 86%
        1: 5134:void TestEventListeners::SetDefaultResultPrinter(TestEventListener* listener) {
        1: 5135:  if (default_result_printer_ != listener) {
        1: 5135-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 5136:    // It is an error to pass this method a listener that is already in the
        -: 5137:    // list.
       1*: 5138:    delete Release(default_result_printer_);
        1: 5138-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 5138-block  1
call    3 never executed
        1: 5139:    default_result_printer_ = listener;
        1: 5140:    if (listener != nullptr) Append(listener);
        1: 5140-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5140-block  1
call    2 returned 1
        -: 5141:  }
        1: 5142:}
        -: 5143:
        -: 5144:// Sets the default_xml_generator attribute to the provided listener.  The
        -: 5145:// listener is also added to the listener list and previous
        -: 5146:// default_xml_generator is removed from it and deleted. The listener can
        -: 5147:// also be NULL in which case it will not be added to the list. Does
        -: 5148:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners22SetDefaultXmlGeneratorEPNS_17TestEventListenerE called 0 returned 0% blocks executed 0%
    #####: 5149:void TestEventListeners::SetDefaultXmlGenerator(TestEventListener* listener) {
    #####: 5150:  if (default_xml_generator_ != listener) {
    %%%%%: 5150-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 5151:    // It is an error to pass this method a listener that is already in the
        -: 5152:    // list.
    #####: 5153:    delete Release(default_xml_generator_);
    %%%%%: 5153-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 5153-block  1
call    3 never executed
    #####: 5154:    default_xml_generator_ = listener;
    #####: 5155:    if (listener != nullptr) Append(listener);
    %%%%%: 5155-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5155-block  1
call    2 never executed
        -: 5156:  }
    #####: 5157:}
        -: 5158:
        -: 5159:// Controls whether events will be forwarded by the repeater to the
        -: 5160:// listeners in the list.
function _ZNK7testing18TestEventListeners22EventForwardingEnabledEv called 0 returned 0% blocks executed 0%
    #####: 5161:bool TestEventListeners::EventForwardingEnabled() const {
    #####: 5162:  return repeater_->forwarding_enabled();
    %%%%%: 5162-block  0
call    0 never executed
        -: 5163:}
        -: 5164:
function _ZN7testing18TestEventListeners23SuppressEventForwardingEb called 0 returned 0% blocks executed 0%
    #####: 5165:void TestEventListeners::SuppressEventForwarding(bool suppress) {
    #####: 5166:  repeater_->set_forwarding_enabled(!suppress);
    %%%%%: 5166-block  0
call    0 never executed
    #####: 5167:}
        -: 5168:
        -: 5169:// class UnitTest
        -: 5170:
        -: 5171:// Gets the singleton UnitTest object.  The first time this method is
        -: 5172:// called, a UnitTest object is constructed and returned.  Consecutive
        -: 5173:// calls will return the same object.
        -: 5174://
        -: 5175:// We don't protect this under mutex_ as a user is not supposed to
        -: 5176:// call this before main() starts, from which point on the return
        -: 5177:// value will never change.
function _ZN7testing8UnitTest11GetInstanceEv called 662 returned 100% blocks executed 82%
      662: 5178:UnitTest* UnitTest::GetInstance() {
        -: 5179:  // CodeGear C++Builder insists on a public destructor for the
        -: 5180:  // default implementation.  Use this implementation to keep good OO
        -: 5181:  // design with private destructor.
        -: 5182:
        -: 5183:#if defined(__BORLANDC__)
        -: 5184:  static UnitTest* const instance = new UnitTest;
        -: 5185:  return instance;
        -: 5186:#else
      662: 5187:  static UnitTest instance;
      662: 5187-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 661
        1: 5187-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 5187-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 5187-block  3
call    8 returned 1
call    9 returned 1
    $$$$$: 5187-block  4
branch 10 never executed (fallthrough)
branch 11 never executed
    $$$$$: 5187-block  5
call   12 never executed
      662: 5188:  return &instance;
      662: 5188-block  0
      662: 5188-block  1
        -: 5189:#endif  // defined(__BORLANDC__)
        -: 5190:}
        -: 5191:
        -: 5192:// Gets the number of successful test suites.
function _ZNK7testing8UnitTest27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5193:int UnitTest::successful_test_suite_count() const {
    #####: 5194:  return impl()->successful_test_suite_count();
    %%%%%: 5194-block  0
call    0 never executed
call    1 never executed
        -: 5195:}
        -: 5196:
        -: 5197:// Gets the number of failed test suites.
function _ZNK7testing8UnitTest23failed_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5198:int UnitTest::failed_test_suite_count() const {
    #####: 5199:  return impl()->failed_test_suite_count();
    %%%%%: 5199-block  0
call    0 never executed
call    1 never executed
        -: 5200:}
        -: 5201:
        -: 5202:// Gets the number of all test suites.
function _ZNK7testing8UnitTest22total_test_suite_countEv called 22 returned 100% blocks executed 100%
       22: 5203:int UnitTest::total_test_suite_count() const {
       22: 5204:  return impl()->total_test_suite_count();
       22: 5204-block  0
call    0 returned 22
call    1 returned 22
        -: 5205:}
        -: 5206:
        -: 5207:// Gets the number of all test suites that contain at least one test
        -: 5208:// that should run.
function _ZNK7testing8UnitTest23test_suite_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 5209:int UnitTest::test_suite_to_run_count() const {
        2: 5210:  return impl()->test_suite_to_run_count();
        2: 5210-block  0
call    0 returned 2
call    1 returned 2
        -: 5211:}
        -: 5212:
        -: 5213://  Legacy API is deprecated but still available
        -: 5214:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest26successful_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5215:int UnitTest::successful_test_case_count() const {
    #####: 5216:  return impl()->successful_test_suite_count();
    %%%%%: 5216-block  0
call    0 never executed
call    1 never executed
        -: 5217:}
function _ZNK7testing8UnitTest22failed_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5218:int UnitTest::failed_test_case_count() const {
    #####: 5219:  return impl()->failed_test_suite_count();
    %%%%%: 5219-block  0
call    0 never executed
call    1 never executed
        -: 5220:}
function _ZNK7testing8UnitTest21total_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5221:int UnitTest::total_test_case_count() const {
    #####: 5222:  return impl()->total_test_suite_count();
    %%%%%: 5222-block  0
call    0 never executed
call    1 never executed
        -: 5223:}
function _ZNK7testing8UnitTest22test_case_to_run_countEv called 0 returned 0% blocks executed 0%
    #####: 5224:int UnitTest::test_case_to_run_count() const {
    #####: 5225:  return impl()->test_suite_to_run_count();
    %%%%%: 5225-block  0
call    0 never executed
call    1 never executed
        -: 5226:}
        -: 5227:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5228:
        -: 5229:// Gets the number of successful tests.
function _ZNK7testing8UnitTest21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 5230:int UnitTest::successful_test_count() const {
        1: 5231:  return impl()->successful_test_count();
        1: 5231-block  0
call    0 returned 1
call    1 returned 1
        -: 5232:}
        -: 5233:
        -: 5234:// Gets the number of skipped tests.
function _ZNK7testing8UnitTest18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 5235:int UnitTest::skipped_test_count() const {
        1: 5236:  return impl()->skipped_test_count();
        1: 5236-block  0
call    0 returned 1
call    1 returned 1
        -: 5237:}
        -: 5238:
        -: 5239:// Gets the number of failed tests.
function _ZNK7testing8UnitTest17failed_test_countEv called 1 returned 100% blocks executed 100%
        1: 5240:int UnitTest::failed_test_count() const { return impl()->failed_test_count(); }
        1: 5240-block  0
call    0 returned 1
call    1 returned 1
        -: 5241:
        -: 5242:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8UnitTest30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 5243:int UnitTest::reportable_disabled_test_count() const {
        1: 5244:  return impl()->reportable_disabled_test_count();
        1: 5244-block  0
call    0 returned 1
call    1 returned 1
        -: 5245:}
        -: 5246:
        -: 5247:// Gets the number of disabled tests.
function _ZNK7testing8UnitTest19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5248:int UnitTest::disabled_test_count() const {
    #####: 5249:  return impl()->disabled_test_count();
    %%%%%: 5249-block  0
call    0 never executed
call    1 never executed
        -: 5250:}
        -: 5251:
        -: 5252:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8UnitTest21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5253:int UnitTest::reportable_test_count() const {
    #####: 5254:  return impl()->reportable_test_count();
    %%%%%: 5254-block  0
call    0 never executed
call    1 never executed
        -: 5255:}
        -: 5256:
        -: 5257:// Gets the number of all tests.
function _ZNK7testing8UnitTest16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5258:int UnitTest::total_test_count() const { return impl()->total_test_count(); }
    %%%%%: 5258-block  0
call    0 never executed
call    1 never executed
        -: 5259:
        -: 5260:// Gets the number of tests that should run.
function _ZNK7testing8UnitTest17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 5261:int UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }
        2: 5261-block  0
call    0 returned 2
call    1 returned 2
        -: 5262:
        -: 5263:// Gets the time of the test program start, in ms from the start of the
        -: 5264:// UNIX epoch.
function _ZNK7testing8UnitTest15start_timestampEv called 0 returned 0% blocks executed 0%
    #####: 5265:internal::TimeInMillis UnitTest::start_timestamp() const {
    #####: 5266:  return impl()->start_timestamp();
    %%%%%: 5266-block  0
call    0 never executed
call    1 never executed
        -: 5267:}
        -: 5268:
        -: 5269:// Gets the elapsed time, in milliseconds.
function _ZNK7testing8UnitTest12elapsed_timeEv called 1 returned 100% blocks executed 100%
        1: 5270:internal::TimeInMillis UnitTest::elapsed_time() const {
        1: 5271:  return impl()->elapsed_time();
        1: 5271-block  0
call    0 returned 1
call    1 returned 1
        -: 5272:}
        -: 5273:
        -: 5274:// Returns true if and only if the unit test passed (i.e. all test suites
        -: 5275:// passed).
function _ZNK7testing8UnitTest6PassedEv called 1 returned 100% blocks executed 100%
        1: 5276:bool UnitTest::Passed() const { return impl()->Passed(); }
        1: 5276-block  0
call    0 returned 1
call    1 returned 1
        -: 5277:
        -: 5278:// Returns true if and only if the unit test failed (i.e. some test suite
        -: 5279:// failed or something outside of all tests failed).
function _ZNK7testing8UnitTest6FailedEv called 0 returned 0% blocks executed 0%
    #####: 5280:bool UnitTest::Failed() const { return impl()->Failed(); }
    %%%%%: 5280-block  0
call    0 never executed
call    1 never executed
        -: 5281:
        -: 5282:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5283:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing8UnitTest12GetTestSuiteEi called 20 returned 100% blocks executed 100%
       20: 5284:const TestSuite* UnitTest::GetTestSuite(int i) const {
       20: 5285:  return impl()->GetTestSuite(i);
       20: 5285-block  0
call    0 returned 20
call    1 returned 20
        -: 5286:}
        -: 5287:
        -: 5288://  Legacy API is deprecated but still available
        -: 5289:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest11GetTestCaseEi called 0 returned 0% blocks executed 0%
    #####: 5290:const TestCase* UnitTest::GetTestCase(int i) const {
    #####: 5291:  return impl()->GetTestCase(i);
    %%%%%: 5291-block  0
call    0 never executed
call    1 never executed
        -: 5292:}
        -: 5293:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5294:
        -: 5295:// Returns the TestResult containing information on test failures and
        -: 5296:// properties logged outside of individual test suites.
function _ZNK7testing8UnitTest18ad_hoc_test_resultEv called 0 returned 0% blocks executed 0%
    #####: 5297:const TestResult& UnitTest::ad_hoc_test_result() const {
    #####: 5298:  return *impl()->ad_hoc_test_result();
    %%%%%: 5298-block  0
call    0 never executed
call    1 never executed
        -: 5299:}
        -: 5300:
        -: 5301:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5302:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing8UnitTest19GetMutableTestSuiteEi called 0 returned 0% blocks executed 0%
    #####: 5303:TestSuite* UnitTest::GetMutableTestSuite(int i) {
    #####: 5304:  return impl()->GetMutableSuiteCase(i);
    %%%%%: 5304-block  0
call    0 never executed
call    1 never executed
        -: 5305:}
        -: 5306:
        -: 5307:// Returns the list of event listeners that can be used to track events
        -: 5308:// inside Google Test.
function _ZN7testing8UnitTest9listenersEv called 53 returned 100% blocks executed 100%
       53: 5309:TestEventListeners& UnitTest::listeners() { return *impl()->listeners(); }
       53: 5309-block  0
call    0 returned 53
call    1 returned 53
        -: 5310:
        -: 5311:// Registers and returns a global test environment.  When a test
        -: 5312:// program is run, all global test environments will be set-up in the
        -: 5313:// order they were registered.  After all tests in the program have
        -: 5314:// finished, all global test environments will be torn-down in the
        -: 5315:// *reverse* order they were registered.
        -: 5316://
        -: 5317:// The UnitTest object takes ownership of the given environment.
        -: 5318://
        -: 5319:// We don't protect this under mutex_, as we only support calling it
        -: 5320:// from the main thread.
function _ZN7testing8UnitTest14AddEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5321:Environment* UnitTest::AddEnvironment(Environment* env) {
    #####: 5322:  if (env == nullptr) {
    %%%%%: 5322-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5323:    return nullptr;
    %%%%%: 5323-block  0
        -: 5324:  }
        -: 5325:
    #####: 5326:  impl_->environments().push_back(env);
    %%%%%: 5326-block  0
call    0 never executed
call    1 never executed
    #####: 5327:  return env;
        -: 5328:}
        -: 5329:
        -: 5330:// Adds a TestPartResult to the current TestResult object.  All Google Test
        -: 5331:// assertion macros (e.g. ASSERT_TRUE, EXPECT_EQ, etc) eventually call
        -: 5332:// this to report their results.  The user code should use the
        -: 5333:// assertion macros instead of calling this directly.
function _ZN7testing8UnitTest17AddTestPartResultENS_14TestPartResult4TypeEPKciRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESC_ called 7 returned 100% blocks executed 44%
        7: 5334:void UnitTest::AddTestPartResult(TestPartResult::Type result_type,
        -: 5335:                                 const char* file_name, int line_number,
        -: 5336:                                 const std::string& message,
        -: 5337:                                 const std::string& os_stack_trace)
        -: 5338:    GTEST_LOCK_EXCLUDED_(mutex_) {
        7: 5339:  Message msg;
        7: 5339-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 5340:  msg << message;
        7: 5340-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        -: 5341:
        7: 5342:  internal::MutexLock lock(&mutex_);
        7: 5342-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 5343:  if (!impl_->gtest_trace_stack().empty()) {
        7: 5343-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 5343-block  1
call    3 returned 7
branch  4 taken 0 (fallthrough)
branch  5 taken 7
    #####: 5344:    msg << "\n" << GTEST_NAME_ << " trace:";
    %%%%%: 5344-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5344-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5344-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 5345:
    #####: 5346:    for (size_t i = impl_->gtest_trace_stack().size(); i > 0; --i) {
    %%%%%: 5346-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5346-block  1
call    3 never executed
    %%%%%: 5346-block  2
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 5347:      const internal::TraceInfo& trace = impl_->gtest_trace_stack()[i - 1];
    %%%%%: 5347-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5347-block  1
call    3 never executed
    #####: 5348:      msg << "\n"
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5349:          << internal::FormatFileLocation(trace.file, trace.line) << " "
    %%%%%: 5349-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5349-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5349-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 5349-block  3
call    9 never executed
    $$$$$: 5349-block  4
call   10 never executed
    $$$$$: 5349-block  5
    #####: 5350:          << trace.message;
    %%%%%: 5350-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5351:    }
        -: 5352:  }
        -: 5353:
       7*: 5354:  if (os_stack_trace.c_str() != nullptr && !os_stack_trace.empty()) {
        7: 5354-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0
        7: 5354-block  1
call    3 returned 7
branch  4 taken 0 (fallthrough)
branch  5 taken 7
    %%%%%: 5354-block  2
        7: 5354-block  3
        7: 5354-block  4
branch  6 taken 0 (fallthrough)
branch  7 taken 7
    #####: 5355:    msg << internal::kStackTraceMarker << os_stack_trace;
    %%%%%: 5355-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5355-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 5356:  } else {
        7: 5357:    msg << "\n";
        7: 5357-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        -: 5358:  }
        -: 5359:
        -: 5360:  const TestPartResult result = TestPartResult(
        7: 5361:      result_type, file_name, line_number, msg.GetString().c_str());
        7: 5361-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 5361-block  1
call    3 returned 7
call    4 returned 7
branch  5 taken 7 (fallthrough)
branch  6 taken 0 (throw)
        7: 5361-block  2
call    7 returned 7
    $$$$$: 5361-block  3
call    8 never executed
    $$$$$: 5361-block  4
        7: 5362:  impl_->GetTestPartResultReporterForCurrentThread()->ReportTestPartResult(
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7: 5362-block  0
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        -: 5363:      result);
        -: 5364:
        7: 5365:  if (result_type != TestPartResult::kSuccess &&
        7: 5365-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7: 5365-block  1
branch  2 taken 7 (fallthrough)
branch  3 taken 0
        -: 5366:      result_type != TestPartResult::kSkip) {
        -: 5367:    // gtest_break_on_failure takes precedence over
        -: 5368:    // gtest_throw_on_failure.  This allows a user to set the latter
        -: 5369:    // in the code (perhaps in order to use Google Test assertions
        -: 5370:    // with another testing framework) and specify the former on the
        -: 5371:    // command line for debugging.
        7: 5372:    if (GTEST_FLAG_GET(break_on_failure)) {
        7: 5372-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 7
        -: 5373:#if defined(GTEST_OS_WINDOWS) && !defined(GTEST_OS_WINDOWS_PHONE) && \
        -: 5374:    !defined(GTEST_OS_WINDOWS_RT)
        -: 5375:      // Using DebugBreak on Windows allows gtest to still break into a debugger
        -: 5376:      // when a failure happens and both the --gtest_break_on_failure and
        -: 5377:      // the --gtest_catch_exceptions flags are specified.
    #####: 5378:      DebugBreak();
    %%%%%: 5378-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5379:#elif (!defined(__native_client__)) &&            \
        -: 5380:    ((defined(__clang__) || defined(__GNUC__)) && \
        -: 5381:     (defined(__x86_64__) || defined(__i386__)))
        -: 5382:      // with clang/gcc we can achieve the same effect on x86 by invoking int3
        -: 5383:      asm("int3");
        -: 5384:#elif GTEST_HAS_BUILTIN(__builtin_trap)
        -: 5385:      __builtin_trap();
        -: 5386:#elif defined(SIGTRAP)
        -: 5387:      raise(SIGTRAP);
        -: 5388:#else
        -: 5389:      // Dereference nullptr through a volatile pointer to prevent the compiler
        -: 5390:      // from removing. We use this rather than abort() or __builtin_trap() for
        -: 5391:      // portability: some debuggers don't correctly trap abort().
        -: 5392:      *static_cast<volatile int*>(nullptr) = 1;
        -: 5393:#endif  // GTEST_OS_WINDOWS
        7: 5394:    } else if (GTEST_FLAG_GET(throw_on_failure)) {
        7: 5394-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 7
        -: 5395:#if GTEST_HAS_EXCEPTIONS
    #####: 5396:      throw internal::GoogleTestFailureException(result);
    %%%%%: 5396-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 5396-block  1
call    4 never executed
    $$$$$: 5396-block  2
call    5 never executed
        -: 5397:#else
        -: 5398:      // We cannot call abort() as it generates a pop-up in debug mode
        -: 5399:      // that cannot be suppressed in VC 7.1 or below.
        -: 5400:      exit(1);
        -: 5401:#endif
        -: 5402:    }
        -: 5403:  }
        7: 5404:}
        7: 5404-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
    $$$$$: 5404-block  1
call    3 never executed
    $$$$$: 5404-block  2
call    4 never executed
    $$$$$: 5404-block  3
call    5 never executed
        -: 5405:
        -: 5406:// Adds a TestProperty to the current TestResult object when invoked from
        -: 5407:// inside a test, to current TestSuite's ad_hoc_test_result_ when invoked
        -: 5408:// from SetUpTestSuite or TearDownTestSuite, or to the global property set
        -: 5409:// when invoked elsewhere.  If the result already contains a property with
        -: 5410:// the same key, the value will be updated.
function _ZN7testing8UnitTest14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 5411:void UnitTest::RecordProperty(const std::string& key,
        -: 5412:                              const std::string& value) {
    #####: 5413:  impl_->RecordProperty(TestProperty(key, value));
    %%%%%: 5413-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5413-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5413-block  2
call    6 never executed
    $$$$$: 5413-block  3
call    7 never executed
    #####: 5414:}
        -: 5415:
        -: 5416:// Runs all tests in this UnitTest object and prints the result.
        -: 5417:// Returns 0 if successful, or 1 otherwise.
        -: 5418://
        -: 5419:// We don't protect this under mutex_, as we only support calling it
        -: 5420:// from the main thread.
function _ZN7testing8UnitTest3RunEv called 1 returned 100% blocks executed 78%
        1: 5421:int UnitTest::Run() {
        -: 5422:#ifdef GTEST_HAS_DEATH_TEST
        -: 5423:  const bool in_death_test_child_process =
        1: 5424:      !GTEST_FLAG_GET(internal_run_death_test).empty();
        1: 5424-block  0
call    0 returned 1
        -: 5425:
        -: 5426:  // Google Test implements this protocol for catching that a test
        -: 5427:  // program exits before returning control to Google Test:
        -: 5428:  //
        -: 5429:  //   1. Upon start, Google Test creates a file whose absolute path
        -: 5430:  //      is specified by the environment variable
        -: 5431:  //      TEST_PREMATURE_EXIT_FILE.
        -: 5432:  //   2. When Google Test has finished its work, it deletes the file.
        -: 5433:  //
        -: 5434:  // This allows a test runner to set TEST_PREMATURE_EXIT_FILE before
        -: 5435:  // running a Google-Test-based test program and check the existence
        -: 5436:  // of the file at the end of the test execution to see if it has
        -: 5437:  // exited prematurely.
        -: 5438:
        -: 5439:  // If we are in the child process of a death test, don't
        -: 5440:  // create/delete the premature exit file, as doing so is unnecessary
        -: 5441:  // and will confuse the parent process.  Otherwise, create/delete
        -: 5442:  // the file upon entering/leaving this function.  If the program
        -: 5443:  // somehow exits before this function has a chance to return, the
        -: 5444:  // premature-exit file will be left undeleted, causing a test runner
        -: 5445:  // that understands the premature-exit-file protocol to report the
        -: 5446:  // test as having failed.
        -: 5447:  const internal::ScopedPrematureExitFile premature_exit_file(
        -: 5448:      in_death_test_child_process
        -: 5449:          ? nullptr
       1*: 5450:          : internal::posix::GetEnv("TEST_PREMATURE_EXIT_FILE"));
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5450-block  0
        1: 5450-block  1
call    2 returned 1
        1: 5450-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        -: 5451:#else
        -: 5452:  const bool in_death_test_child_process = false;
        -: 5453:#endif  // GTEST_HAS_DEATH_TEST
        -: 5454:
        -: 5455:  // Captures the value of GTEST_FLAG(catch_exceptions).  This value will be
        -: 5456:  // used for the duration of the program.
        1: 5457:  impl()->set_catch_exceptions(GTEST_FLAG_GET(catch_exceptions));
        1: 5457-block  0
call    0 returned 1
call    1 returned 1
        -: 5458:
        -: 5459:#ifdef GTEST_OS_WINDOWS
        -: 5460:  // Either the user wants Google Test to catch exceptions thrown by the
        -: 5461:  // tests or this is executing in the context of death test child
        -: 5462:  // process. In either case the user does not want to see pop-up dialogs
        -: 5463:  // about crashes - they are expected.
       1*: 5464:  if (impl()->catch_exceptions() || in_death_test_child_process) {
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%: 5464-block  0
branch  4 never executed (fallthrough)
branch  5 never executed
        1: 5464-block  1
    %%%%%: 5464-block  2
        1: 5464-block  3
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        -: 5465:#if !defined(GTEST_OS_WINDOWS_MOBILE) && !defined(GTEST_OS_WINDOWS_PHONE) && \
        -: 5466:    !defined(GTEST_OS_WINDOWS_RT)
        -: 5467:    // SetErrorMode doesn't exist on CE.
        1: 5468:    SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOALIGNMENTFAULTEXCEPT |
        1: 5468-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5469:                 SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX);
        -: 5470:#endif  // !GTEST_OS_WINDOWS_MOBILE
        -: 5471:
        -: 5472:#if (defined(_MSC_VER) || defined(GTEST_OS_WINDOWS_MINGW)) && \
        -: 5473:    !defined(GTEST_OS_WINDOWS_MOBILE)
        -: 5474:    // Death test children can be terminated with _abort().  On Windows,
        -: 5475:    // _abort() can show a dialog with a warning message.  This forces the
        -: 5476:    // abort message to go to stderr instead.
        1: 5477:    _set_error_mode(_OUT_TO_STDERR);
        1: 5477-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5478:#endif
        -: 5479:
        -: 5480:#if defined(_MSC_VER) && !defined(GTEST_OS_WINDOWS_MOBILE)
        -: 5481:    // In the debug version, Visual Studio pops up a separate dialog
        -: 5482:    // offering a choice to debug the aborted program. We need to suppress
        -: 5483:    // this dialog or it will pop up for every EXPECT/ASSERT_DEATH statement
        -: 5484:    // executed. Google Test will notify the user of any unexpected
        -: 5485:    // failure via stderr.
        -: 5486:    if (!GTEST_FLAG_GET(break_on_failure))
        -: 5487:      _set_abort_behavior(
        -: 5488:          0x0,                                    // Clear the following flags:
        -: 5489:          _WRITE_ABORT_MSG | _CALL_REPORTFAULT);  // pop-up window, core dump.
        -: 5490:
        -: 5491:    // In debug mode, the Windows CRT can crash with an assertion over invalid
        -: 5492:    // input (e.g. passing an invalid file descriptor).  The default handling
        -: 5493:    // for these assertions is to pop up a dialog and wait for user input.
        -: 5494:    // Instead ask the CRT to dump such assertions to stderr non-interactively.
        -: 5495:    if (!IsDebuggerPresent()) {
        -: 5496:      (void)_CrtSetReportMode(_CRT_ASSERT,
        -: 5497:                              _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);
        -: 5498:      (void)_CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);
        -: 5499:    }
        -: 5500:#endif
        -: 5501:  }
        -: 5502:#else
        -: 5503:  (void)in_death_test_child_process;  // Needed inside the #if block above
        -: 5504:#endif  // GTEST_OS_WINDOWS
        -: 5505:
        1: 5506:  return internal::HandleExceptionsInMethodIfSupported(
        1: 5506-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -: 5507:             impl(), &internal::UnitTestImpl::RunAllTests,
        -: 5508:             "auxiliary test code (environments or event listeners)")
       1*: 5509:             ? 0
        1: 5509-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5509-block  1
        1: 5509-block  2
        1: 5510:             : 1;
        1: 5510-block  0
        1: 5511:}
        1: 5511-block  0
call    0 returned 1
    $$$$$: 5511-block  1
call    1 never executed
        -: 5512:
        -: 5513:#if GTEST_HAS_FILE_SYSTEM
        -: 5514:// Returns the working directory when the first TEST() or TEST_F() was
        -: 5515:// executed.
function _ZNK7testing8UnitTest20original_working_dirEv called 0 returned 0% blocks executed 0%
    #####: 5516:const char* UnitTest::original_working_dir() const {
    #####: 5517:  return impl_->original_working_dir_.c_str();
    %%%%%: 5517-block  0
call    0 never executed
        -: 5518:}
        -: 5519:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 5520:
        -: 5521:// Returns the TestSuite object for the test that's currently running,
        -: 5522:// or NULL if no test is running.
function _ZNK7testing8UnitTest18current_test_suiteEv called 0 returned 0% blocks executed 0%
    #####: 5523:const TestSuite* UnitTest::current_test_suite() const
        -: 5524:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5525:  internal::MutexLock lock(&mutex_);
    %%%%%: 5525-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5526:  return impl_->current_test_suite();
    %%%%%: 5526-block  0
call    0 never executed
    %%%%%: 5526-block  1
    #####: 5527:}
call    0 never executed
        -: 5528:
        -: 5529:// Legacy API is still available but deprecated
        -: 5530:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest17current_test_caseEv called 0 returned 0% blocks executed 0%
    #####: 5531:const TestCase* UnitTest::current_test_case() const
        -: 5532:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5533:  internal::MutexLock lock(&mutex_);
    %%%%%: 5533-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5534:  return impl_->current_test_suite();
    %%%%%: 5534-block  0
call    0 never executed
    %%%%%: 5534-block  1
    #####: 5535:}
call    0 never executed
        -: 5536:#endif
        -: 5537:
        -: 5538:// Returns the TestInfo object for the test that's currently running,
        -: 5539:// or NULL if no test is running.
function _ZNK7testing8UnitTest17current_test_infoEv called 0 returned 0% blocks executed 0%
    #####: 5540:const TestInfo* UnitTest::current_test_info() const
        -: 5541:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5542:  internal::MutexLock lock(&mutex_);
    %%%%%: 5542-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5543:  return impl_->current_test_info();
    %%%%%: 5543-block  0
call    0 never executed
    %%%%%: 5543-block  1
    #####: 5544:}
call    0 never executed
        -: 5545:
        -: 5546:// Returns the random seed used at the start of the current test run.
function _ZNK7testing8UnitTest11random_seedEv called 0 returned 0% blocks executed 0%
    #####: 5547:int UnitTest::random_seed() const { return impl_->random_seed(); }
    %%%%%: 5547-block  0
call    0 never executed
        -: 5548:
        -: 5549:// Returns ParameterizedTestSuiteRegistry object used to keep track of
        -: 5550:// value-parameterized tests and instantiate and register them.
        -: 5551:internal::ParameterizedTestSuiteRegistry&
function _ZN7testing8UnitTest27parameterized_test_registryEv called 0 returned 0% blocks executed 0%
    #####: 5552:UnitTest::parameterized_test_registry() GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5553:  return impl_->parameterized_test_registry();
    %%%%%: 5553-block  0
call    0 never executed
        -: 5554:}
        -: 5555:
        -: 5556:// Creates an empty UnitTest.
function _ZN7testing8UnitTestC2Ev called 1 returned 100% blocks executed 56%
        1: 5557:UnitTest::UnitTest() { impl_ = new internal::UnitTestImpl(this); }
        1: 5557-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5557-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 5557-block  2
    $$$$$: 5557-block  3
branch  7 never executed (fallthrough)
branch  8 never executed
    $$$$$: 5557-block  4
call    9 never executed
    $$$$$: 5557-block  5
call   10 never executed
        -: 5558:
        -: 5559:// Destructor of UnitTest.
    #####: 5560:UnitTest::~UnitTest() { delete impl_; }
------------------
_ZN7testing8UnitTestD0Ev:
function _ZN7testing8UnitTestD0Ev called 0 returned 0% blocks executed 0%
    #####: 5560:UnitTest::~UnitTest() { delete impl_; }
    %%%%%: 5560-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8UnitTestD2Ev:
function _ZN7testing8UnitTestD2Ev called 0 returned 0% blocks executed 0%
    #####: 5560:UnitTest::~UnitTest() { delete impl_; }
    %%%%%: 5560-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5560-block  1
call    2 never executed
    %%%%%: 5560-block  2
call    3 never executed
------------------
        -: 5561:
        -: 5562:// Pushes a trace defined by SCOPED_TRACE() on to the per-thread
        -: 5563:// Google Test trace stack.
function _ZN7testing8UnitTest14PushGTestTraceERKNS_8internal9TraceInfoE called 0 returned 0% blocks executed 0%
    #####: 5564:void UnitTest::PushGTestTrace(const internal::TraceInfo& trace)
        -: 5565:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5566:  internal::MutexLock lock(&mutex_);
    %%%%%: 5566-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5567:  impl_->gtest_trace_stack().push_back(trace);
    %%%%%: 5567-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5567-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 5568:}
    %%%%%: 5568-block  0
call    0 never executed
    $$$$$: 5568-block  1
call    1 never executed
        -: 5569:
        -: 5570:// Pops a trace from the per-thread Google Test trace stack.
function _ZN7testing8UnitTest13PopGTestTraceEv called 0 returned 0% blocks executed 0%
    #####: 5571:void UnitTest::PopGTestTrace() GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5572:  internal::MutexLock lock(&mutex_);
    %%%%%: 5572-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5573:  impl_->gtest_trace_stack().pop_back();
    %%%%%: 5573-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5573-block  1
call    3 never executed
    #####: 5574:}
call    0 never executed
    $$$$$: 5574-block  0
call    1 never executed
        -: 5575:
        -: 5576:namespace internal {
        -: 5577:
function _ZN7testing8internal12UnitTestImplC2EPNS_8UnitTestE called 1 returned 100% blocks executed 42%
        1: 5578:UnitTestImpl::UnitTestImpl(UnitTest* parent)
        1: 5579:    : parent_(parent),
        -: 5580:      GTEST_DISABLE_MSC_WARNINGS_PUSH_(4355 /* using this in initializer */)
        1: 5581:          default_global_test_part_result_reporter_(this),
call    0 returned 1
        1: 5582:      default_per_thread_test_part_result_reporter_(this),
call    0 returned 1
        1: 5583:      GTEST_DISABLE_MSC_WARNINGS_POP_() global_test_part_result_reporter_(
        -: 5584:          &default_global_test_part_result_reporter_),
        1: 5585:      per_thread_test_part_result_reporter_(
        1: 5585-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$: 5585-block  1
        -: 5586:          &default_per_thread_test_part_result_reporter_),
        1: 5587:      parameterized_test_registry_(),
call    0 returned 1
        1: 5588:      parameterized_tests_registered_(false),
        1: 5589:      last_death_test_suite_(-1),
        1: 5590:      current_test_suite_(nullptr),
        1: 5591:      current_test_info_(nullptr),
        1: 5592:      ad_hoc_test_result_(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5593:      os_stack_trace_getter_(nullptr),
        1: 5594:      post_flag_parse_init_performed_(false),
        1: 5595:      random_seed_(0),  // Will be overridden by the flag before first use.
        1: 5596:      random_(0),       // Will be reseeded before first use.
        1: 5596-block  0
call    0 returned 1
        1: 5597:      start_timestamp_(0),
        1: 5598:      elapsed_time_(0),
        -: 5599:#ifdef GTEST_HAS_DEATH_TEST
        1: 5600:      death_test_factory_(new DefaultDeathTestFactory),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5600-block  0
call    3 returned 1
call    4 returned 1
        -: 5601:#endif
        -: 5602:      // Will be overridden by the flag before first use.
        7: 5603:      catch_exceptions_(false) {
        1: 5603-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5603-block  1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
        1: 5603-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1: 5604:  listeners()->SetDefaultResultPrinter(new PrettyUnitTestResultPrinter);
        1: 5604-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5604-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
    $$$$$: 5604-block  2
branch  8 never executed (fallthrough)
branch  9 never executed
    $$$$$: 5604-block  3
call   10 never executed
        1: 5605:}
        1: 5605-block  0
    $$$$$: 5605-block  1
call    0 never executed
    $$$$$: 5605-block  2
call    1 never executed
    $$$$$: 5605-block  3
call    2 never executed
    $$$$$: 5605-block  4
call    3 never executed
    $$$$$: 5605-block  5
call    4 never executed
    $$$$$: 5605-block  6
call    5 never executed
    $$$$$: 5605-block  7
call    6 never executed
    $$$$$: 5605-block  8
call    7 never executed
    $$$$$: 5605-block  9
call    8 never executed
    $$$$$: 5605-block 10
call    9 never executed
    $$$$$: 5605-block 11
call   10 never executed
    $$$$$: 5605-block 12
call   11 never executed
    $$$$$: 5605-block 13
call   12 never executed
    $$$$$: 5605-block 14
call   13 never executed
    $$$$$: 5605-block 15
call   14 never executed
    $$$$$: 5605-block 16
call   15 never executed
        -: 5606:
    #####: 5607:UnitTestImpl::~UnitTestImpl() {
        -: 5608:  // Deletes every TestSuite.
    #####: 5609:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5610:
        -: 5611:  // Deletes every Environment.
    #####: 5612:  ForEach(environments_, internal::Delete<Environment>);
        -: 5613:
    #####: 5614:  delete os_stack_trace_getter_;
    #####: 5615:}
------------------
_ZN7testing8internal12UnitTestImplD0Ev:
function _ZN7testing8internal12UnitTestImplD0Ev called 0 returned 0% blocks executed 0%
    #####: 5607:UnitTestImpl::~UnitTestImpl() {
        -: 5608:  // Deletes every TestSuite.
        -: 5609:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5610:
        -: 5611:  // Deletes every Environment.
        -: 5612:  ForEach(environments_, internal::Delete<Environment>);
        -: 5613:
        -: 5614:  delete os_stack_trace_getter_;
    #####: 5615:}
    %%%%%: 5615-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal12UnitTestImplD2Ev:
function _ZN7testing8internal12UnitTestImplD2Ev called 0 returned 0% blocks executed 0%
    #####: 5607:UnitTestImpl::~UnitTestImpl() {
        -: 5608:  // Deletes every TestSuite.
    #####: 5609:  ForEach(test_suites_, internal::Delete<TestSuite>);
    %%%%%: 5609-block  0
call    0 never executed
        -: 5610:
        -: 5611:  // Deletes every Environment.
    #####: 5612:  ForEach(environments_, internal::Delete<Environment>);
call    0 never executed
        -: 5613:
    #####: 5614:  delete os_stack_trace_getter_;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5614-block  0
call    2 never executed
    #####: 5615:}
    %%%%%: 5615-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
------------------
        -: 5616:
        -: 5617:// Adds a TestProperty to the current TestResult object when invoked in a
        -: 5618:// context of a test, to current test suite's ad_hoc_test_result when invoke
        -: 5619:// from SetUpTestSuite/TearDownTestSuite, or to the global property set
        -: 5620:// otherwise.  If the result already contains a property with the same key,
        -: 5621:// the value will be updated.
function _ZN7testing8internal12UnitTestImpl14RecordPropertyERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 5622:void UnitTestImpl::RecordProperty(const TestProperty& test_property) {
    #####: 5623:  std::string xml_element;
    %%%%%: 5623-block  0
call    0 never executed
        -: 5624:  TestResult* test_result;  // TestResult appropriate for property recording.
        -: 5625:
    #####: 5626:  if (current_test_info_ != nullptr) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5627:    xml_element = "testcase";
    %%%%%: 5627-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5628:    test_result = &(current_test_info_->result_);
    %%%%%: 5628-block  0
    #####: 5629:  } else if (current_test_suite_ != nullptr) {
    %%%%%: 5629-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5630:    xml_element = "testsuite";
    %%%%%: 5630-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5631:    test_result = &(current_test_suite_->ad_hoc_test_result_);
    %%%%%: 5631-block  0
        -: 5632:  } else {
    #####: 5633:    xml_element = "testsuites";
    %%%%%: 5633-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5634:    test_result = &ad_hoc_test_result_;
    %%%%%: 5634-block  0
        -: 5635:  }
    #####: 5636:  test_result->RecordProperty(xml_element, test_property);
    %%%%%: 5636-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5637:}
    %%%%%: 5637-block  0
call    0 never executed
    $$$$$: 5637-block  1
call    1 never executed
        -: 5638:
        -: 5639:#ifdef GTEST_HAS_DEATH_TEST
        -: 5640:// Disables event forwarding if the control is currently in a death test
        -: 5641:// subprocess. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl32SuppressTestEventsIfInSubprocessEv called 1 returned 100% blocks executed 60%
        1: 5642:void UnitTestImpl::SuppressTestEventsIfInSubprocess() {
        1: 5643:  if (internal_run_death_test_flag_ != nullptr)
        1: 5643-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5644:    listeners()->SuppressEventForwarding(true);
    %%%%%: 5644-block  0
call    0 never executed
call    1 never executed
        1: 5645:}
        -: 5646:#endif  // GTEST_HAS_DEATH_TEST
        -: 5647:
        -: 5648:// Initializes event listeners performing XML output as specified by
        -: 5649:// UnitTestOptions. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl18ConfigureXmlOutputEv called 1 returned 100% blocks executed 20%
        1: 5650:void UnitTestImpl::ConfigureXmlOutput() {
        1: 5651:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
        1: 5651-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5652:#if GTEST_HAS_FILE_SYSTEM
        1: 5653:  if (output_format == "xml") {
        1: 5653-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5653-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 5654:    listeners()->SetDefaultXmlGenerator(new XmlUnitTestResultPrinter(
    %%%%%: 5654-block  0
call    0 never executed
    %%%%%: 5654-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 5654-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 5655:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5655-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5655-block  1
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 5655-block  2
call   10 never executed
    $$$$$: 5655-block  3
call   11 never executed
    $$$$$: 5655-block  4
    $$$$$: 5655-block  5
call   12 never executed
        1: 5656:  } else if (output_format == "json") {
        1: 5656-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5656-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 5657:    listeners()->SetDefaultXmlGenerator(new JsonUnitTestResultPrinter(
    %%%%%: 5657-block  0
call    0 never executed
    %%%%%: 5657-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 5657-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 5658:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5658-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5658-block  1
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 5658-block  2
call   10 never executed
    $$$$$: 5658-block  3
call   11 never executed
    $$$$$: 5658-block  4
    $$$$$: 5658-block  5
call   12 never executed
        1: 5659:  } else if (!output_format.empty()) {
        1: 5659-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5660:    GTEST_LOG_(WARNING) << "WARNING: unrecognized output format \""
    %%%%%: 5660-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5660-block  1
call    3 never executed
    %%%%%: 5660-block  2
call    4 never executed
    $$$$$: 5660-block  3
call    5 never executed
    $$$$$: 5660-block  4
    #####: 5661:                        << output_format << "\" ignored.";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5661-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5661-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 5662:  }
        -: 5663:#else
        -: 5664:  if (!output_format.empty()) {
        -: 5665:    GTEST_LOG_(ERROR) << "ERROR: alternative output formats require "
        -: 5666:                      << "GTEST_HAS_FILE_SYSTEM to be enabled";
        -: 5667:  }
        -: 5668:#endif  // GTEST_HAS_FILE_SYSTEM
        1: 5669:}
        1: 5669-block  0
call    0 returned 1
    $$$$$: 5669-block  1
call    1 never executed
        -: 5670:
        -: 5671:#if GTEST_CAN_STREAM_RESULTS_
        -: 5672:// Initializes event listeners for streaming test results in string form.
        -: 5673:// Must not be called before InitGoogleTest.
        -: 5674:void UnitTestImpl::ConfigureStreamingOutput() {
        -: 5675:  const std::string& target = GTEST_FLAG_GET(stream_result_to);
        -: 5676:  if (!target.empty()) {
        -: 5677:    const size_t pos = target.find(':');
        -: 5678:    if (pos != std::string::npos) {
        -: 5679:      listeners()->Append(
        -: 5680:          new StreamingListener(target.substr(0, pos), target.substr(pos + 1)));
        -: 5681:    } else {
        -: 5682:      GTEST_LOG_(WARNING) << "unrecognized streaming target \"" << target
        -: 5683:                          << "\" ignored.";
        -: 5684:    }
        -: 5685:  }
        -: 5686:}
        -: 5687:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5688:
        -: 5689:// Performs initialization dependent upon flag values obtained in
        -: 5690:// ParseGoogleTestFlagsOnly.  Is called from InitGoogleTest after the call to
        -: 5691:// ParseGoogleTestFlagsOnly.  In case a user neglects to call InitGoogleTest
        -: 5692:// this function is also called from RunAllTests.  Since this function can be
        -: 5693:// called more than once, it has to be idempotent.
function _ZN7testing8internal12UnitTestImpl19PostFlagParsingInitEv called 2 returned 100% blocks executed 57%
        2: 5694:void UnitTestImpl::PostFlagParsingInit() {
        -: 5695:  // Ensures that this function does not execute more than once.
        2: 5696:  if (!post_flag_parse_init_performed_) {
        2: 5696-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 5697:    post_flag_parse_init_performed_ = true;
        -: 5698:
        -: 5699:#if defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5700:    // Register to send notifications about key process state changes.
        -: 5701:    listeners()->Append(new GTEST_CUSTOM_TEST_EVENT_LISTENER_());
        -: 5702:#endif  // defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5703:
        -: 5704:#ifdef GTEST_HAS_DEATH_TEST
        1: 5705:    InitDeathTestSubprocessControlInfo();
        1: 5705-block  0
call    0 returned 1
        1: 5706:    SuppressTestEventsIfInSubprocess();
call    0 returned 1
        -: 5707:#endif  // GTEST_HAS_DEATH_TEST
        -: 5708:
        -: 5709:    // Registers parameterized tests. This makes parameterized tests
        -: 5710:    // available to the UnitTest reflection API without running
        -: 5711:    // RUN_ALL_TESTS.
        1: 5712:    RegisterParameterizedTests();
call    0 returned 1
        -: 5713:
        -: 5714:    // Configures listeners for XML output. This makes it possible for users
        -: 5715:    // to shut down the default XML output before invoking RUN_ALL_TESTS.
        1: 5716:    ConfigureXmlOutput();
call    0 returned 1
        -: 5717:
        1: 5718:    if (GTEST_FLAG_GET(brief)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5719:      listeners()->SetDefaultResultPrinter(new BriefUnitTestResultPrinter);
    %%%%%: 5719-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 5719-block  1
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$: 5719-block  2
call    8 never executed
        -: 5720:    }
        -: 5721:
        -: 5722:#if GTEST_CAN_STREAM_RESULTS_
        -: 5723:    // Configures listeners for streaming test results to the specified server.
        -: 5724:    ConfigureStreamingOutput();
        -: 5725:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5726:
        -: 5727:#ifdef GTEST_HAS_ABSL
        -: 5728:    if (GTEST_FLAG_GET(install_failure_signal_handler)) {
        -: 5729:      absl::FailureSignalHandlerOptions options;
        -: 5730:      absl::InstallFailureSignalHandler(options);
        -: 5731:    }
        -: 5732:#endif  // GTEST_HAS_ABSL
        -: 5733:  }
        2: 5734:}
        2: 5734-block  0
        -: 5735:
        -: 5736:// A predicate that checks the name of a TestSuite against a known
        -: 5737:// value.
        -: 5738://
        -: 5739:// This is used for implementation of the UnitTest class only.  We put
        -: 5740:// it in the anonymous namespace to prevent polluting the outer
        -: 5741:// namespace.
        -: 5742://
        -: 5743:// TestSuiteNameIs is copyable.
        -: 5744:class TestSuiteNameIs {
        -: 5745: public:
        -: 5746:  // Constructor.
function _ZN7testing8internal15TestSuiteNameIsC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 43 returned 100% blocks executed 100%
       43: 5747:  explicit TestSuiteNameIs(const std::string& name) : name_(name) {}
       43: 5747-block  0
call    0 returned 43
        -: 5748:
        -: 5749:  // Returns true if and only if the name of test_suite matches name_.
function _ZNK7testing8internal15TestSuiteNameIsclEPKNS_9TestSuiteE called 78 returned 100% blocks executed 100%
       78: 5750:  bool operator()(const TestSuite* test_suite) const {
      156: 5751:    return test_suite != nullptr &&
       78: 5751-block  0
branch  0 taken 78 (fallthrough)
branch  1 taken 0
       33: 5751-block  1
       45: 5751-block  2
      156: 5752:           strcmp(test_suite->name(), name_.c_str()) == 0;
       78: 5752-block  0
call    0 returned 78
call    1 returned 78
branch  2 taken 33 (fallthrough)
branch  3 taken 45
       78: 5752-block  1
        -: 5753:  }
        -: 5754:
        -: 5755: private:
        -: 5756:  std::string name_;
        -: 5757:};
        -: 5758:
        -: 5759:// Finds and returns a TestSuite with the given name.  If one doesn't
        -: 5760:// exist, creates one and returns it.  It's the CALLER'S
        -: 5761:// RESPONSIBILITY to ensure that this function is only called WHEN THE
        -: 5762:// TESTS ARE NOT SHUFFLED.
        -: 5763://
        -: 5764:// Arguments:
        -: 5765://
        -: 5766://   test_suite_name: name of the test suite
        -: 5767://   type_param:      the name of the test suite's type parameter, or NULL if
        -: 5768://                    this is not a typed or a type-parameterized test suite.
        -: 5769://   set_up_tc:       pointer to the function that sets up the test suite
        -: 5770://   tear_down_tc:    pointer to the function that tears down the test suite
function _ZN7testing8internal12UnitTestImpl12GetTestSuiteEPKcS3_PFvvES5_ called 43 returned 100% blocks executed 50%
       43: 5771:TestSuite* UnitTestImpl::GetTestSuite(
       43: 5771-block  0
        -: 5772:    const char* test_suite_name, const char* type_param,
        -: 5773:    internal::SetUpTestSuiteFunc set_up_tc,
        -: 5774:    internal::TearDownTestSuiteFunc tear_down_tc) {
        -: 5775:  // Can we find a TestSuite with the given name?
        -: 5776:  const auto test_suite =
       43: 5777:      std::find_if(test_suites_.rbegin(), test_suites_.rend(),
       43: 5777-block  0
call    0 returned 43
call    1 returned 43
    $$$$$: 5777-block  1
    $$$$$: 5777-block  2
       86: 5778:                   TestSuiteNameIs(test_suite_name));
       43: 5778-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43: 5778-block  1
call    3 returned 43
branch  4 taken 43 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 43
branch  7 taken 43 (fallthrough)
branch  8 taken 0 (throw)
       43: 5778-block  2
call    9 returned 43
call   10 returned 43
    $$$$$: 5778-block  3
call   11 never executed
    $$$$$: 5778-block  4
call   12 never executed
    $$$$$: 5778-block  5
    $$$$$: 5778-block  6
    $$$$$: 5778-block  7
        -: 5779:
       43: 5780:  if (test_suite != test_suites_.rend()) return *test_suite;
       43: 5780-block  0
call    0 returned 43
call    1 returned 43
branch  2 taken 33 (fallthrough)
branch  3 taken 10
       33: 5780-block  1
call    4 returned 33
        -: 5781:
        -: 5782:  // No.  Let's create one.
        -: 5783:  auto* const new_test_suite =
       10: 5784:      new TestSuite(test_suite_name, type_param, set_up_tc, tear_down_tc);
       10: 5784-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10: 5784-block  1
call    3 returned 10
branch  4 taken 10 (fallthrough)
branch  5 taken 0 (throw)
       10: 5784-block  2
    $$$$$: 5784-block  3
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$: 5784-block  4
call    8 never executed
        -: 5785:
       20: 5786:  const UnitTestFilter death_test_suite_filter(kDeathTestSuiteFilter);
       10: 5786-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10: 5786-block  1
call    3 returned 10
branch  4 taken 10 (fallthrough)
branch  5 taken 0 (throw)
       10: 5786-block  2
call    6 returned 10
       10: 5786-block  3
    $$$$$: 5786-block  4
call    7 never executed
    $$$$$: 5786-block  5
    $$$$$: 5786-block  6
        -: 5787:  // Is this a death test suite?
       20: 5788:  if (death_test_suite_filter.MatchesName(test_suite_name)) {
       10: 5788-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10: 5788-block  1
call    3 returned 10
branch  4 taken 10 (fallthrough)
branch  5 taken 0 (throw)
       10: 5788-block  2
call    6 returned 10
       10: 5788-block  3
branch  7 taken 0 (fallthrough)
branch  8 taken 10
    $$$$$: 5788-block  4
call    9 never executed
    $$$$$: 5788-block  5
    $$$$$: 5788-block  6
        -: 5789:    // Yes.  Inserts the test suite after the last death test suite
        -: 5790:    // defined so far.  This only works when the test suites haven't
        -: 5791:    // been shuffled.  Otherwise we may end up running a death test
        -: 5792:    // after a non-death test.
    #####: 5793:    ++last_death_test_suite_;
    #####: 5794:    test_suites_.insert(test_suites_.begin() + last_death_test_suite_,
    %%%%%: 5794-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5794-block  1
    $$$$$: 5794-block  2
    $$$$$: 5794-block  3
    $$$$$: 5794-block  4
        -: 5795:                        new_test_suite);
        -: 5796:  } else {
        -: 5797:    // No.  Appends to the end of the list.
       10: 5798:    test_suites_.push_back(new_test_suite);
       10: 5798-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
        -: 5799:  }
        -: 5800:
       10: 5801:  test_suite_indices_.push_back(static_cast<int>(test_suite_indices_.size()));
       10: 5801-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 10 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 5801-block  1
       10: 5802:  return new_test_suite;
       10: 5803:}
       10: 5803-block  0
call    0 returned 10
    $$$$$: 5803-block  1
call    1 never executed
        -: 5804:
        -: 5805:// Helpers for setting up / tearing down the given environment.  They
        -: 5806:// are for use in the ForEach() function.
function _ZN7testing8internalL16SetUpEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5807:static void SetUpEnvironment(Environment* env) { env->SetUp(); }
    %%%%%: 5807-block  0
call    0 never executed
function _ZN7testing8internalL19TearDownEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5808:static void TearDownEnvironment(Environment* env) { env->TearDown(); }
    %%%%%: 5808-block  0
call    0 never executed
        -: 5809:
        -: 5810:// Runs all tests in this UnitTest object, prints the result, and
        -: 5811:// returns true if all tests are successful.  If any exception is
        -: 5812:// thrown during a test, the test is considered to be failed, but the
        -: 5813:// rest of the tests will still be run.
        -: 5814://
        -: 5815:// When parameterized tests are enabled, it expands and registers
        -: 5816:// parameterized tests first in RegisterParameterizedTests().
        -: 5817:// All other functions called from RunAllTests() may safely assume that
        -: 5818:// parameterized tests are ready to be counted and run.
function _ZN7testing8internal12UnitTestImpl11RunAllTestsEv called 1 returned 100% blocks executed 53%
        1: 5819:bool UnitTestImpl::RunAllTests() {
        -: 5820:  // True if and only if Google Test is initialized before RUN_ALL_TESTS() is
        -: 5821:  // called.
        1: 5822:  const bool gtest_is_initialized_before_run_all_tests = GTestIsInitialized();
        1: 5822-block  0
call    0 returned 1
        -: 5823:
        -: 5824:  // Do not run any test if the --help flag was specified.
       1*: 5825:  if (g_help_flag) return true;
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5825-block  0
        -: 5826:
        -: 5827:  // Repeats the call to the post-flag parsing initialization in case the
        -: 5828:  // user didn't call InitGoogleTest.
        1: 5829:  PostFlagParsingInit();
        1: 5829-block  0
call    0 returned 1
        -: 5830:
        -: 5831:#if GTEST_HAS_FILE_SYSTEM
        -: 5832:  // Even if sharding is not on, test runners may want to use the
        -: 5833:  // GTEST_SHARD_STATUS_FILE to query whether the test supports the sharding
        -: 5834:  // protocol.
        1: 5835:  internal::WriteToShardStatusFileIfNeeded();
call    0 returned 1
        -: 5836:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 5837:
        -: 5838:  // True if and only if we are in a subprocess for running a thread-safe-style
        -: 5839:  // death test.
        1: 5840:  bool in_subprocess_for_death_test = false;
        -: 5841:
        -: 5842:#ifdef GTEST_HAS_DEATH_TEST
        1: 5843:  in_subprocess_for_death_test = (internal_run_death_test_flag_ != nullptr);
call    0 returned 1
        -: 5844:#if defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5845:  if (in_subprocess_for_death_test) {
        -: 5846:    GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_();
        -: 5847:  }
        -: 5848:#endif  // defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5849:#endif  // GTEST_HAS_DEATH_TEST
        -: 5850:
        1: 5851:  const bool should_shard = ShouldShard(kTestTotalShards, kTestShardIndex,
call    0 returned 1
        -: 5852:                                        in_subprocess_for_death_test);
        -: 5853:
        -: 5854:  // Compares the full test names with the filter to decide which
        -: 5855:  // tests to run.
        -: 5856:  const bool has_tests_to_run =
       1*: 5857:      FilterTests(should_shard ? HONOR_SHARDING_PROTOCOL
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5857-block  0
        1: 5857-block  1
        1: 5857-block  2
call    2 returned 1
        1: 5858:                               : IGNORE_SHARDING_PROTOCOL) > 0;
        -: 5859:
        -: 5860:  // Lists the tests and exits if the --gtest_list_tests flag was specified.
        1: 5861:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 5862:    // This must be called *after* FilterTests() has been called.
    #####: 5863:    ListTestsMatchingFilter();
    %%%%%: 5863-block  0
call    0 never executed
    #####: 5864:    return true;
        -: 5865:  }
        -: 5866:
        1: 5867:  random_seed_ = GetRandomSeedFromFlag(GTEST_FLAG_GET(random_seed));
        1: 5867-block  0
call    0 returned 1
        -: 5868:
        -: 5869:  // True if and only if at least one test has failed.
        1: 5870:  bool failed = false;
        -: 5871:
        1: 5872:  TestEventListener* repeater = listeners()->repeater();
call    0 returned 1
call    1 returned 1
        -: 5873:
        1: 5874:  start_timestamp_ = GetTimeInMillis();
call    0 returned 1
        1: 5875:  repeater->OnTestProgramStart(*parent_);
call    0 returned 1
        -: 5876:
        -: 5877:  // How many times to repeat the tests?  We don't want to repeat them
        -: 5878:  // when we are inside the subprocess of a death test.
       1*: 5879:  const int repeat = in_subprocess_for_death_test ? 1 : GTEST_FLAG_GET(repeat);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5879-block  0
        1: 5879-block  1
        -: 5880:
        -: 5881:  // Repeats forever if the repeat count is negative.
        1: 5882:  const bool gtest_repeat_forever = repeat < 0;
        -: 5883:
        -: 5884:  // Should test environments be set up and torn down for each repeat, or only
        -: 5885:  // set up on the first and torn down on the last iteration? If there is no
        -: 5886:  // "last" iteration because the tests will repeat forever, always recreate the
        -: 5887:  // environments to avoid leaks in case one of the environments is using
        -: 5888:  // resources that are external to this process. Without this check there would
        -: 5889:  // be no way to clean up those external resources automatically.
        1: 5890:  const bool recreate_environments_when_repeating =
       1*: 5891:      GTEST_FLAG_GET(recreate_environments_when_repeating) ||
        1: 5891-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5891-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%: 5891-block  2
        1: 5891-block  3
        -: 5892:      gtest_repeat_forever;
        -: 5893:
        2: 5894:  for (int i = 0; gtest_repeat_forever || i != repeat; i++) {
        1: 5894-block  0
        1: 5894-block  1
        2: 5894-block  2
branch  0 taken 0
branch  1 taken 2 (fallthrough)
        2: 5894-block  3
branch  2 taken 1
branch  3 taken 1 (fallthrough)
        -: 5895:    // We want to preserve failures generated by ad-hoc test
        -: 5896:    // assertions executed before RUN_ALL_TESTS().
        1: 5897:    ClearNonAdHocTestResult();
        1: 5897-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5898:
        1: 5899:    Timer timer;
        1: 5899-block  0
call    0 returned 1
        -: 5900:
        -: 5901:    // Shuffles test suites and tests if requested.
        1: 5902:    if (has_tests_to_run && GTEST_FLAG_GET(shuffle)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5902-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 5903:      random()->Reseed(static_cast<uint32_t>(random_seed_));
    %%%%%: 5903-block  0
call    0 never executed
call    1 never executed
        -: 5904:      // This should be done before calling OnTestIterationStart(),
        -: 5905:      // such that a test event listener can see the actual test order
        -: 5906:      // in the event.
    #####: 5907:      ShuffleTests();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5908:    }
        -: 5909:
        -: 5910:    // Tells the unit test event listeners that the tests are about to start.
        1: 5911:    repeater->OnTestIterationStart(*parent_, i);
        1: 5911-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5912:
        -: 5913:    // Runs each test suite if there is at least one test to run.
        1: 5914:    if (has_tests_to_run) {
        1: 5914-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 5915:      // Sets up all environments beforehand. If test environments aren't
        -: 5916:      // recreated for each iteration, only do so on the first iteration.
       1*: 5917:      if (i == 0 || recreate_environments_when_repeating) {
        1: 5917-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5917-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
        1: 5918:        repeater->OnEnvironmentsSetUpStart(*parent_);
        1: 5918-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5919:        ForEach(environments_, SetUpEnvironment);
        1: 5919-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5920:        repeater->OnEnvironmentsSetUpEnd(*parent_);
        1: 5920-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5921:      }
        -: 5922:
        -: 5923:      // Runs the tests only if there was no fatal failure or skip triggered
        -: 5924:      // during global set-up.
        1: 5925:      if (Test::IsSkipped()) {
        1: 5925-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5925-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        -: 5926:        // Emit diagnostics when global set-up calls skip, as it will not be
        -: 5927:        // emitted by default.
        -: 5928:        TestResult& test_result =
    #####: 5929:            *internal::GetUnitTestImpl()->current_test_result();
    %%%%%: 5929-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5929-block  1
call    3 never executed
    #####: 5930:        for (int j = 0; j < test_result.total_part_count(); ++j) {
    %%%%%: 5930-block  0
    %%%%%: 5930-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -: 5931:          const TestPartResult& test_part_result =
    #####: 5932:              test_result.GetTestPartResult(j);
    %%%%%: 5932-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5933:          if (test_part_result.type() == TestPartResult::kSkip) {
    %%%%%: 5933-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 5934:            const std::string& result = test_part_result.message();
    %%%%%: 5934-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 5934-block  1
    $$$$$: 5934-block  2
    #####: 5935:            printf("%s\n", result.c_str());
    %%%%%: 5935-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 5936:          }
    %%%%%: 5936-block  0
call    0 never executed
    $$$$$: 5936-block  1
call    1 never executed
        -: 5937:        }
    #####: 5938:        fflush(stdout);
    %%%%%: 5938-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5938-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        1: 5939:      } else if (!Test::HasFatalFailure()) {
        1: 5939-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5939-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
       11: 5940:        for (int test_index = 0; test_index < total_test_suite_count();
        1: 5940-block  0
       10: 5940-block  1
       11: 5940-block  2
call    0 returned 11
branch  1 taken 10
branch  2 taken 1 (fallthrough)
        -: 5941:             test_index++) {
       10: 5942:          GetMutableSuiteCase(test_index)->Run();
       10: 5942-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10: 5942-block  1
call    3 returned 10
branch  4 taken 10 (fallthrough)
branch  5 taken 0 (throw)
      10*: 5943:          if (GTEST_FLAG_GET(fail_fast) &&
       10: 5943-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10
    %%%%%: 5943-block  1
       10: 5943-block  2
       10: 5943-block  3
branch  2 taken 0 (fallthrough)
branch  3 taken 10
    #####: 5944:              GetMutableSuiteCase(test_index)->Failed()) {
    %%%%%: 5944-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5944-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5944-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 5945:            for (int j = test_index + 1; j < total_test_suite_count(); j++) {
    %%%%%: 5945-block  0
    %%%%%: 5945-block  1
    %%%%%: 5945-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 5946:              GetMutableSuiteCase(j)->Skip();
    %%%%%: 5946-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5946-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 5947:            }
    #####: 5948:            break;
    %%%%%: 5948-block  0
        -: 5949:          }
        -: 5950:        }
    #####: 5951:      } else if (Test::HasFatalFailure()) {
    %%%%%: 5951-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5951-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -: 5952:        // If there was a fatal failure during the global setup then we know we
        -: 5953:        // aren't going to run any tests. Explicitly mark all of the tests as
        -: 5954:        // skipped to make this obvious in the output.
    #####: 5955:        for (int test_index = 0; test_index < total_test_suite_count();
    %%%%%: 5955-block  0
    %%%%%: 5955-block  1
    %%%%%: 5955-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -: 5956:             test_index++) {
    #####: 5957:          GetMutableSuiteCase(test_index)->Skip();
    %%%%%: 5957-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5957-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 5958:        }
        -: 5959:      }
        -: 5960:
        -: 5961:      // Tears down all environments in reverse order afterwards. If test
        -: 5962:      // environments aren't recreated for each iteration, only do so on the
        -: 5963:      // last iteration.
       1*: 5964:      if (i == repeat - 1 || recreate_environments_when_repeating) {
        1: 5964-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5964-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
        1: 5965:        repeater->OnEnvironmentsTearDownStart(*parent_);
        1: 5965-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5966:        std::for_each(environments_.rbegin(), environments_.rend(),
        1: 5966-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$: 5966-block  1
    $$$$$: 5966-block  2
        -: 5967:                      TearDownEnvironment);
        1: 5968:        repeater->OnEnvironmentsTearDownEnd(*parent_);
        1: 5968-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5969:      }
        -: 5970:    }
        -: 5971:
        1: 5972:    elapsed_time_ = timer.Elapsed();
        1: 5972-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5973:
        -: 5974:    // Tells the unit test event listener that the tests have just finished.
        1: 5975:    repeater->OnTestIterationEnd(*parent_, i);
        1: 5975-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5976:
        -: 5977:    // Gets the result and clears it.
        1: 5978:    if (!Passed()) {
        1: 5978-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5978-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 5979:      failed = true;
        1: 5979-block  0
        -: 5980:    }
        -: 5981:
        -: 5982:    // Restores the original test order after the iteration.  This
        -: 5983:    // allows the user to quickly repro a failure that happens in the
        -: 5984:    // N-th iteration without repeating the first (N - 1) iterations.
        -: 5985:    // This is not enclosed in "if (GTEST_FLAG(shuffle)) { ... }", in
        -: 5986:    // case the user somehow changes the value of the flag somewhere
        -: 5987:    // (it's always safe to unshuffle the tests).
        1: 5988:    UnshuffleTests();
        1: 5988-block  0
call    0 returned 1
        -: 5989:
        1: 5990:    if (GTEST_FLAG_GET(shuffle)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 5991:      // Picks a new random seed for each iteration.
    #####: 5992:      random_seed_ = GetNextRandomSeed(random_seed_);
    %%%%%: 5992-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5992-block  1
        -: 5993:    }
        -: 5994:  }
        -: 5995:
        1: 5996:  repeater->OnTestProgramEnd(*parent_);
        1: 5996-block  0
call    0 returned 1
        -: 5997:  // Destroy environments in normal code, not in static teardown.
        1: 5998:  bool delete_environment_on_teardown = true;
        1: 5999:  if (delete_environment_on_teardown) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 6000:    ForEach(environments_, internal::Delete<Environment>);
        1: 6000-block  0
call    0 returned 1
        1: 6001:    environments_.clear();
call    0 returned 1
        -: 6002:  }
        -: 6003:
        1: 6004:  if (!gtest_is_initialized_before_run_all_tests) {
        1: 6004-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 6005:    ColoredPrintf(
    %%%%%: 6005-block  0
call    0 never executed
        -: 6006:        GTestColor::kRed,
        -: 6007:        "\nIMPORTANT NOTICE - DO NOT IGNORE:\n"
        -: 6008:        "This test program did NOT call " GTEST_INIT_GOOGLE_TEST_NAME_
        -: 6009:        "() before calling RUN_ALL_TESTS(). This is INVALID. Soon " GTEST_NAME_
        -: 6010:        " will start to enforce the valid usage. "
        -: 6011:        "Please fix it ASAP, or IT WILL START TO FAIL.\n");  // NOLINT
        -: 6012:  }
        -: 6013:
        1: 6014:  return !failed;
        1: 6014-block  0
        -: 6015:}
        -: 6016:
        -: 6017:#if GTEST_HAS_FILE_SYSTEM
        -: 6018:// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file
        -: 6019:// if the variable is present. If a file already exists at this location, this
        -: 6020:// function will write over it. If the variable is present, but the file cannot
        -: 6021:// be created, prints an error and exits.
function _ZN7testing8internal30WriteToShardStatusFileIfNeededEv called 1 returned 100% blocks executed 30%
        1: 6022:void WriteToShardStatusFileIfNeeded() {
        1: 6023:  const char* const test_shard_file = posix::GetEnv(kTestShardStatusFile);
        1: 6023-block  0
call    0 returned 1
        1: 6024:  if (test_shard_file != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 6025:    FILE* const file = posix::FOpen(test_shard_file, "w");
    %%%%%: 6025-block  0
call    0 never executed
    #####: 6026:    if (file == nullptr) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6027:      ColoredPrintf(GTestColor::kRed,
    %%%%%: 6027-block  0
call    0 never executed
        -: 6028:                    "Could not write to the test shard status file \"%s\" "
        -: 6029:                    "specified by the %s environment variable.\n",
        -: 6030:                    test_shard_file, kTestShardStatusFile);
    #####: 6031:      fflush(stdout);
call    0 never executed
call    1 never executed
    #####: 6032:      exit(EXIT_FAILURE);
call    0 never executed
        -: 6033:    }
    #####: 6034:    fclose(file);
    %%%%%: 6034-block  0
call    0 never executed
        -: 6035:  }
        1: 6036:}
        -: 6037:#endif  // GTEST_HAS_FILE_SYSTEM
        -: 6038:
        -: 6039:// Checks whether sharding is enabled by examining the relevant
        -: 6040:// environment variable values. If the variables are present,
        -: 6041:// but inconsistent (i.e., shard_index >= total_shards), prints
        -: 6042:// an error and exits. If in_subprocess_for_death_test, sharding is
        -: 6043:// disabled because it must only be applied to the original test
        -: 6044:// process. Otherwise, we could filter out death tests we intended to execute.
function _ZN7testing8internal11ShouldShardEPKcS2_b called 2 returned 100% blocks executed 9%
        2: 6045:bool ShouldShard(const char* total_shards_env, const char* shard_index_env,
        -: 6046:                 bool in_subprocess_for_death_test) {
        2: 6047:  if (in_subprocess_for_death_test) {
        2: 6047-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 6048:    return false;
    %%%%%: 6048-block  0
        -: 6049:  }
        -: 6050:
        2: 6051:  const int32_t total_shards = Int32FromEnvOrDie(total_shards_env, -1);
        2: 6051-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6052:  const int32_t shard_index = Int32FromEnvOrDie(shard_index_env, -1);
        2: 6052-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -: 6053:
        2: 6054:  if (total_shards == -1 && shard_index == -1) {
        2: 6054-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 6054-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 6055:    return false;
        2: 6055-block  0
    #####: 6056:  } else if (total_shards == -1 && shard_index != -1) {
    %%%%%: 6056-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6056-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 6057:    const Message msg = Message() << "Invalid environment variables: you have "
    %%%%%: 6057-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6057-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6057-block  2
call    6 never executed
    $$$$$: 6057-block  3
call    7 never executed
    $$$$$: 6057-block  4
    #####: 6058:                                  << kTestShardIndex << " = " << shard_index
    %%%%%: 6058-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6058-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6058-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 6059:                                  << ", but have left " << kTestTotalShards
    %%%%%: 6059-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6059-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 6060:                                  << " unset.\n";
    %%%%%: 6060-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6060-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 6061:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6061-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 6061-block  1
call    7 never executed
    $$$$$: 6061-block  2
call    8 never executed
    $$$$$: 6061-block  3
    #####: 6062:    fflush(stdout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6062-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 6063:    exit(EXIT_FAILURE);
    %%%%%: 6063-block  0
call    0 never executed
    #####: 6064:  } else if (total_shards != -1 && shard_index == -1) {
    %%%%%: 6064-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6064-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    $$$$$: 6064-block  2
call    4 never executed
    #####: 6065:    const Message msg = Message()
    %%%%%: 6065-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6065-block  1
call    3 never executed
    $$$$$: 6065-block  2
call    4 never executed
    $$$$$: 6065-block  3
    #####: 6066:                        << "Invalid environment variables: you have "
    %%%%%: 6066-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6067:                        << kTestTotalShards << " = " << total_shards
    %%%%%: 6067-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6067-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6067-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 6068:                        << ", but have left " << kTestShardIndex << " unset.\n";
    %%%%%: 6068-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6068-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6068-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 6068-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 6069:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6069-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 6069-block  1
call    7 never executed
    $$$$$: 6069-block  2
call    8 never executed
    $$$$$: 6069-block  3
    #####: 6070:    fflush(stdout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6070-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 6071:    exit(EXIT_FAILURE);
    %%%%%: 6071-block  0
call    0 never executed
    #####: 6072:  } else if (shard_index < 0 || shard_index >= total_shards) {
    %%%%%: 6072-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6072-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    $$$$$: 6072-block  2
call    4 never executed
        -: 6073:    const Message msg =
    #####: 6074:        Message() << "Invalid environment variables: we require 0 <= "
    %%%%%: 6074-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6074-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6074-block  2
call    6 never executed
    $$$$$: 6074-block  3
call    7 never executed
    $$$$$: 6074-block  4
    #####: 6075:                  << kTestShardIndex << " < " << kTestTotalShards
    %%%%%: 6075-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6075-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6075-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 6076:                  << ", but you have " << kTestShardIndex << "=" << shard_index
    %%%%%: 6076-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6076-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6076-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 6076-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 6077:                  << ", " << kTestTotalShards << "=" << total_shards << ".\n";
    %%%%%: 6077-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6077-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6077-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 6077-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 6077-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 6077-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    #####: 6078:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6078-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 6078-block  1
call    7 never executed
    $$$$$: 6078-block  2
call    8 never executed
    $$$$$: 6078-block  3
    #####: 6079:    fflush(stdout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6079-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 6080:    exit(EXIT_FAILURE);
    %%%%%: 6080-block  0
call    0 never executed
    =====: 6081:  }
    $$$$$: 6081-block  0
call    0 never executed
        -: 6082:
    #####: 6083:  return total_shards > 1;
    %%%%%: 6083-block  0
        -: 6084:}
        -: 6085:
        -: 6086:// Parses the environment variable var as an Int32. If it is unset,
        -: 6087:// returns default_val. If it is not an Int32, prints an error
        -: 6088:// and aborts.
function _ZN7testing8internal17Int32FromEnvOrDieEPKci called 4 returned 100% blocks executed 35%
        4: 6089:int32_t Int32FromEnvOrDie(const char* var, int32_t default_val) {
        4: 6090:  const char* str_val = posix::GetEnv(var);
        4: 6090-block  0
call    0 returned 4
        4: 6091:  if (str_val == nullptr) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 6092:    return default_val;
        4: 6092-block  0
        -: 6093:  }
        -: 6094:
        -: 6095:  int32_t result;
    #####: 6096:  if (!ParseInt32(Message() << "The value of environment variable " << var,
    %%%%%: 6096-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6096-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6096-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 6096-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 6096-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed
    $$$$$: 6096-block  5
call   15 never executed
    $$$$$: 6096-block  6
        -: 6097:                  str_val, &result)) {
    #####: 6098:    exit(EXIT_FAILURE);
    %%%%%: 6098-block  0
call    0 never executed
        -: 6099:  }
    #####: 6100:  return result;
    %%%%%: 6100-block  0
        -: 6101:}
        -: 6102:
        -: 6103:// Given the total number of shards, the shard index, and the test id,
        -: 6104:// returns true if and only if the test should be run on this shard. The test id
        -: 6105:// is some arbitrary but unique non-negative integer assigned to each test
        -: 6106:// method. Assumes that 0 <= shard_index < total_shards.
function _ZN7testing8internal20ShouldRunTestOnShardEiii called 0 returned 0% blocks executed 0%
    #####: 6107:bool ShouldRunTestOnShard(int total_shards, int shard_index, int test_id) {
    #####: 6108:  return (test_id % total_shards) == shard_index;
    %%%%%: 6108-block  0
        -: 6109:}
        -: 6110:
        -: 6111:// Compares the name of each test with the user-specified filter to
        -: 6112:// decide whether the test should be run, then records the result in
        -: 6113:// each TestSuite and TestInfo object.
        -: 6114:// If shard_tests == true, further filters tests based on sharding
        -: 6115:// variables in the environment - see
        -: 6116:// https://github.com/google/googletest/blob/main/docs/advanced.md
        -: 6117:// . Returns the number of tests that should run.
function _ZN7testing8internal12UnitTestImpl11FilterTestsENS1_18ReactionToShardingE called 1 returned 100% blocks executed 65%
        1: 6118:int UnitTestImpl::FilterTests(ReactionToSharding shard_tests) {
        -: 6119:  const int32_t total_shards = shard_tests == HONOR_SHARDING_PROTOCOL
       1*: 6120:                                   ? Int32FromEnvOrDie(kTestTotalShards, -1)
        1: 6120-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6120-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 6120-block  2
        1: 6120-block  3
        1: 6121:                                   : -1;
        -: 6122:  const int32_t shard_index = shard_tests == HONOR_SHARDING_PROTOCOL
       1*: 6123:                                  ? Int32FromEnvOrDie(kTestShardIndex, -1)
        1: 6123-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6123-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 6123-block  2
        1: 6123-block  3
        1: 6124:                                  : -1;
        -: 6125:
        -: 6126:  const PositiveAndNegativeUnitTestFilter gtest_flag_filter(
        1: 6127:      GTEST_FLAG_GET(filter));
        1: 6127-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6128:  const UnitTestFilter disable_test_filter(kDisableTestFilter);
        1: 6128-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6128-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 6128-block  2
call    6 returned 1
    $$$$$: 6128-block  3
call    7 never executed
    $$$$$: 6128-block  4
    $$$$$: 6128-block  5
        -: 6129:  // num_runnable_tests are the number of tests that will
        -: 6130:  // run across all shards (i.e., match filter and are not disabled).
        -: 6131:  // num_selected_tests are the number of tests to be run on
        -: 6132:  // this shard.
        1: 6133:  int num_runnable_tests = 0;
        1: 6134:  int num_selected_tests = 0;
       11: 6135:  for (auto* test_suite : test_suites_) {
        1: 6135-block  0
call    0 returned 1
call    1 returned 1
       10: 6135-block  1
call    2 returned 10
call    3 returned 10
       11: 6135-block  2
call    4 returned 11
branch  5 taken 10
branch  6 taken 1 (fallthrough)
       10: 6136:    const std::string& test_suite_name = test_suite->name();
       10: 6136-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 10 (fallthrough)
branch  3 taken 0 (throw)
       10: 6136-block  1
    $$$$$: 6136-block  2
       10: 6137:    test_suite->set_should_run(false);
       10: 6137-block  0
call    0 returned 10
        -: 6138:
       53: 6139:    for (size_t j = 0; j < test_suite->test_info_list().size(); j++) {
       53: 6139-block  0
call    0 returned 53
call    1 returned 53
branch  2 taken 43
branch  3 taken 10 (fallthrough)
       43: 6140:      TestInfo* const test_info = test_suite->test_info_list()[j];
       43: 6140-block  0
call    0 returned 43
call    1 returned 43
       43: 6141:      const std::string test_name(test_info->name());
       43: 6141-block  0
call    0 returned 43
call    1 returned 43
branch  2 taken 43 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 6141-block  1
        -: 6142:      // A test is disabled if test suite name or test name matches
        -: 6143:      // kDisableTestFilter.
        -: 6144:      const bool is_disabled =
      86*: 6145:          disable_test_filter.MatchesName(test_suite_name) ||
       43: 6145-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43: 6145-block  1
branch  3 taken 43 (fallthrough)
branch  4 taken 0
    %%%%%: 6145-block  2
       43: 6145-block  3
       43: 6146:          disable_test_filter.MatchesName(test_name);
       43: 6146-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43: 6146-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 43
       43: 6147:      test_info->is_disabled_ = is_disabled;
        -: 6148:
        -: 6149:      const bool matches_filter =
       43: 6150:          gtest_flag_filter.MatchesTest(test_suite_name, test_name);
       43: 6150-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43: 6151:      test_info->matches_filter_ = matches_filter;
        -: 6152:
       43: 6153:      const bool is_runnable =
      43*: 6154:          (GTEST_FLAG_GET(also_run_disabled_tests) || !is_disabled) &&
       43: 6154-block  0
branch  0 taken 43 (fallthrough)
branch  1 taken 0
       43: 6154-block  1
branch  2 taken 43 (fallthrough)
branch  3 taken 0
       43: 6154-block  2
branch  4 taken 43 (fallthrough)
branch  5 taken 0
       43: 6154-block  3
    %%%%%: 6154-block  4
        -: 6155:          matches_filter;
        -: 6156:
        -: 6157:      const bool is_in_another_shard =
      43*: 6158:          shard_tests != IGNORE_SHARDING_PROTOCOL &&
       43: 6158-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 43
    %%%%%: 6158-block  1
       43: 6158-block  2
    #####: 6159:          !ShouldRunTestOnShard(total_shards, shard_index, num_runnable_tests);
    %%%%%: 6159-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
       43: 6160:      test_info->is_in_another_shard_ = is_in_another_shard;
      43*: 6161:      const bool is_selected = is_runnable && !is_in_another_shard;
       43: 6161-block  0
branch  0 taken 43 (fallthrough)
branch  1 taken 0
       43: 6161-block  1
branch  2 taken 43 (fallthrough)
branch  3 taken 0
       43: 6161-block  2
    %%%%%: 6161-block  3
        -: 6162:
       43: 6163:      num_runnable_tests += is_runnable;
       43: 6164:      num_selected_tests += is_selected;
        -: 6165:
       43: 6166:      test_info->should_run_ = is_selected;
      43*: 6167:      test_suite->set_should_run(test_suite->should_run() || is_selected);
       43: 6167-block  0
call    0 returned 43
branch  1 taken 10 (fallthrough)
branch  2 taken 33
       10: 6167-block  1
branch  3 taken 10 (fallthrough)
branch  4 taken 0
       43: 6167-block  2
    %%%%%: 6167-block  3
       43: 6167-block  4
call    5 returned 43
       43: 6168:    }
call    0 returned 43
    $$$$$: 6168-block  0
call    1 never executed
       10: 6169:  }
       10: 6169-block  0
call    0 returned 10
    $$$$$: 6169-block  1
call    1 never executed
        1: 6170:  return num_selected_tests;
        1: 6170-block  0
        1: 6171:}
        1: 6171-block  0
call    0 returned 1
call    1 returned 1
    $$$$$: 6171-block  1
call    2 never executed
    $$$$$: 6171-block  2
call    3 never executed
        -: 6172:
        -: 6173:// Prints the given C-string on a single line by replacing all '\n'
        -: 6174:// characters with string "\\n".  If the output takes more than
        -: 6175:// max_length characters, only prints the first max_length characters
        -: 6176:// and "...".
function _ZN7testing8internalL14PrintOnOneLineEPKci called 0 returned 0% blocks executed 0%
    #####: 6177:static void PrintOnOneLine(const char* str, int max_length) {
    #####: 6178:  if (str != nullptr) {
    %%%%%: 6178-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6179:    for (int i = 0; *str != '\0'; ++str) {
    %%%%%: 6179-block  0
    %%%%%: 6179-block  1
    %%%%%: 6179-block  2
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 6180:      if (i >= max_length) {
    %%%%%: 6180-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6181:        printf("...");
    %%%%%: 6181-block  0
call    0 never executed
    #####: 6182:        break;
        -: 6183:      }
    #####: 6184:      if (*str == '\n') {
    %%%%%: 6184-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6185:        printf("\\n");
    %%%%%: 6185-block  0
call    0 never executed
    #####: 6186:        i += 2;
        -: 6187:      } else {
    #####: 6188:        printf("%c", *str);
    %%%%%: 6188-block  0
call    0 never executed
    #####: 6189:        ++i;
        -: 6190:      }
        -: 6191:    }
        -: 6192:  }
    #####: 6193:}
        -: 6194:
        -: 6195:// Prints the names of the tests matching the user-specified filter flag.
function _ZN7testing8internal12UnitTestImpl23ListTestsMatchingFilterEv called 0 returned 0% blocks executed 0%
    #####: 6196:void UnitTestImpl::ListTestsMatchingFilter() {
        -: 6197:  // Print at most this many characters for each type/value parameter.
    #####: 6198:  const int kMaxParamLength = 250;
        -: 6199:
    #####: 6200:  for (auto* test_suite : test_suites_) {
    %%%%%: 6200-block  0
call    0 never executed
call    1 never executed
    %%%%%: 6200-block  1
call    2 never executed
    %%%%%: 6200-block  2
call    3 never executed
    %%%%%: 6200-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
    #####: 6201:    bool printed_test_suite_name = false;
        -: 6202:
    #####: 6203:    for (size_t j = 0; j < test_suite->test_info_list().size(); j++) {
    %%%%%: 6203-block  0
    %%%%%: 6203-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed (fallthrough)
    #####: 6204:      const TestInfo* const test_info = test_suite->test_info_list()[j];
    %%%%%: 6204-block  0
call    0 never executed
call    1 never executed
    #####: 6205:      if (test_info->matches_filter_) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6206:        if (!printed_test_suite_name) {
    %%%%%: 6206-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6207:          printed_test_suite_name = true;
    #####: 6208:          printf("%s.", test_suite->name());
    %%%%%: 6208-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 6209:          if (test_suite->type_param() != nullptr) {
    %%%%%: 6209-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 6210:            printf("  # %s = ", kTypeParamLabel);
    %%%%%: 6210-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6211:            // We print the type parameter on a single line to make
        -: 6212:            // the output easy to parse by a program.
    #####: 6213:            PrintOnOneLine(test_suite->type_param(), kMaxParamLength);
    %%%%%: 6213-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 6214:          }
    #####: 6215:          printf("\n");
    %%%%%: 6215-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6216:        }
    #####: 6217:        printf("  %s", test_info->name());
    %%%%%: 6217-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 6218:        if (test_info->value_param() != nullptr) {
    %%%%%: 6218-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 6219:          printf("  # %s = ", kValueParamLabel);
    %%%%%: 6219-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6220:          // We print the value parameter on a single line to make the
        -: 6221:          // output easy to parse by a program.
    #####: 6222:          PrintOnOneLine(test_info->value_param(), kMaxParamLength);
    %%%%%: 6222-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 6223:        }
    #####: 6224:        printf("\n");
    %%%%%: 6224-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6225:      }
        -: 6226:    }
        -: 6227:  }
    #####: 6228:  fflush(stdout);
    %%%%%: 6228-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6228-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 6229:#if GTEST_HAS_FILE_SYSTEM
    #####: 6230:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
    %%%%%: 6230-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6231:  if (output_format == "xml" || output_format == "json") {
    %%%%%: 6231-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6231-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6231-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 6231-block  3
branch  8 never executed (fallthrough)
branch  9 never executed
    %%%%%: 6231-block  4
    %%%%%: 6231-block  5
    %%%%%: 6231-block  6
branch 10 never executed (fallthrough)
branch 11 never executed
        -: 6232:    FILE* fileout =
    #####: 6233:        OpenFileForWriting(UnitTestOptions::GetAbsolutePathToOutputFile());
    %%%%%: 6233-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6233-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6233-block  2
call    6 never executed
    $$$$$: 6233-block  3
call    7 never executed
    $$$$$: 6233-block  4
    #####: 6234:    std::stringstream stream;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6235:    if (output_format == "xml") {
    %%%%%: 6235-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6235-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 6236:      XmlUnitTestResultPrinter(
    %%%%%: 6236-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 6236-block  1
call    4 never executed
    $$$$$: 6236-block  2
call    5 never executed
    $$$$$: 6236-block  3
    #####: 6237:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 6237-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 6237-block  1
call    4 never executed
    $$$$$: 6237-block  2
    #####: 6238:          .PrintXmlTestsList(&stream, test_suites_);
    %%%%%: 6238-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6239:    } else if (output_format == "json") {
    %%%%%: 6239-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6239-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 6240:      JsonUnitTestResultPrinter(
    %%%%%: 6240-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 6240-block  1
call    4 never executed
    $$$$$: 6240-block  2
call    5 never executed
    $$$$$: 6240-block  3
    #####: 6241:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 6241-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 6241-block  1
call    4 never executed
    $$$$$: 6241-block  2
    #####: 6242:          .PrintJsonTestList(&stream, test_suites_);
    %%%%%: 6242-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6243:    }
    #####: 6244:    fprintf(fileout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 6244-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6244-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    $$$$$: 6244-block  2
    #####: 6245:    fclose(fileout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6246:  }
    %%%%%: 6246-block  0
call    0 never executed
    $$$$$: 6246-block  1
call    1 never executed
        -: 6247:#endif  // GTEST_HAS_FILE_SYSTEM
    #####: 6248:}
    %%%%%: 6248-block  0
call    0 never executed
    $$$$$: 6248-block  1
call    1 never executed
        -: 6249:
        -: 6250:// Sets the OS stack trace getter.
        -: 6251://
        -: 6252:// Does nothing if the input and the current OS stack trace getter are
        -: 6253:// the same; otherwise, deletes the old getter and makes the input the
        -: 6254:// current getter.
function _ZN7testing8internal12UnitTestImpl25set_os_stack_trace_getterEPNS0_27OsStackTraceGetterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 6255:void UnitTestImpl::set_os_stack_trace_getter(
        -: 6256:    OsStackTraceGetterInterface* getter) {
    #####: 6257:  if (os_stack_trace_getter_ != getter) {
    %%%%%: 6257-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6258:    delete os_stack_trace_getter_;
    %%%%%: 6258-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6258-block  1
call    2 never executed
    #####: 6259:    os_stack_trace_getter_ = getter;
    %%%%%: 6259-block  0
        -: 6260:  }
    #####: 6261:}
        -: 6262:
        -: 6263:// Returns the current OS stack trace getter if it is not NULL;
        -: 6264:// otherwise, creates an OsStackTraceGetter, makes it the current
        -: 6265:// getter, and returns it.
function _ZN7testing8internal12UnitTestImpl21os_stack_trace_getterEv called 242 returned 100% blocks executed 100%
      242: 6266:OsStackTraceGetterInterface* UnitTestImpl::os_stack_trace_getter() {
      242: 6267:  if (os_stack_trace_getter_ == nullptr) {
      242: 6267-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 241
        -: 6268:#ifdef GTEST_OS_STACK_TRACE_GETTER_
        -: 6269:    os_stack_trace_getter_ = new GTEST_OS_STACK_TRACE_GETTER_;
        -: 6270:#else
        1: 6271:    os_stack_trace_getter_ = new OsStackTraceGetter;
        1: 6271-block  0
call    0 returned 1
call    1 returned 1
        -: 6272:#endif  // GTEST_OS_STACK_TRACE_GETTER_
        -: 6273:  }
        -: 6274:
      242: 6275:  return os_stack_trace_getter_;
      242: 6275-block  0
        -: 6276:}
        -: 6277:
        -: 6278:// Returns the most specific TestResult currently running.
function _ZN7testing8internal12UnitTestImpl19current_test_resultEv called 181 returned 100% blocks executed 83%
      181: 6279:TestResult* UnitTestImpl::current_test_result() {
      181: 6280:  if (current_test_info_ != nullptr) {
      181: 6280-block  0
branch  0 taken 179 (fallthrough)
branch  1 taken 2
      179: 6281:    return &current_test_info_->result_;
      179: 6281-block  0
        -: 6282:  }
        2: 6283:  if (current_test_suite_ != nullptr) {
        2: 6283-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 6284:    return &current_test_suite_->ad_hoc_test_result_;
    %%%%%: 6284-block  0
        -: 6285:  }
        2: 6286:  return &ad_hoc_test_result_;
        2: 6286-block  0
        -: 6287:}
        -: 6288:
        -: 6289:// Shuffles all test suites, and the tests within each test suite,
        -: 6290:// making sure that death tests are still run first.
function _ZN7testing8internal12UnitTestImpl12ShuffleTestsEv called 0 returned 0% blocks executed 0%
    #####: 6291:void UnitTestImpl::ShuffleTests() {
        -: 6292:  // Shuffles the death test suites.
    #####: 6293:  ShuffleRange(random(), 0, last_death_test_suite_ + 1, &test_suite_indices_);
    %%%%%: 6293-block  0
call    0 never executed
call    1 never executed
        -: 6294:
        -: 6295:  // Shuffles the non-death test suites.
    #####: 6296:  ShuffleRange(random(), last_death_test_suite_ + 1,
call    0 never executed
call    1 never executed
    #####: 6297:               static_cast<int>(test_suites_.size()), &test_suite_indices_);
call    0 never executed
        -: 6298:
        -: 6299:  // Shuffles the tests inside each test suite.
    #####: 6300:  for (auto& test_suite : test_suites_) {
call    0 never executed
call    1 never executed
    %%%%%: 6300-block  0
call    2 never executed
    %%%%%: 6300-block  1
call    3 never executed
    %%%%%: 6300-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
    #####: 6301:    test_suite->ShuffleTests(random());
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 6302:  }
    #####: 6303:}
    %%%%%: 6303-block  0
        -: 6304:
        -: 6305:// Restores the test suites and tests to their order before the first shuffle.
function _ZN7testing8internal12UnitTestImpl14UnshuffleTestsEv called 1 returned 100% blocks executed 100%
        1: 6306:void UnitTestImpl::UnshuffleTests() {
       11: 6307:  for (size_t i = 0; i < test_suites_.size(); i++) {
        1: 6307-block  0
       11: 6307-block  1
call    0 returned 11
branch  1 taken 10
branch  2 taken 1 (fallthrough)
        -: 6308:    // Unshuffles the tests in each test suite.
       10: 6309:    test_suites_[i]->UnshuffleTests();
       10: 6309-block  0
call    0 returned 10
call    1 returned 10
        -: 6310:    // Resets the index of each test suite.
       10: 6311:    test_suite_indices_[i] = static_cast<int>(i);
call    0 returned 10
        -: 6312:  }
        1: 6313:}
        -: 6314:
        -: 6315:// Returns the current OS stack trace as an std::string.
        -: 6316://
        -: 6317:// The maximum number of stack frames to be included is specified by
        -: 6318:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 6319:// specifies the number of top frames to be skipped, which doesn't
        -: 6320:// count against the number of frames to be included.
        -: 6321://
        -: 6322:// For example, if Foo() calls Bar(), which in turn calls
        -: 6323:// GetCurrentOsStackTraceExceptTop(..., 1), Foo() will be included in
        -: 6324:// the trace but Bar() and GetCurrentOsStackTraceExceptTop() won't.
        -: 6325:GTEST_NO_INLINE_ GTEST_NO_TAIL_CALL_ std::string
function _ZN7testing8internal31GetCurrentOsStackTraceExceptTopB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 6326:GetCurrentOsStackTraceExceptTop(int skip_count) {
        -: 6327:  // We pass skip_count + 1 to skip this wrapper function in addition
        -: 6328:  // to what the user really wants to skip.
    #####: 6329:  return GetUnitTestImpl()->CurrentOsStackTraceExceptTop(skip_count + 1);
    %%%%%: 6329-block  0
call    0 never executed
call    1 never executed
        -: 6330:}
        -: 6331:
        -: 6332:// Used by the GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_ macro to
        -: 6333:// suppress unreachable code warnings.
        -: 6334:namespace {
        -: 6335:class ClassUniqueToAlwaysTrue {};
        -: 6336:}  // namespace
        -: 6337:
function _ZN7testing8internal6IsTrueEb called 128 returned 100% blocks executed 100%
      128: 6338:bool IsTrue(bool condition) { return condition; }
      128: 6338-block  0
        -: 6339:
function _ZN7testing8internal10AlwaysTrueEv called 24 returned 100% blocks executed 67%
       24: 6340:bool AlwaysTrue() {
        -: 6341:#if GTEST_HAS_EXCEPTIONS
        -: 6342:  // This condition is always false so AlwaysTrue() never actually throws,
        -: 6343:  // but it makes the compiler think that it may throw.
      24*: 6344:  if (IsTrue(false)) throw ClassUniqueToAlwaysTrue();
       24: 6344-block  0
call    0 returned 24
branch  1 taken 0 (fallthrough)
branch  2 taken 24
    %%%%%: 6344-block  1
call    3 never executed
call    4 never executed
        -: 6345:#endif  // GTEST_HAS_EXCEPTIONS
       24: 6346:  return true;
       24: 6346-block  0
        -: 6347:}
        -: 6348:
        -: 6349:// If *pstr starts with the given prefix, modifies *pstr to be right
        -: 6350:// past the prefix and returns true; otherwise leaves *pstr unchanged
        -: 6351:// and returns false.  None of pstr, *pstr, and prefix can be NULL.
function _ZN7testing8internal10SkipPrefixEPKcPS2_ called 0 returned 0% blocks executed 0%
    #####: 6352:bool SkipPrefix(const char* prefix, const char** pstr) {
    #####: 6353:  const size_t prefix_len = strlen(prefix);
    #####: 6354:  if (strncmp(*pstr, prefix, prefix_len) == 0) {
    %%%%%: 6354-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6355:    *pstr += prefix_len;
    #####: 6356:    return true;
    %%%%%: 6356-block  0
        -: 6357:  }
    #####: 6358:  return false;
    %%%%%: 6358-block  0
        -: 6359:}
        -: 6360:
        -: 6361:// Parses a string as a command line flag.  The string should have
        -: 6362:// the format "--flag=value".  When def_optional is true, the "=value"
        -: 6363:// part can be omitted.
        -: 6364://
        -: 6365:// Returns the value of the flag, or NULL if the parsing failed.
function _ZN7testing8internalL14ParseFlagValueEPKcS2_b called 4 returned 100% blocks executed 62%
        4: 6366:static const char* ParseFlagValue(const char* str, const char* flag_name,
        -: 6367:                                  bool def_optional) {
        -: 6368:  // str and flag must not be NULL.
       4*: 6369:  if (str == nullptr || flag_name == nullptr) return nullptr;
        4: 6369-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 6369-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 4
    %%%%%: 6369-block  2
        -: 6370:
        -: 6371:  // The flag must start with "--" followed by GTEST_FLAG_PREFIX_.
        -: 6372:  const std::string flag_str =
        4: 6373:      std::string("--") + GTEST_FLAG_PREFIX_ + flag_name;
        4: 6373-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 6373-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4: 6373-block  2
call    6 returned 4
branch  7 taken 4 (fallthrough)
branch  8 taken 0 (throw)
        4: 6373-block  3
call    9 returned 4
call   10 returned 4
    $$$$$: 6373-block  4
call   11 never executed
    $$$$$: 6373-block  5
call   12 never executed
    $$$$$: 6373-block  6
    $$$$$: 6373-block  7
    $$$$$: 6373-block  8
        4: 6374:  const size_t flag_len = flag_str.length();
        4: 6374-block  0
call    0 returned 4
        4: 6375:  if (strncmp(str, flag_str.c_str(), flag_len) != 0) return nullptr;
call    0 returned 4
branch  1 taken 3 (fallthrough)
branch  2 taken 1
        3: 6375-block  0
        -: 6376:
        -: 6377:  // Skips the flag name.
        1: 6378:  const char* flag_end = str + flag_len;
        -: 6379:
        -: 6380:  // When def_optional is true, it's OK to not have a "=value" part.
       1*: 6381:  if (def_optional && (flag_end[0] == '\0')) {
        1: 6381-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6381-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 6382:    return flag_end;
    %%%%%: 6382-block  0
        -: 6383:  }
        -: 6384:
        -: 6385:  // If def_optional is true and there are more characters after the
        -: 6386:  // flag name, or if def_optional is false, there must be a '=' after
        -: 6387:  // the flag name.
       1*: 6388:  if (flag_end[0] != '=') return nullptr;
        1: 6388-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6388-block  1
        -: 6389:
        -: 6390:  // Returns the string after "=".
        1: 6391:  return flag_end + 1;
        1: 6391-block  0
        4: 6392:}
        4: 6392-block  0
call    0 returned 4
        -: 6393:
        -: 6394:// Parses a string for a bool flag, in the form of either
        -: 6395:// "--flag=value" or "--flag".
        -: 6396://
        -: 6397:// In the former case, the value is taken as true as long as it does
        -: 6398:// not start with '0', 'f', or 'F'.
        -: 6399://
        -: 6400:// In the latter case, the value is taken as true.
        -: 6401://
        -: 6402:// On success, stores the value of the flag in *value, and returns
        -: 6403:// true.  On failure, returns false without changing *value.
function _ZN7testing8internalL9ParseFlagEPKcS2_Pb called 3 returned 100% blocks executed 40%
        3: 6404:static bool ParseFlag(const char* str, const char* flag_name, bool* value) {
        -: 6405:  // Gets the value of the flag as a string.
        3: 6406:  const char* const value_str = ParseFlagValue(str, flag_name, true);
        3: 6406-block  0
call    0 returned 3
        -: 6407:
        -: 6408:  // Aborts if the parsing failed.
        3: 6409:  if (value_str == nullptr) return false;
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 6409-block  0
        -: 6410:
        -: 6411:  // Converts the string value to a bool.
    #####: 6412:  *value = !(*value_str == '0' || *value_str == 'f' || *value_str == 'F');
    %%%%%: 6412-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6412-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 6412-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 6412-block  3
    %%%%%: 6412-block  4
    #####: 6413:  return true;
    %%%%%: 6413-block  0
        -: 6414:}
        -: 6415:
        -: 6416:// Parses a string for an int32_t flag, in the form of "--flag=value".
        -: 6417://
        -: 6418:// On success, stores the value of the flag in *value, and returns
        -: 6419:// true.  On failure, returns false without changing *value.
function _ZN7testing8internal9ParseFlagEPKcS2_Pi called 0 returned 0% blocks executed 0%
    #####: 6420:bool ParseFlag(const char* str, const char* flag_name, int32_t* value) {
        -: 6421:  // Gets the value of the flag as a string.
    #####: 6422:  const char* const value_str = ParseFlagValue(str, flag_name, false);
    %%%%%: 6422-block  0
call    0 never executed
        -: 6423:
        -: 6424:  // Aborts if the parsing failed.
    #####: 6425:  if (value_str == nullptr) return false;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6425-block  0
        -: 6426:
        -: 6427:  // Sets *value to the value of the flag.
    #####: 6428:  return ParseInt32(Message() << "The value of flag --" << flag_name, value_str,
    %%%%%: 6428-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6428-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6428-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 6428-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 6428-block  4
call   12 never executed
    $$$$$: 6428-block  5
call   13 never executed
    #####: 6429:                    value);
    %%%%%: 6429-block  0
        -: 6430:}
        -: 6431:
        -: 6432:// Parses a string for a string flag, in the form of "--flag=value".
        -: 6433://
        -: 6434:// On success, stores the value of the flag in *value, and returns
        -: 6435:// true.  On failure, returns false without changing *value.
        -: 6436:template <typename String>
function _ZN7testing8internalL9ParseFlagINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbPKcS9_PT_ called 1 returned 100% blocks executed 83%
        1: 6437:static bool ParseFlag(const char* str, const char* flag_name, String* value) {
        -: 6438:  // Gets the value of the flag as a string.
        1: 6439:  const char* const value_str = ParseFlagValue(str, flag_name, false);
        1: 6439-block  0
call    0 returned 1
        -: 6440:
        -: 6441:  // Aborts if the parsing failed.
       1*: 6442:  if (value_str == nullptr) return false;
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6442-block  0
        -: 6443:
        -: 6444:  // Sets *value to the value of the flag.
        1: 6445:  *value = value_str;
        1: 6445-block  0
call    0 returned 1
        1: 6446:  return true;
        -: 6447:}
        -: 6448:
        -: 6449:// Determines whether a string has a prefix that Google Test uses for its
        -: 6450:// flags, i.e., starts with GTEST_FLAG_PREFIX_ or GTEST_FLAG_PREFIX_DASH_.
        -: 6451:// If Google Test detects that a command line flag has its prefix but is not
        -: 6452:// recognized, it will print its help message. Flags starting with
        -: 6453:// GTEST_INTERNAL_PREFIX_ followed by "internal_" are considered Google Test
        -: 6454:// internal flags and do not trigger the help message.
function _ZN7testing8internalL23HasGoogleTestFlagPrefixEPKc called 0 returned 0% blocks executed 0%
    #####: 6455:static bool HasGoogleTestFlagPrefix(const char* str) {
    #####: 6456:  return (SkipPrefix("--", &str) || SkipPrefix("-", &str) ||
    %%%%%: 6456-block  0
call    0 never executed
    %%%%%: 6456-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 6457:          SkipPrefix("/", &str)) &&
    %%%%%: 6457-block  0
call    0 never executed
    #####: 6458:         !SkipPrefix(GTEST_FLAG_PREFIX_ "internal_", &str) &&
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6458-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 6458-block  1
    %%%%%: 6458-block  2
    #####: 6459:         (SkipPrefix(GTEST_FLAG_PREFIX_, &str) ||
    %%%%%: 6459-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 6460:          SkipPrefix(GTEST_FLAG_PREFIX_DASH_, &str));
    %%%%%: 6460-block  0
call    0 never executed
    %%%%%: 6460-block  1
        -: 6461:}
        -: 6462:
        -: 6463:// Prints a string containing code-encoded text.  The following escape
        -: 6464:// sequences can be used in the string to control the text color:
        -: 6465://
        -: 6466://   @@    prints a single '@' character.
        -: 6467://   @R    changes the color to red.
        -: 6468://   @G    changes the color to green.
        -: 6469://   @Y    changes the color to yellow.
        -: 6470://   @D    changes to the default terminal text color.
        -: 6471://
function _ZN7testing8internalL17PrintColorEncodedEPKc called 0 returned 0% blocks executed 0%
    #####: 6472:static void PrintColorEncoded(const char* str) {
    #####: 6473:  GTestColor color = GTestColor::kDefault;  // The current color.
    %%%%%: 6473-block  0
        -: 6474:
        -: 6475:  // Conceptually, we split the string into segments divided by escape
        -: 6476:  // sequences.  Then we print one segment at a time.  At the end of
        -: 6477:  // each iteration, the str pointer advances to the beginning of the
        -: 6478:  // next segment.
        -: 6479:  for (;;) {
    #####: 6480:    const char* p = strchr(str, '@');
    #####: 6481:    if (p == nullptr) {
    %%%%%: 6481-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6482:      ColoredPrintf(color, "%s", str);
    %%%%%: 6482-block  0
call    0 never executed
    #####: 6483:      return;
    %%%%%: 6483-block  0
        -: 6484:    }
        -: 6485:
    #####: 6486:    ColoredPrintf(color, "%s", std::string(str, p).c_str());
    %%%%%: 6486-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6486-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 6486-block  2
call    7 never executed
    $$$$$: 6486-block  3
call    8 never executed
    $$$$$: 6486-block  4
        -: 6487:
    #####: 6488:    const char ch = p[1];
    #####: 6489:    str = p + 2;
    #####: 6490:    if (ch == '@') {
    %%%%%: 6490-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6491:      ColoredPrintf(color, "@");
    %%%%%: 6491-block  0
call    0 never executed
    #####: 6492:    } else if (ch == 'D') {
    %%%%%: 6492-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6493:      color = GTestColor::kDefault;
    %%%%%: 6493-block  0
    #####: 6494:    } else if (ch == 'R') {
    %%%%%: 6494-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6495:      color = GTestColor::kRed;
    %%%%%: 6495-block  0
    #####: 6496:    } else if (ch == 'G') {
    %%%%%: 6496-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6497:      color = GTestColor::kGreen;
    %%%%%: 6497-block  0
    #####: 6498:    } else if (ch == 'Y') {
    %%%%%: 6498-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6499:      color = GTestColor::kYellow;
    %%%%%: 6499-block  0
        -: 6500:    } else {
    #####: 6501:      --str;
    %%%%%: 6501-block  0
        -: 6502:    }
    #####: 6503:  }
    %%%%%: 6503-block  0
        -: 6504:}
        -: 6505:
        -: 6506:static const char kColorEncodedHelpMessage[] =
        -: 6507:    "This program contains tests written using " GTEST_NAME_
        -: 6508:    ". You can use the\n"
        -: 6509:    "following command line flags to control its behavior:\n"
        -: 6510:    "\n"
        -: 6511:    "Test Selection:\n"
        -: 6512:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6513:    "list_tests@D\n"
        -: 6514:    "      List the names of all tests instead of running them. The name of\n"
        -: 6515:    "      TEST(Foo, Bar) is \"Foo.Bar\".\n"
        -: 6516:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6517:    "filter=@YPOSITIVE_PATTERNS"
        -: 6518:    "[@G-@YNEGATIVE_PATTERNS]@D\n"
        -: 6519:    "      Run only the tests whose name matches one of the positive patterns "
        -: 6520:    "but\n"
        -: 6521:    "      none of the negative patterns. '?' matches any single character; "
        -: 6522:    "'*'\n"
        -: 6523:    "      matches any substring; ':' separates two patterns.\n"
        -: 6524:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6525:    "also_run_disabled_tests@D\n"
        -: 6526:    "      Run all disabled tests too.\n"
        -: 6527:    "\n"
        -: 6528:    "Test Execution:\n"
        -: 6529:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6530:    "repeat=@Y[COUNT]@D\n"
        -: 6531:    "      Run the tests repeatedly; use a negative count to repeat forever.\n"
        -: 6532:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6533:    "shuffle@D\n"
        -: 6534:    "      Randomize tests' orders on every iteration.\n"
        -: 6535:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6536:    "random_seed=@Y[NUMBER]@D\n"
        -: 6537:    "      Random number seed to use for shuffling test orders (between 1 and\n"
        -: 6538:    "      99999, or 0 to use a seed based on the current time).\n"
        -: 6539:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6540:    "recreate_environments_when_repeating@D\n"
        -: 6541:    "      Sets up and tears down the global test environment on each repeat\n"
        -: 6542:    "      of the test.\n"
        -: 6543:    "\n"
        -: 6544:    "Test Output:\n"
        -: 6545:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6546:    "color=@Y(@Gyes@Y|@Gno@Y|@Gauto@Y)@D\n"
        -: 6547:    "      Enable/disable colored output. The default is @Gauto@D.\n"
        -: 6548:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6549:    "brief=1@D\n"
        -: 6550:    "      Only print test failures.\n"
        -: 6551:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6552:    "print_time=0@D\n"
        -: 6553:    "      Don't print the elapsed time of each test.\n"
        -: 6554:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6555:    "output=@Y(@Gjson@Y|@Gxml@Y)[@G:@YDIRECTORY_PATH@G" GTEST_PATH_SEP_
        -: 6556:    "@Y|@G:@YFILE_PATH]@D\n"
        -: 6557:    "      Generate a JSON or XML report in the given directory or with the "
        -: 6558:    "given\n"
        -: 6559:    "      file name. @YFILE_PATH@D defaults to @Gtest_detail.xml@D.\n"
        -: 6560:#if GTEST_CAN_STREAM_RESULTS_
        -: 6561:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6562:    "stream_result_to=@YHOST@G:@YPORT@D\n"
        -: 6563:    "      Stream test results to the given server.\n"
        -: 6564:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 6565:    "\n"
        -: 6566:    "Assertion Behavior:\n"
        -: 6567:#if defined(GTEST_HAS_DEATH_TEST) && !defined(GTEST_OS_WINDOWS)
        -: 6568:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6569:    "death_test_style=@Y(@Gfast@Y|@Gthreadsafe@Y)@D\n"
        -: 6570:    "      Set the default death test style.\n"
        -: 6571:#endif  // GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 6572:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6573:    "break_on_failure@D\n"
        -: 6574:    "      Turn assertion failures into debugger break-points.\n"
        -: 6575:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6576:    "throw_on_failure@D\n"
        -: 6577:    "      Turn assertion failures into C++ exceptions for use by an external\n"
        -: 6578:    "      test framework.\n"
        -: 6579:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6580:    "catch_exceptions=0@D\n"
        -: 6581:    "      Do not report exceptions as test failures. Instead, allow them\n"
        -: 6582:    "      to crash the program or throw a pop-up (on Windows).\n"
        -: 6583:    "\n"
        -: 6584:    "Except for @G--" GTEST_FLAG_PREFIX_
        -: 6585:    "list_tests@D, you can alternatively set "
        -: 6586:    "the corresponding\n"
        -: 6587:    "environment variable of a flag (all letters in upper-case). For example, "
        -: 6588:    "to\n"
        -: 6589:    "disable colored text output, you can either specify "
        -: 6590:    "@G--" GTEST_FLAG_PREFIX_
        -: 6591:    "color=no@D or set\n"
        -: 6592:    "the @G" GTEST_FLAG_PREFIX_UPPER_
        -: 6593:    "COLOR@D environment variable to @Gno@D.\n"
        -: 6594:    "\n"
        -: 6595:    "For more information, please read the " GTEST_NAME_
        -: 6596:    " documentation at\n"
        -: 6597:    "@G" GTEST_PROJECT_URL_ "@D. If you find a bug in " GTEST_NAME_
        -: 6598:    "\n"
        -: 6599:    "(not one in your own code or tests), please report it to\n"
        -: 6600:    "@G<" GTEST_DEV_EMAIL_ ">@D.\n";
        -: 6601:
function _ZN7testing8internalL19ParseGoogleTestFlagEPKc called 1 returned 100% blocks executed 10%
        1: 6602:static bool ParseGoogleTestFlag(const char* const arg) {
        -: 6603:#define GTEST_INTERNAL_PARSE_FLAG(flag_name)  \
        -: 6604:  do {                                        \
        -: 6605:    auto value = GTEST_FLAG_GET(flag_name);   \
        -: 6606:    if (ParseFlag(arg, #flag_name, &value)) { \
        -: 6607:      GTEST_FLAG_SET(flag_name, value);       \
        -: 6608:      return true;                            \
        -: 6609:    }                                         \
        -: 6610:  } while (false)
        -: 6611:
       1*: 6612:  GTEST_INTERNAL_PARSE_FLAG(also_run_disabled_tests);
        1: 6612-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6612-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 6612-block  2
    %%%%%: 6612-block  3
       1*: 6613:  GTEST_INTERNAL_PARSE_FLAG(break_on_failure);
        1: 6613-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6613-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 6613-block  2
    %%%%%: 6613-block  3
       1*: 6614:  GTEST_INTERNAL_PARSE_FLAG(catch_exceptions);
        1: 6614-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6614-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 6614-block  2
    %%%%%: 6614-block  3
       1*: 6615:  GTEST_INTERNAL_PARSE_FLAG(color);
        1: 6615-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6615-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 6615-block  2
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        1: 6615-block  3
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 6615-block  4
    %%%%%: 6615-block  5
        1: 6615-block  6
call   11 returned 1
branch 12 taken 0 (fallthrough)
branch 13 taken 1
    %%%%%: 6615-block  7
    $$$$$: 6615-block  8
call   14 never executed
    #####: 6616:  GTEST_INTERNAL_PARSE_FLAG(death_test_style);
    %%%%%: 6616-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6616-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6616-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6616-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 6616-block  4
    %%%%%: 6616-block  5
    %%%%%: 6616-block  6
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%: 6616-block  7
    $$$$$: 6616-block  8
call   14 never executed
    #####: 6617:  GTEST_INTERNAL_PARSE_FLAG(death_test_use_fork);
    %%%%%: 6617-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6617-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6617-block  2
    %%%%%: 6617-block  3
    #####: 6618:  GTEST_INTERNAL_PARSE_FLAG(fail_fast);
    %%%%%: 6618-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6618-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6618-block  2
    %%%%%: 6618-block  3
    #####: 6619:  GTEST_INTERNAL_PARSE_FLAG(filter);
    %%%%%: 6619-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6619-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6619-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6619-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 6619-block  4
    %%%%%: 6619-block  5
    %%%%%: 6619-block  6
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%: 6619-block  7
    $$$$$: 6619-block  8
call   14 never executed
    #####: 6620:  GTEST_INTERNAL_PARSE_FLAG(internal_run_death_test);
    %%%%%: 6620-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6620-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6620-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6620-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 6620-block  4
    %%%%%: 6620-block  5
    %%%%%: 6620-block  6
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%: 6620-block  7
    $$$$$: 6620-block  8
call   14 never executed
    #####: 6621:  GTEST_INTERNAL_PARSE_FLAG(list_tests);
    %%%%%: 6621-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6621-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6621-block  2
    %%%%%: 6621-block  3
    #####: 6622:  GTEST_INTERNAL_PARSE_FLAG(output);
    %%%%%: 6622-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6622-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6622-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6622-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 6622-block  4
    %%%%%: 6622-block  5
    %%%%%: 6622-block  6
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%: 6622-block  7
    $$$$$: 6622-block  8
call   14 never executed
    #####: 6623:  GTEST_INTERNAL_PARSE_FLAG(brief);
    %%%%%: 6623-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6623-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6623-block  2
    %%%%%: 6623-block  3
    #####: 6624:  GTEST_INTERNAL_PARSE_FLAG(print_time);
    %%%%%: 6624-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6624-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6624-block  2
    %%%%%: 6624-block  3
    #####: 6625:  GTEST_INTERNAL_PARSE_FLAG(print_utf8);
    %%%%%: 6625-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6625-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6625-block  2
    %%%%%: 6625-block  3
    #####: 6626:  GTEST_INTERNAL_PARSE_FLAG(random_seed);
    %%%%%: 6626-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6626-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6626-block  2
    %%%%%: 6626-block  3
    #####: 6627:  GTEST_INTERNAL_PARSE_FLAG(repeat);
    %%%%%: 6627-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6627-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6627-block  2
    %%%%%: 6627-block  3
    #####: 6628:  GTEST_INTERNAL_PARSE_FLAG(recreate_environments_when_repeating);
    %%%%%: 6628-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6628-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6628-block  2
    %%%%%: 6628-block  3
    #####: 6629:  GTEST_INTERNAL_PARSE_FLAG(shuffle);
    %%%%%: 6629-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6629-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6629-block  2
    %%%%%: 6629-block  3
    #####: 6630:  GTEST_INTERNAL_PARSE_FLAG(stack_trace_depth);
    %%%%%: 6630-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6630-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6630-block  2
    %%%%%: 6630-block  3
    #####: 6631:  GTEST_INTERNAL_PARSE_FLAG(stream_result_to);
    %%%%%: 6631-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6631-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6631-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6631-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 6631-block  4
    %%%%%: 6631-block  5
    %%%%%: 6631-block  6
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%: 6631-block  7
    $$$$$: 6631-block  8
call   14 never executed
    #####: 6632:  GTEST_INTERNAL_PARSE_FLAG(throw_on_failure);
    %%%%%: 6632-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6632-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6632-block  2
    %%%%%: 6632-block  3
    #####: 6633:  return false;
    %%%%%: 6633-block  0
        -: 6634:}
        -: 6635:
        -: 6636:#if GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
function _ZN7testing8internalL17LoadFlagsFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 6637:static void LoadFlagsFromFile(const std::string& path) {
    #####: 6638:  FILE* flagfile = posix::FOpen(path.c_str(), "r");
    %%%%%: 6638-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 6639:  if (!flagfile) {
    %%%%%: 6639-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6640:    GTEST_LOG_(FATAL) << "Unable to open file \"" << GTEST_FLAG_GET(flagfile)
    %%%%%: 6640-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6640-block  1
call    3 never executed
    %%%%%: 6640-block  2
call    4 never executed
    $$$$$: 6640-block  3
call    5 never executed
    $$$$$: 6640-block  4
    #####: 6641:                      << "\"";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6641-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6641-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 6642:  }
    #####: 6643:  std::string contents(ReadEntireFile(flagfile));
    %%%%%: 6643-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6644:  posix::FClose(flagfile);
    %%%%%: 6644-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6645:  std::vector<std::string> lines;
    #####: 6646:  SplitString(contents, '\n', &lines);
    %%%%%: 6646-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6647:  for (size_t i = 0; i < lines.size(); ++i) {
    %%%%%: 6647-block  0
    %%%%%: 6647-block  1
    %%%%%: 6647-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 6648:    if (lines[i].empty()) continue;
    %%%%%: 6648-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 6648-block  1
    #####: 6649:    if (!ParseGoogleTestFlag(lines[i].c_str())) g_help_flag = true;
    %%%%%: 6649-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 6649-block  1
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 6649-block  2
        -: 6650:  }
    #####: 6651:}
    %%%%%: 6651-block  0
call    0 never executed
call    1 never executed
    $$$$$: 6651-block  1
call    2 never executed
    $$$$$: 6651-block  2
call    3 never executed
        -: 6652:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
        -: 6653:
        -: 6654:// Parses the command line for Google Test flags, without initializing
        -: 6655:// other parts of Google Test.  The type parameter CharType can be
        -: 6656:// instantiated to either char or wchar_t.
        -: 6657:template <typename CharType>
       1*: 6658:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
       1*: 6659:  std::string flagfile_value;
       2*: 6660:  for (int i = 1; i < *argc; i++) {
       1*: 6661:    const std::string arg_string = StreamableToString(argv[i]);
       1*: 6662:    const char* const arg = arg_string.c_str();
        -: 6663:
        -: 6664:    using internal::ParseFlag;
        -: 6665:
       1*: 6666:    bool remove_flag = false;
       1*: 6667:    if (ParseGoogleTestFlag(arg)) {
       1*: 6668:      remove_flag = true;
        -: 6669:#if GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6670:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    #####: 6671:      GTEST_FLAG_SET(flagfile, flagfile_value);
    #####: 6672:      LoadFlagsFromFile(flagfile_value);
    #####: 6673:      remove_flag = true;
        -: 6674:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6675:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
        -: 6676:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6677:      // internal ones) trigger help display.
    #####: 6678:      g_help_flag = true;
        -: 6679:    }
        -: 6680:
       1*: 6681:    if (remove_flag) {
        -: 6682:      // Shift the remainder of the argv list left by one.  Note
        -: 6683:      // that argv has (*argc + 1) elements, the last one always being
        -: 6684:      // NULL.  The following loop moves the trailing NULL element as
        -: 6685:      // well.
       2*: 6686:      for (int j = i; j != *argc; j++) {
       1*: 6687:        argv[j] = argv[j + 1];
        -: 6688:      }
        -: 6689:
        -: 6690:      // Decrements the argument count.
       1*: 6691:      (*argc)--;
        -: 6692:
        -: 6693:      // We also need to decrement the iterator as we just removed
        -: 6694:      // an element.
       1*: 6695:      i--;
        -: 6696:    }
        -: 6697:  }
        -: 6698:
       1*: 6699:  if (g_help_flag) {
        -: 6700:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6701:    // latter may not be called at all if the user is using Google
        -: 6702:    // Test with another testing framework.
    #####: 6703:    PrintColorEncoded(kColorEncodedHelpMessage);
        -: 6704:  }
       1*: 6705:}
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6658:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
    #####: 6659:  std::string flagfile_value;
    %%%%%: 6659-block  0
call    0 never executed
    #####: 6660:  for (int i = 1; i < *argc; i++) {
    %%%%%: 6660-block  0
call    0 never executed
    %%%%%: 6660-block  1
branch  1 never executed
branch  2 never executed (fallthrough)
    $$$$$: 6660-block  2
call    3 never executed
    #####: 6661:    const std::string arg_string = StreamableToString(argv[i]);
    %%%%%: 6661-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6662:    const char* const arg = arg_string.c_str();
    %%%%%: 6662-block  0
call    0 never executed
        -: 6663:
        -: 6664:    using internal::ParseFlag;
        -: 6665:
    #####: 6666:    bool remove_flag = false;
    #####: 6667:    if (ParseGoogleTestFlag(arg)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6667-block  0
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 6668:      remove_flag = true;
    %%%%%: 6668-block  0
        -: 6669:#if GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6670:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    %%%%%: 6670-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6670-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 6671:      GTEST_FLAG_SET(flagfile, flagfile_value);
    %%%%%: 6671-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6672:      LoadFlagsFromFile(flagfile_value);
    %%%%%: 6672-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6673:      remove_flag = true;
    %%%%%: 6673-block  0
        -: 6674:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6675:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6675-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6675-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6675-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6675-block  3
    %%%%%: 6675-block  4
    %%%%%: 6675-block  5
branch  8 never executed (fallthrough)
branch  9 never executed
        -: 6676:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6677:      // internal ones) trigger help display.
    #####: 6678:      g_help_flag = true;
    %%%%%: 6678-block  0
        -: 6679:    }
        -: 6680:
    #####: 6681:    if (remove_flag) {
    %%%%%: 6681-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 6682:      // Shift the remainder of the argv list left by one.  Note
        -: 6683:      // that argv has (*argc + 1) elements, the last one always being
        -: 6684:      // NULL.  The following loop moves the trailing NULL element as
        -: 6685:      // well.
    #####: 6686:      for (int j = i; j != *argc; j++) {
    %%%%%: 6686-block  0
    %%%%%: 6686-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 6687:        argv[j] = argv[j + 1];
    %%%%%: 6687-block  0
        -: 6688:      }
        -: 6689:
        -: 6690:      // Decrements the argument count.
    #####: 6691:      (*argc)--;
        -: 6692:
        -: 6693:      // We also need to decrement the iterator as we just removed
        -: 6694:      // an element.
    #####: 6695:      i--;
    %%%%%: 6695-block  0
        -: 6696:    }
        -: 6697:  }
        -: 6698:
    #####: 6699:  if (g_help_flag) {
    %%%%%: 6699-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 6700:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6701:    // latter may not be called at all if the user is using Google
        -: 6702:    // Test with another testing framework.
    #####: 6703:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6703-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6704:  }
    #####: 6705:}
    %%%%%: 6705-block  0
call    0 never executed
    $$$$$: 6705-block  1
call    1 never executed
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_ called 1 returned 100% blocks executed 50%
        1: 6658:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
        1: 6659:  std::string flagfile_value;
        1: 6659-block  0
call    0 returned 1
        2: 6660:  for (int i = 1; i < *argc; i++) {
        1: 6660-block  0
call    0 returned 1
        2: 6660-block  1
branch  1 taken 1
branch  2 taken 1 (fallthrough)
    $$$$$: 6660-block  2
call    3 never executed
        1: 6661:    const std::string arg_string = StreamableToString(argv[i]);
        1: 6661-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6662:    const char* const arg = arg_string.c_str();
        1: 6662-block  0
call    0 returned 1
        -: 6663:
        -: 6664:    using internal::ParseFlag;
        -: 6665:
        1: 6666:    bool remove_flag = false;
        1: 6667:    if (ParseGoogleTestFlag(arg)) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6667-block  0
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 6668:      remove_flag = true;
        1: 6668-block  0
        -: 6669:#if GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6670:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    %%%%%: 6670-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6670-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 6671:      GTEST_FLAG_SET(flagfile, flagfile_value);
    %%%%%: 6671-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6672:      LoadFlagsFromFile(flagfile_value);
    %%%%%: 6672-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6673:      remove_flag = true;
    %%%%%: 6673-block  0
        -: 6674:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_ && GTEST_HAS_FILE_SYSTEM
    #####: 6675:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6675-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6675-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6675-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6675-block  3
    %%%%%: 6675-block  4
    %%%%%: 6675-block  5
branch  8 never executed (fallthrough)
branch  9 never executed
        -: 6676:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6677:      // internal ones) trigger help display.
    #####: 6678:      g_help_flag = true;
    %%%%%: 6678-block  0
        -: 6679:    }
        -: 6680:
        1: 6681:    if (remove_flag) {
        1: 6681-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 6682:      // Shift the remainder of the argv list left by one.  Note
        -: 6683:      // that argv has (*argc + 1) elements, the last one always being
        -: 6684:      // NULL.  The following loop moves the trailing NULL element as
        -: 6685:      // well.
        2: 6686:      for (int j = i; j != *argc; j++) {
        1: 6686-block  0
        2: 6686-block  1
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        1: 6687:        argv[j] = argv[j + 1];
        1: 6687-block  0
        -: 6688:      }
        -: 6689:
        -: 6690:      // Decrements the argument count.
        1: 6691:      (*argc)--;
        -: 6692:
        -: 6693:      // We also need to decrement the iterator as we just removed
        -: 6694:      // an element.
        1: 6695:      i--;
        1: 6695-block  0
        -: 6696:    }
        -: 6697:  }
        -: 6698:
        1: 6699:  if (g_help_flag) {
        1: 6699-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 6700:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6701:    // latter may not be called at all if the user is using Google
        -: 6702:    // Test with another testing framework.
    #####: 6703:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6703-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6704:  }
        1: 6705:}
        1: 6705-block  0
call    0 returned 1
    $$$$$: 6705-block  1
call    1 never executed
------------------
        -: 6706:
        -: 6707:// Parses the command line for Google Test flags, without initializing
        -: 6708:// other parts of Google Test. This function updates argc and argv by removing
        -: 6709:// flags that are known to GoogleTest (including other user flags defined using
        -: 6710:// ABSL_FLAG if GoogleTest is built with GTEST_USE_ABSL). Other arguments
        -: 6711:// remain in place. Unrecognized flags are not reported and do not cause the
        -: 6712:// program to exit.
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPc called 1 returned 100% blocks executed 100%
        1: 6713:void ParseGoogleTestFlagsOnly(int* argc, char** argv) {
        -: 6714:#ifdef GTEST_HAS_ABSL_FLAGS
        -: 6715:  if (*argc <= 0) return;
        -: 6716:
        -: 6717:  std::vector<char*> positional_args;
        -: 6718:  std::vector<absl::UnrecognizedFlag> unrecognized_flags;
        -: 6719:  absl::ParseAbseilFlagsOnly(*argc, argv, positional_args, unrecognized_flags);
        -: 6720:  absl::flat_hash_set<absl::string_view> unrecognized;
        -: 6721:  for (const auto& flag : unrecognized_flags) {
        -: 6722:    unrecognized.insert(flag.flag_name);
        -: 6723:  }
        -: 6724:  absl::flat_hash_set<char*> positional;
        -: 6725:  for (const auto& arg : positional_args) {
        -: 6726:    positional.insert(arg);
        -: 6727:  }
        -: 6728:
        -: 6729:  int out_pos = 1;
        -: 6730:  int in_pos = 1;
        -: 6731:  for (; in_pos < *argc; ++in_pos) {
        -: 6732:    char* arg = argv[in_pos];
        -: 6733:    absl::string_view arg_str(arg);
        -: 6734:    if (absl::ConsumePrefix(&arg_str, "--")) {
        -: 6735:      // Flag-like argument. If the flag was unrecognized, keep it.
        -: 6736:      // If it was a GoogleTest flag, remove it.
        -: 6737:      if (unrecognized.contains(arg_str)) {
        -: 6738:        argv[out_pos++] = argv[in_pos];
        -: 6739:        continue;
        -: 6740:      }
        -: 6741:    }
        -: 6742:
        -: 6743:    if (arg_str.empty()) {
        -: 6744:      ++in_pos;
        -: 6745:      break;  // '--' indicates that the rest of the arguments are positional
        -: 6746:    }
        -: 6747:
        -: 6748:    // Probably a positional argument. If it is in fact positional, keep it.
        -: 6749:    // If it was a value for the flag argument, remove it.
        -: 6750:    if (positional.contains(arg)) {
        -: 6751:      argv[out_pos++] = arg;
        -: 6752:    }
        -: 6753:  }
        -: 6754:
        -: 6755:  // The rest are positional args for sure.
        -: 6756:  while (in_pos < *argc) {
        -: 6757:    argv[out_pos++] = argv[in_pos++];
        -: 6758:  }
        -: 6759:
        -: 6760:  *argc = out_pos;
        -: 6761:  argv[out_pos] = nullptr;
        -: 6762:#else
        1: 6763:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
        1: 6763-block  0
call    0 returned 1
        -: 6764:#endif
        -: 6765:
        -: 6766:  // Fix the value of *_NSGetArgc() on macOS, but if and only if
        -: 6767:  // *_NSGetArgv() == argv
        -: 6768:  // Only applicable to char** version of argv
        -: 6769:#ifdef GTEST_OS_MAC
        -: 6770:#ifndef GTEST_OS_IOS
        -: 6771:  if (*_NSGetArgv() == argv) {
        -: 6772:    *_NSGetArgc() = *argc;
        -: 6773:  }
        -: 6774:#endif
        -: 6775:#endif
        1: 6776:}
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPw called 0 returned 0% blocks executed 0%
    #####: 6777:void ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv) {
    #####: 6778:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
    %%%%%: 6778-block  0
call    0 never executed
    #####: 6779:}
        -: 6780:
        -: 6781:// The internal implementation of InitGoogleTest().
        -: 6782://
        -: 6783:// The type parameter CharType can be instantiated to either char or
        -: 6784:// wchar_t.
        -: 6785:template <typename CharType>
       1*: 6786:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6787:  // We don't want to run the initialization code twice.
       1*: 6788:  if (GTestIsInitialized()) return;
        -: 6789:
       1*: 6790:  if (*argc <= 0) return;
        -: 6791:
       1*: 6792:  g_argvs.clear();
       3*: 6793:  for (int i = 0; i != *argc; i++) {
       2*: 6794:    g_argvs.push_back(StreamableToString(argv[i]));
        -: 6795:  }
        -: 6796:
        -: 6797:#ifdef GTEST_HAS_ABSL
        -: 6798:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6799:
        -: 6800:#ifdef GTEST_HAS_ABSL_FLAGS
        -: 6801:  // When using the Abseil Flags library, set the program usage message to the
        -: 6802:  // help message, but remove the color-encoding from the message first.
        -: 6803:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6804:      kColorEncodedHelpMessage,
        -: 6805:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6806:#endif  // GTEST_HAS_ABSL_FLAGS
        -: 6807:#endif  // GTEST_HAS_ABSL
        -: 6808:
       1*: 6809:  ParseGoogleTestFlagsOnly(argc, argv);
       1*: 6810:  GetUnitTestImpl()->PostFlagParsingInit();
        -: 6811:}
------------------
_ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6786:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6787:  // We don't want to run the initialization code twice.
    #####: 6788:  if (GTestIsInitialized()) return;
    %%%%%: 6788-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 6788-block  1
        -: 6789:
    #####: 6790:  if (*argc <= 0) return;
    %%%%%: 6790-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6790-block  1
        -: 6791:
    #####: 6792:  g_argvs.clear();
    %%%%%: 6792-block  0
call    0 never executed
    #####: 6793:  for (int i = 0; i != *argc; i++) {
    %%%%%: 6793-block  0
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 6794:    g_argvs.push_back(StreamableToString(argv[i]));
    %%%%%: 6794-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6794-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6794-block  2
call    6 never executed
    $$$$$: 6794-block  3
call    7 never executed
        -: 6795:  }
        -: 6796:
        -: 6797:#ifdef GTEST_HAS_ABSL
        -: 6798:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6799:
        -: 6800:#ifdef GTEST_HAS_ABSL_FLAGS
        -: 6801:  // When using the Abseil Flags library, set the program usage message to the
        -: 6802:  // help message, but remove the color-encoding from the message first.
        -: 6803:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6804:      kColorEncodedHelpMessage,
        -: 6805:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6806:#endif  // GTEST_HAS_ABSL_FLAGS
        -: 6807:#endif  // GTEST_HAS_ABSL
        -: 6808:
    #####: 6809:  ParseGoogleTestFlagsOnly(argc, argv);
    %%%%%: 6809-block  0
call    0 never executed
    #####: 6810:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 never executed
call    1 never executed
        -: 6811:}
------------------
_ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_ called 1 returned 100% blocks executed 79%
        1: 6786:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6787:  // We don't want to run the initialization code twice.
       1*: 6788:  if (GTestIsInitialized()) return;
        1: 6788-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 6788-block  1
        -: 6789:
       1*: 6790:  if (*argc <= 0) return;
        1: 6790-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6790-block  1
        -: 6791:
        1: 6792:  g_argvs.clear();
        1: 6792-block  0
call    0 returned 1
        3: 6793:  for (int i = 0; i != *argc; i++) {
        3: 6793-block  0
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2: 6794:    g_argvs.push_back(StreamableToString(argv[i]));
        2: 6794-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 6794-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2: 6794-block  2
call    6 returned 2
    $$$$$: 6794-block  3
call    7 never executed
        -: 6795:  }
        -: 6796:
        -: 6797:#ifdef GTEST_HAS_ABSL
        -: 6798:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6799:
        -: 6800:#ifdef GTEST_HAS_ABSL_FLAGS
        -: 6801:  // When using the Abseil Flags library, set the program usage message to the
        -: 6802:  // help message, but remove the color-encoding from the message first.
        -: 6803:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6804:      kColorEncodedHelpMessage,
        -: 6805:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6806:#endif  // GTEST_HAS_ABSL_FLAGS
        -: 6807:#endif  // GTEST_HAS_ABSL
        -: 6808:
        1: 6809:  ParseGoogleTestFlagsOnly(argc, argv);
        1: 6809-block  0
call    0 returned 1
        1: 6810:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 returned 1
call    1 returned 1
        -: 6811:}
------------------
        -: 6812:
        -: 6813:}  // namespace internal
        -: 6814:
        -: 6815:// Initializes Google Test.  This must be called before calling
        -: 6816:// RUN_ALL_TESTS().  In particular, it parses a command line for the
        -: 6817:// flags that Google Test recognizes.  Whenever a Google Test flag is
        -: 6818:// seen, it is removed from argv, and *argc is decremented.
        -: 6819://
        -: 6820:// No value is returned.  Instead, the Google Test flag variables are
        -: 6821:// updated.
        -: 6822://
        -: 6823:// Calling the function for the second time has no user-visible effect.
function _ZN7testing14InitGoogleTestEPiPPc called 1 returned 100% blocks executed 100%
        1: 6824:void InitGoogleTest(int* argc, char** argv) {
        -: 6825:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6826:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6827:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 6828:  internal::InitGoogleTestImpl(argc, argv);
        1: 6828-block  0
call    0 returned 1
        -: 6829:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 6830:}
        -: 6831:
        -: 6832:// This overloaded version can be used in Windows programs compiled in
        -: 6833:// UNICODE mode.
function _ZN7testing14InitGoogleTestEPiPPw called 0 returned 0% blocks executed 0%
    #####: 6834:void InitGoogleTest(int* argc, wchar_t** argv) {
        -: 6835:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6836:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6837:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6838:  internal::InitGoogleTestImpl(argc, argv);
    %%%%%: 6838-block  0
call    0 never executed
        -: 6839:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6840:}
        -: 6841:
        -: 6842:// This overloaded version can be used on Arduino/embedded platforms where
        -: 6843:// there is no argc/argv.
function _ZN7testing14InitGoogleTestEv called 0 returned 0% blocks executed 0%
    #####: 6844:void InitGoogleTest() {
        -: 6845:  // Since Arduino doesn't have a command line, fake out the argc/argv arguments
    #####: 6846:  int argc = 1;
    #####: 6847:  const auto arg0 = "dummy";
    #####: 6848:  char* argv0 = const_cast<char*>(arg0);
    #####: 6849:  char** argv = &argv0;
        -: 6850:
        -: 6851:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6852:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(&argc, argv);
        -: 6853:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6854:  internal::InitGoogleTestImpl(&argc, argv);
    %%%%%: 6854-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6855:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6856:}
    %%%%%: 6856-block  0
        -: 6857:
        -: 6858:#if !defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_) || \
        -: 6859:    !defined(GTEST_CUSTOM_SRCDIR_FUNCTION_)
        -: 6860:// Returns the value of the first environment variable that is set and contains
        -: 6861:// a non-empty string. If there are none, returns the "fallback" string. Adds
        -: 6862:// the director-separator character as a suffix if not provided in the
        -: 6863:// environment variable value.
function _ZN7testingL13GetDirFromEnvESt16initializer_listIPKcES2_c called 0 returned 0% blocks executed 0%
    #####: 6864:static std::string GetDirFromEnv(
        -: 6865:    std::initializer_list<const char*> environment_variables,
        -: 6866:    const char* fallback, char separator) {
    #####: 6867:  for (const char* variable_name : environment_variables) {
    %%%%%: 6867-block  0
call    0 never executed
call    1 never executed
    %%%%%: 6867-block  1
    %%%%%: 6867-block  2
branch  2 never executed
branch  3 never executed (fallthrough)
    #####: 6868:    const char* value = internal::posix::GetEnv(variable_name);
    %%%%%: 6868-block  0
call    0 never executed
    #####: 6869:    if (value != nullptr && value[0] != '\0') {
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6869-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 6870:      if (value[strlen(value) - 1] != separator) {
    %%%%%: 6870-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6871:        return std::string(value).append(1, separator);
    %%%%%: 6871-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6871-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6871-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 6871-block  3
    %%%%%: 6871-block  4
call    9 never executed
    %%%%%: 6871-block  5
    $$$$$: 6871-block  6
call   10 never executed
    $$$$$: 6871-block  7
    $$$$$: 6871-block  8
        -: 6872:      }
    #####: 6873:      return value;
    %%%%%: 6873-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6873-block  1
    $$$$$: 6873-block  2
        -: 6874:    }
        -: 6875:  }
    #####: 6876:  return fallback;
    %%%%%: 6876-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6876-block  1
        -: 6877:}
        -: 6878:#endif
        -: 6879:
function _ZN7testing7TempDirB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 6880:std::string TempDir() {
        -: 6881:#if defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_)
        -: 6882:  return GTEST_CUSTOM_TEMPDIR_FUNCTION_();
        -: 6883:#elif defined(GTEST_OS_WINDOWS) || defined(GTEST_OS_WINDOWS_MOBILE)
    #####: 6884:  return GetDirFromEnv({"TEST_TMPDIR", "TEMP"}, "\\temp\\", '\\');
    %%%%%: 6884-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6884-block  1
    %%%%%: 6884-block  2
        -: 6885:#elif defined(GTEST_OS_LINUX_ANDROID)
        -: 6886:  return GetDirFromEnv({"TEST_TMPDIR", "TMPDIR"}, "/data/local/tmp/", '/');
        -: 6887:#else
        -: 6888:  return GetDirFromEnv({"TEST_TMPDIR", "TMPDIR"}, "/tmp/", '/');
        -: 6889:#endif
        -: 6890:}
        -: 6891:
        -: 6892:#if GTEST_HAS_FILE_SYSTEM && !defined(GTEST_CUSTOM_SRCDIR_FUNCTION_)
        -: 6893:// Returns the directory path (including terminating separator) of the current
        -: 6894:// executable as derived from argv[0].
function _ZN7testingL29GetCurrentExecutableDirectoryEv called 0 returned 0% blocks executed 0%
    #####: 6895:static std::string GetCurrentExecutableDirectory() {
    #####: 6896:  internal::FilePath argv_0(internal::GetArgvs()[0]);
    %%%%%: 6896-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6896-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 6896-block  2
call    7 never executed
    $$$$$: 6896-block  3
call    8 never executed
    $$$$$: 6896-block  4
    #####: 6897:  return argv_0.RemoveFileName().string();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6897-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 6897-block  1
    %%%%%: 6897-block  2
call    7 never executed
    %%%%%: 6897-block  3
    $$$$$: 6897-block  4
call    8 never executed
    $$$$$: 6897-block  5
    #####: 6898:}
call    0 never executed
    $$$$$: 6898-block  0
call    1 never executed
        -: 6899:#endif
        -: 6900:
        -: 6901:#if GTEST_HAS_FILE_SYSTEM
function _ZN7testing6SrcDirB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 6902:std::string SrcDir() {
        -: 6903:#if defined(GTEST_CUSTOM_SRCDIR_FUNCTION_)
        -: 6904:  return GTEST_CUSTOM_SRCDIR_FUNCTION_();
        -: 6905:#elif defined(GTEST_OS_WINDOWS) || defined(GTEST_OS_WINDOWS_MOBILE)
    #####: 6906:  return GetDirFromEnv({"TEST_SRCDIR"}, GetCurrentExecutableDirectory().c_str(),
    %%%%%: 6906-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 6906-block  1
call    3 never executed
    #####: 6907:                       '\\');
    %%%%%: 6907-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 6907-block  1
call    4 never executed
    %%%%%: 6907-block  2
    $$$$$: 6907-block  3
        -: 6908:#elif defined(GTEST_OS_LINUX_ANDROID)
        -: 6909:  return GetDirFromEnv({"TEST_SRCDIR"}, GetCurrentExecutableDirectory().c_str(),
        -: 6910:                       '/');
        -: 6911:#else
        -: 6912:  return GetDirFromEnv({"TEST_SRCDIR"}, GetCurrentExecutableDirectory().c_str(),
        -: 6913:                       '/');
        -: 6914:#endif
        -: 6915:}
        -: 6916:#endif
        -: 6917:
        -: 6918:// Class ScopedTrace
        -: 6919:
        -: 6920:// Pushes the given source file location and message onto a per-thread
        -: 6921:// trace stack maintained by Google Test.
function _ZN7testing11ScopedTrace9PushTraceEPKciNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 6922:void ScopedTrace::PushTrace(const char* file, int line, std::string message) {
    #####: 6923:  internal::TraceInfo trace;
    %%%%%: 6923-block  0
call    0 never executed
    #####: 6924:  trace.file = file;
    #####: 6925:  trace.line = line;
    #####: 6926:  trace.message.swap(message);
call    0 never executed
        -: 6927:
    #####: 6928:  UnitTest::GetInstance()->PushGTestTrace(trace);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6928-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 6929:}
    %%%%%: 6929-block  0
call    0 never executed
    $$$$$: 6929-block  1
call    1 never executed
        -: 6930:
        -: 6931:// Pops the info pushed by the c'tor.
function _ZN7testing11ScopedTraceD2Ev called 0 returned 0% blocks executed 0%
    #####: 6932:ScopedTrace::~ScopedTrace() GTEST_LOCK_EXCLUDED_(&UnitTest::mutex_) {
    #####: 6933:  UnitTest::GetInstance()->PopGTestTrace();
    %%%%%: 6933-block  0
call    0 never executed
call    1 never executed
    #####: 6934:}
        -: 6935:
        -: 6936:}  // namespace testing
