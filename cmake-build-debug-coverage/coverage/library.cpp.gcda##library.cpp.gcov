        -:    0:Source:C:/Users/danpo/CLionProjects/untitled3/Test/Source/library.cpp
        -:    0:Graph:C:\Users\danpo\CLionProjects\untitled3\Test\cmake-build-debug-coverage\CMakeFiles\Library.dir\Source\library.cpp.gcno
        -:    0:Data:C:\Users\danpo\CLionProjects\untitled3\Test\cmake-build-debug-coverage\CMakeFiles\Library.dir\Source\library.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "../Headers/library.h"
        -:    2:
        -:    3://Return Lnum::LongNumber which is an absolute value of given Lnum::LongNumber
function _ZNK4Lnum10LongNumber3absEv called 18050 returned 100% blocks executed 83%
    18050:    4:[[nodiscard]] Lnum::LongNumber Lnum::LongNumber::abs() const {
    18050:    5:    LongNumber ret;
    18050:    5-block  0
call    0 returned 18050
    18050:    6:    ret.value = value;
call    0 returned 18050
branch  1 taken 18050 (fallthrough)
branch  2 taken 0 (throw)
    18050:    7:    ret.precision = precision;
    18050:    8:    ret.sign = 1;
    18050:    9:    return ret;
    18050:    9-block  0
    18050:    9-block  1
    =====:   10:}
    $$$$$:   10-block  0
call    0 never executed
        -:   11:
        -:   12://Compares absolute values of two Lnum::LongNumbers including those with different precisions. Returns 1 if this is greater, -1 if other is greater, 0 otherwise.
function _ZNK4Lnum10LongNumber11compare_absES0_ called 23108 returned 100% blocks executed 100%
    23108:   13:int Lnum::LongNumber::compare_abs(Lnum::LongNumber x) const{
    23108:   14:    int res = 0;
    23108:   15:    if ((int)(x.value.size() - x.precision) > (int)(value.size() - precision)) {
    23108:   15-block  0
call    0 returned 23108
call    1 returned 23108
branch  2 taken 270 (fallthrough)
branch  3 taken 22838
      270:   16:        res = -1;
      270:   16-block  0
    22838:   17:    } else if ((int)(x.value.size() - x.precision) < (int)(value.size() - precision)) {
    22838:   17-block  0
call    0 returned 22838
call    1 returned 22838
branch  2 taken 3018 (fallthrough)
branch  3 taken 19820
     3018:   18:        res = 1;
     3018:   18-block  0
        -:   19:    } else {
        -:   20:
    22069:   21:        for (int i = 0; i < std::min(x.value.size(), value.size()); ++i) {
    19820:   21-block  0
     2249:   21-block  1
    22069:   21-block  2
call    0 returned 22069
call    1 returned 22069
call    2 returned 22069
branch  3 taken 21872
branch  4 taken 197 (fallthrough)
    21872:   22:            if ((x.value)[i] > value[i]) {
    21872:   22-block  0
call    0 returned 21872
call    1 returned 21872
branch  2 taken 91 (fallthrough)
branch  3 taken 21781
       91:   23:                res = -1;
       91:   24:                break;
       91:   24-block  0
    21781:   25:            } else if ((x.value)[i] < value[i]) {
    21781:   25-block  0
call    0 returned 21781
call    1 returned 21781
branch  2 taken 19532 (fallthrough)
branch  3 taken 2249
    19532:   26:                res = 1;
    19532:   27:                break;
    19532:   27-block  0
        -:   28:            }
        -:   29:        }
        -:   30:
    19820:   31:        if (res == 0 && x.precision > precision){
    19820:   31-block  0
branch  0 taken 197 (fallthrough)
branch  1 taken 19623
      197:   31-block  1
branch  2 taken 11 (fallthrough)
branch  3 taken 186
       11:   32:            int all_zeroes = 1;
       17:   33:            for (size_t i = std::min(x.value.size(), value.size()); i < x.value.size(); ++i) {
       11:   33-block  0
call    0 returned 11
call    1 returned 11
call    2 returned 11
        6:   33-block  1
       17:   33-block  2
call    3 returned 17
branch  4 taken 16
branch  5 taken 1 (fallthrough)
       16:   34:                if (x.value[i] != '0'){
       16:   34-block  0
call    0 returned 16
branch  1 taken 10 (fallthrough)
branch  2 taken 6
       10:   35:                    all_zeroes = 0;
       10:   36:                    break;
       10:   36-block  0
        -:   37:                }
        -:   38:            }
       11:   39:            if (all_zeroes == 0) {
       11:   39-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 1
       10:   40:                res = -1;
       10:   40-block  0
        -:   41:            }
    19820:   42:        } else if (res == 0 && x.precision < precision) {
       11:   42-block  0
    19809:   42-block  1
branch  0 taken 186 (fallthrough)
branch  1 taken 19623
      186:   42-block  2
branch  2 taken 6 (fallthrough)
branch  3 taken 180
        6:   43:            int all_zeroes = 1;
       23:   44:            for (size_t i = std::min(x.value.size(), value.size()); i < value.size(); ++i) {
        6:   44-block  0
call    0 returned 6
call    1 returned 6
call    2 returned 6
       17:   44-block  1
       23:   44-block  2
call    3 returned 23
branch  4 taken 19
branch  5 taken 4 (fallthrough)
       19:   45:                if (value[i] != '0'){
       19:   45-block  0
call    0 returned 19
branch  1 taken 2 (fallthrough)
branch  2 taken 17
        2:   46:                    all_zeroes = 0;
        2:   47:                    break;
        2:   47-block  0
        -:   48:                }
        -:   49:            }
        6:   50:            if (all_zeroes == 0) {
        6:   50-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 4
        2:   51:                res = 1;
        2:   51-block  0
        -:   52:            }
        -:   53:        }
        -:   54:    }
    23108:   55:    return res;
    23108:   55-block  0
        -:   56:}
        -:   57:
function _ZNK4Lnum10LongNumberssERKS0_ called 14197 returned 100% blocks executed 61%
    14197:   58:std::strong_ordering Lnum::LongNumber::operator<=>(const LongNumber &x) const {
    14197:   59:    if (sign == x.sign && compare_abs(x) == 0) {
    14197:   59-block  0
branch  0 taken 11621 (fallthrough)
branch  1 taken 2576
    11621:   59-block  1
call    2 returned 11621
branch  3 taken 11621 (fallthrough)
branch  4 taken 0 (throw)
    11621:   59-block  2
call    5 returned 11621
branch  6 taken 11621 (fallthrough)
branch  7 taken 0 (throw)
    11621:   59-block  3
branch  8 taken 162 (fallthrough)
branch  9 taken 11459
      162:   59-block  4
    14035:   59-block  5
    14197:   59-block  6
branch 10 taken 11621 (fallthrough)
branch 11 taken 2576
    11621:   59-block  7
call   12 returned 11621
    14197:   59-block  8
branch 13 taken 162 (fallthrough)
branch 14 taken 14035
    $$$$$:   59-block  9
branch 15 never executed (fallthrough)
branch 16 never executed
    $$$$$:   59-block 10
call   17 never executed
    $$$$$:   59-block 11
call   18 never executed
      162:   60:        return std::strong_ordering::equal;
      162:   60-block  0
        -:   61:    } else {
    14035:   62:        bool res = false;
        -:   63:
    14035:   64:        if (1 == x.sign && sign == 1) {
    14035:   64-block  0
branch  0 taken 11459 (fallthrough)
branch  1 taken 2576
    11459:   64-block  1
branch  2 taken 11459 (fallthrough)
branch  3 taken 0
    11459:   65:            res = compare_abs(x) == 1;
    11459:   65-block  0
call    0 returned 11459
branch  1 taken 11459 (fallthrough)
branch  2 taken 0 (throw)
    11459:   65-block  1
call    3 returned 11459
branch  4 taken 11459 (fallthrough)
branch  5 taken 0 (throw)
    11459:   65-block  2
call    6 returned 11459
    $$$$$:   65-block  3
call    7 never executed
    $$$$$:   65-block  4
call    8 never executed
     2576:   66:        } else if (-1 == x.sign && sign == -1) {
     2576:   66-block  0
branch  0 taken 2576 (fallthrough)
branch  1 taken 0
     2576:   66-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 2576
    #####:   67:            res = (compare_abs(x) == -1);
    %%%%%:   67-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:   67-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:   67-block  2
call    6 never executed
    $$$$$:   67-block  3
call    7 never executed
     2576:   68:        } else if (sign == 1 && x.sign == -1) {
     2576:   68-block  0
branch  0 taken 2576 (fallthrough)
branch  1 taken 0
     2576:   68-block  1
branch  2 taken 2576 (fallthrough)
branch  3 taken 0
    5152*:   69:            if (value == "0" && x.value == "0") {
     2576:   69-block  0
call    0 returned 2576
branch  1 taken 0 (fallthrough)
branch  2 taken 2576
    %%%%%:   69-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:   69-block  2
     2576:   69-block  3
     2576:   69-block  4
branch  6 taken 0 (fallthrough)
branch  7 taken 2576
     2576:   69-block  5
    #####:   70:                res = false;
    %%%%%:   70-block  0
        -:   71:            } else {
     2576:   72:                res = true;
     2576:   72-block  0
        -:   73:            }
    #####:   74:        } else if (sign == -1 && x.sign == 1) {
    %%%%%:   74-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:   74-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:   75:            res = false;
    %%%%%:   75-block  0
        -:   76:        }
        -:   77:
    14035:   78:        if (res) {
    14035:   78-block  0
branch  0 taken 13851 (fallthrough)
branch  1 taken 184
    13851:   79:            return std::strong_ordering::greater;
    13851:   79-block  0
        -:   80:        } else {
      184:   81:            return std::strong_ordering::less;
      184:   81-block  0
        -:   82:        }
        -:   83:    }
        -:   84:}
        -:   85:
function _ZNK4Lnum10LongNumbereqERKS0_ called 35 returned 100% blocks executed 88%
       35:   86:bool Lnum::LongNumber::operator==(const LongNumber &x) const {
       35:   87:    if ((sign == x.sign && compare_abs(x) == 0)) {
       35:   87-block  0
branch  0 taken 28 (fallthrough)
branch  1 taken 7
       28:   87-block  1
call    2 returned 28
branch  3 taken 28 (fallthrough)
branch  4 taken 0 (throw)
       28:   87-block  2
call    5 returned 28
branch  6 taken 28 (fallthrough)
branch  7 taken 0 (throw)
       28:   87-block  3
branch  8 taken 23 (fallthrough)
branch  9 taken 5
       23:   87-block  4
       12:   87-block  5
       35:   87-block  6
branch 10 taken 28 (fallthrough)
branch 11 taken 7
       28:   87-block  7
call   12 returned 28
       35:   87-block  8
branch 13 taken 23 (fallthrough)
branch 14 taken 12
    $$$$$:   87-block  9
branch 15 never executed (fallthrough)
branch 16 never executed
    $$$$$:   87-block 10
call   17 never executed
    $$$$$:   87-block 11
call   18 never executed
       23:   88:        return true;
       23:   88-block  0
        -:   89:    } else {
       12:   90:        LongNumber real_x = x;
       12:   90-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12:   91:        LongNumber th = (*this);
       12:   91-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       18:   92:        while (real_x.value.back() && real_x.value.back() == '0') {
       12:   92-block  0
       18:   92-block  1
call    0 returned 18
branch  1 taken 14 (fallthrough)
branch  2 taken 4
       14:   92-block  2
call    3 returned 14
branch  4 taken 6 (fallthrough)
branch  5 taken 8
        6:   92-block  3
       12:   92-block  4
       18:   92-block  5
branch  6 taken 6
branch  7 taken 12 (fallthrough)
        6:   93:            real_x.value.pop_back();
        6:   93-block  0
call    0 returned 6
        6:   94:            --real_x.precision;
        -:   95:        }
       29:   96:        while (th.value.back() && th.value.back() == '0') {
       12:   96-block  0
       29:   96-block  1
call    0 returned 29
branch  1 taken 25 (fallthrough)
branch  2 taken 4
       25:   96-block  2
call    3 returned 25
branch  4 taken 17 (fallthrough)
branch  5 taken 8
       17:   96-block  3
       12:   96-block  4
       29:   96-block  5
branch  6 taken 17
branch  7 taken 12 (fallthrough)
       17:   97:            th.value.pop_back();
       17:   97-block  0
call    0 returned 17
       17:   98:            --th.precision;
        -:   99:        }
        -:  100:
       12:  101:        if (th.value == real_x.value && th.value.empty()) {
       12:  101-block  0
call    0 returned 12
branch  1 taken 6 (fallthrough)
branch  2 taken 6
        6:  101-block  1
call    3 returned 6
branch  4 taken 4 (fallthrough)
branch  5 taken 2
        4:  101-block  2
        8:  101-block  3
       12:  101-block  4
branch  6 taken 4 (fallthrough)
branch  7 taken 8
        4:  102:            return true;
        4:  102-block  0
        -:  103:        } else {
        8:  104:            return false;
        8:  104-block  0
        -:  105:        }
       12:  106:    }
       12:  106-block  0
call    0 returned 12
call    1 returned 12
    $$$$$:  106-block  1
call    2 never executed
        -:  107:}
        -:  108:
function _ZNK4Lnum10LongNumberneERKS0_ called 2 returned 100% blocks executed 100%
        2:  109:bool Lnum::LongNumber::operator!=(const LongNumber &x) const {
        2:  110:    return !((*this) == x);
        2:  110-block  0
call    0 returned 2
        -:  111:}
        -:  112:
        -:  113://promotes precision of this Lnum::LongNumber to precision of given Lnum::LongNumber by adding 0s to the end
function _ZNK4Lnum10LongNumber17promote_precisionERKS0_ called 9026 returned 100% blocks executed 88%
     9026:  114:Lnum::LongNumber Lnum::LongNumber::promote_precision(const Lnum::LongNumber& x) const{
     9026:  115:    LongNumber ret;
     9026:  115-block  0
call    0 returned 9026
branch  1 taken 9026 (fallthrough)
branch  2 taken 0 (throw)
     9026:  116:    if (precision < x.precision) {
     9026:  116-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 9018
        8:  117:        ret.value = value;
        8:  117-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
       20:  118:        for(int i = 0; i < x.precision - precision; ++i){
        8:  118-block  0
       12:  118-block  1
       20:  118-block  2
branch  0 taken 12
branch  1 taken 8 (fallthrough)
       12:  119:            ret.value.push_back('0');
       12:  119-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
        -:  120:        }
        8:  121:        ret.precision = x.precision;
        8:  122:        ret.sign = sign;
        8:  123:        return ret;
        8:  123-block  0
call    0 returned 8
        -:  124:    } else {
     9018:  125:        return (*this);
     9018:  125-block  0
call    0 returned 9018
branch  1 taken 9018 (fallthrough)
branch  2 taken 0 (throw)
        -:  126:    }
        -:  127:
     9026:  128:}
     9026:  128-block  0
call    0 returned 9026
    $$$$$:  128-block  1
call    1 never executed
        -:  129:
        -:  130://returns long number that equals sum of absolute values of this Lnum::LongNumber and Lnum::LongNumber x
function _ZNK4Lnum10LongNumber7sum_absERS0_ called 1 returned 100% blocks executed 71%
        1:  131:Lnum::LongNumber Lnum::LongNumber::sum_abs(Lnum::LongNumber &x) const{
        1:  132:    Lnum::LongNumber ret;
        1:  132-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  133:    Lnum::LongNumber this_c = (*this).promote_precision(x);
        1:  133-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  134:    Lnum::LongNumber x_c = x.promote_precision(*this);
        1:  134-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  135:
        1:  136:    int u = 0;
        1:  137:    std::string a = this_c.value;
        1:  137-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  138:    std::string b = x_c.value;
        1:  138-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  139:    std::string ans;
        1:  139-block  0
call    0 returned 1
        6:  140:    while(!a.empty() || !b.empty()){
        6:  140-block  0
call    0 returned 6
branch  1 taken 1 (fallthrough)
branch  2 taken 5
        1:  140-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
        5:  140-block  2
        1:  140-block  3
        6:  140-block  4
branch  6 taken 5
branch  7 taken 1 (fallthrough)
       5*:  141:        int z = !a.empty() ? (a.back() - '0') : 0;
        5:  141-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0
        5:  141-block  1
call    3 returned 5
    %%%%%:  141-block  2
       5*:  142:        int y =  !b.empty() ? (b.back() - '0') : 0;
        5:  142-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0
        5:  142-block  1
call    3 returned 5
    %%%%%:  142-block  2
        5:  143:        ans += (std::to_string((z + y + u) % 10));
        5:  143-block  0
call    0 returned 5
call    1 returned 5
branch  2 taken 5 (fallthrough)
branch  3 taken 0 (throw)
        5:  143-block  1
call    4 returned 5
    $$$$$:  143-block  2
call    5 never executed
    $$$$$:  143-block  3
        5:  144:        u = (z + y + u) / 10;
        5:  145:        if (!a.empty()){
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0
        5:  146:            a.pop_back();
        5:  146-block  0
call    0 returned 5
        -:  147:        }
        5:  148:        if (!b.empty()){
        5:  148-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0
        5:  149:            b.pop_back();
        5:  149-block  0
call    0 returned 5
        -:  150:        }
        -:  151:    }
        1:  152:    if(u == 1){
        1:  152-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  153:        ans.push_back('1');
    %%%%%:  153-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  154:    }
        1:  155:    reverse(ans.begin(), ans.end());
        1:  155-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        -:  156:
        1:  157:    ret.value = ans;
        1:  157-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  158:    ret.sign = 1;
        1:  159:    ret.precision = x_c.precision;
        2:  160:    return ret;
        1:  160-block  0
        1:  160-block  1
        1:  161:}
        1:  161-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
    $$$$$:  161-block  1
call    5 never executed
    $$$$$:  161-block  2
call    6 never executed
    $$$$$:  161-block  3
call    7 never executed
    $$$$$:  161-block  4
call    8 never executed
    $$$$$:  161-block  5
call    9 never executed
    $$$$$:  161-block  6
call   10 never executed
        -:  162:
        -:  163://returns long number that equals difference of absolute values of this Lnum::LongNumber and Lnum::LongNumber x
function _ZNK4Lnum10LongNumber8diff_absES0_ called 4512 returned 100% blocks executed 76%
     4512:  164:Lnum::LongNumber Lnum::LongNumber::diff_abs(Lnum::LongNumber x) const{
     4512:  165:    Lnum::LongNumber ret;
     4512:  165-block  0
call    0 returned 4512
branch  1 taken 4512 (fallthrough)
branch  2 taken 0 (throw)
     4512:  166:    Lnum::LongNumber this_c = (*this).promote_precision(x);
     4512:  166-block  0
call    0 returned 4512
branch  1 taken 4512 (fallthrough)
branch  2 taken 0 (throw)
     4512:  167:    Lnum::LongNumber x_c = x.promote_precision(*this);
     4512:  167-block  0
call    0 returned 4512
branch  1 taken 4512 (fallthrough)
branch  2 taken 0 (throw)
        -:  168:
     4512:  169:    int u = 0;
     4512:  170:    std::string a = this_c.value;
     4512:  170-block  0
call    0 returned 4512
branch  1 taken 4512 (fallthrough)
branch  2 taken 0 (throw)
     4512:  171:    std::string b = x_c.value;
     4512:  171-block  0
call    0 returned 4512
branch  1 taken 4512 (fallthrough)
branch  2 taken 0 (throw)
     4512:  172:    std::string ans;
     4512:  172-block  0
call    0 returned 4512
    19962:  173:    while(!a.empty() || !b.empty()){
    19962:  173-block  0
call    0 returned 19962
branch  1 taken 4512 (fallthrough)
branch  2 taken 15450
     4512:  173-block  1
call    3 returned 4512
branch  4 taken 0 (fallthrough)
branch  5 taken 4512
    15450:  173-block  2
     4512:  173-block  3
    19962:  173-block  4
branch  6 taken 15450
branch  7 taken 4512 (fallthrough)
   15450*:  174:        int z = !a.empty() ? (a.back() - '0') : 0;
    15450:  174-block  0
call    0 returned 15450
branch  1 taken 15450 (fallthrough)
branch  2 taken 0
    15450:  174-block  1
call    3 returned 15450
    %%%%%:  174-block  2
    15450:  175:        int y = !b.empty() ? (b.back() - '0') : 0;
    15450:  175-block  0
call    0 returned 15450
branch  1 taken 14848 (fallthrough)
branch  2 taken 602
    14848:  175-block  1
call    3 returned 14848
      602:  175-block  2
    15450:  176:        if (z - y - u >= 0) {
    15450:  176-block  0
branch  0 taken 13266 (fallthrough)
branch  1 taken 2184
    13266:  177:            ans += (std::to_string((z - y - u) % 10));
    13266:  177-block  0
call    0 returned 13266
call    1 returned 13266
branch  2 taken 13266 (fallthrough)
branch  3 taken 0 (throw)
    13266:  177-block  1
call    4 returned 13266
    $$$$$:  177-block  2
call    5 never executed
    $$$$$:  177-block  3
    13266:  178:            u = 0;
        -:  179:        } else {
     2184:  180:            ans += (std::to_string((10 + z - y - u) % 10));
     2184:  180-block  0
call    0 returned 2184
call    1 returned 2184
branch  2 taken 2184 (fallthrough)
branch  3 taken 0 (throw)
     2184:  180-block  1
call    4 returned 2184
    $$$$$:  180-block  2
call    5 never executed
    $$$$$:  180-block  3
     2184:  181:            u = 1;
        -:  182:        }
    15450:  183:        if (!a.empty()){
    15450:  183-block  0
call    0 returned 15450
branch  1 taken 15450 (fallthrough)
branch  2 taken 0
    15450:  184:            a.pop_back();
    15450:  184-block  0
call    0 returned 15450
        -:  185:        }
    15450:  186:        if (!b.empty()){
    15450:  186-block  0
call    0 returned 15450
branch  1 taken 14848 (fallthrough)
branch  2 taken 602
    14848:  187:            b.pop_back();
    14848:  187-block  0
call    0 returned 14848
        -:  188:        }
        -:  189:    }
        -:  190:
     5186:  191:    while (!ans.empty() && ans.back() == '0') {
     4512:  191-block  0
     5186:  191-block  1
call    0 returned 5186
branch  1 taken 5184 (fallthrough)
branch  2 taken 2
     5184:  191-block  2
call    3 returned 5184
branch  4 taken 674 (fallthrough)
branch  5 taken 4510
      674:  191-block  3
     4512:  191-block  4
     5186:  191-block  5
branch  6 taken 674
branch  7 taken 4512 (fallthrough)
      674:  192:        ans.pop_back();
      674:  192-block  0
call    0 returned 674
        -:  193:    }
        -:  194:
     4512:  195:    reverse(ans.begin(), ans.end());
     4512:  195-block  0
call    0 returned 4512
call    1 returned 4512
call    2 returned 4512
branch  3 taken 4512 (fallthrough)
branch  4 taken 0 (throw)
        -:  196:
        -:  197:
     4512:  198:    ret.value = ans;
     4512:  198-block  0
call    0 returned 4512
branch  1 taken 4512 (fallthrough)
branch  2 taken 0 (throw)
     4512:  199:    ret.sign = 1;
     4512:  200:    ret.precision = x_c.precision;
     9024:  201:    return ret;
     4512:  201-block  0
     4512:  201-block  1
     4512:  202:}
     4512:  202-block  0
call    0 returned 4512
call    1 returned 4512
call    2 returned 4512
call    3 returned 4512
call    4 returned 4512
    $$$$$:  202-block  1
call    5 never executed
    $$$$$:  202-block  2
call    6 never executed
    $$$$$:  202-block  3
call    7 never executed
    $$$$$:  202-block  4
call    8 never executed
    $$$$$:  202-block  5
call    9 never executed
    $$$$$:  202-block  6
call   10 never executed
        -:  203:
        -:  204://overloaded operator -. returns Lnum::LongNumber -this
function _ZNK4Lnum10LongNumberngEv called 4511 returned 100% blocks executed 83%
     4511:  205:Lnum::LongNumber Lnum::LongNumber::operator-() const {
     4511:  206:    Lnum::LongNumber ret;
     4511:  206-block  0
call    0 returned 4511
     4511:  207:    ret.value = value;
call    0 returned 4511
branch  1 taken 4511 (fallthrough)
branch  2 taken 0 (throw)
     4511:  208:    ret.precision = precision;
     4511:  209:    ret.sign = -sign;
     4511:  210:    return ret;
     4511:  210-block  0
     4511:  210-block  1
    =====:  211:}
    $$$$$:  211-block  0
call    0 never executed
        -:  212:
        -:  213://overloaded operator +. returns Lnum::LongNumber this + y
function _ZNK4Lnum10LongNumberplES0_ called 4513 returned 100% blocks executed 62%
     4513:  214:Lnum::LongNumber Lnum::LongNumber::operator+(Lnum::LongNumber y) const{
     4513:  215:    Lnum::LongNumber ret;
     4513:  215-block  0
call    0 returned 4513
branch  1 taken 4513 (fallthrough)
branch  2 taken 0 (throw)
     4513:  216:    if (sign == y.sign) {
     4513:  216-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 4512
        1:  217:        Lnum::LongNumber sum = sum_abs(y);
        1:  217-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  218:        ret.value = sum.value;
        1:  218-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  219:        ret.precision = sum.precision;
        1:  220:        ret.sign = sign;
        1:  221:    } else {
        1:  221-block  0
call    0 returned 1
    $$$$$:  221-block  1
call    1 never executed
     4512:  222:        if (sign == -1) {
     4512:  222-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 4510
        2:  223:            if ((*this).abs() > y.abs()) {
        2:  223-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:  223-block  1
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
        2:  223-block  2
call    7 returned 2
branch  8 taken 2 (fallthrough)
branch  9 taken 0 (throw)
        2:  223-block  3
call   10 returned 2
call   11 returned 2
call   12 returned 2
branch 13 taken 1 (fallthrough)
branch 14 taken 1
    $$$$$:  223-block  4
call   15 never executed
    $$$$$:  223-block  5
    $$$$$:  223-block  6
call   16 never executed
    $$$$$:  223-block  7
    $$$$$:  223-block  8
        1:  224:                ret.sign = -1;
        1:  224-block  0
        -:  225:            } else {
        1:  226:                ret.sign = 1;
        1:  226-block  0
        -:  227:            }
        -:  228:        } else {
     4510:  229:            if ((*this).abs() > y.abs()) {
     4510:  229-block  0
call    0 returned 4510
call    1 returned 4510
branch  2 taken 4510 (fallthrough)
branch  3 taken 0 (throw)
     4510:  229-block  1
call    4 returned 4510
branch  5 taken 4510 (fallthrough)
branch  6 taken 0 (throw)
     4510:  229-block  2
call    7 returned 4510
branch  8 taken 4510 (fallthrough)
branch  9 taken 0 (throw)
     4510:  229-block  3
call   10 returned 4510
call   11 returned 4510
call   12 returned 4510
branch 13 taken 4508 (fallthrough)
branch 14 taken 2
    $$$$$:  229-block  4
call   15 never executed
    $$$$$:  229-block  5
    $$$$$:  229-block  6
call   16 never executed
    $$$$$:  229-block  7
    $$$$$:  229-block  8
     4508:  230:                ret.sign = 1;
     4508:  230-block  0
        -:  231:            } else {
        2:  232:                ret.sign = -1;
        2:  232-block  0
        -:  233:            }
        -:  234:        }
     4512:  235:        if ((*this).abs() > y.abs()) {
     4512:  235-block  0
call    0 returned 4512
call    1 returned 4512
branch  2 taken 4512 (fallthrough)
branch  3 taken 0 (throw)
     4512:  235-block  1
call    4 returned 4512
branch  5 taken 4512 (fallthrough)
branch  6 taken 0 (throw)
     4512:  235-block  2
call    7 returned 4512
branch  8 taken 4512 (fallthrough)
branch  9 taken 0 (throw)
     4512:  235-block  3
call   10 returned 4512
call   11 returned 4512
call   12 returned 4512
branch 13 taken 4509 (fallthrough)
branch 14 taken 3
    $$$$$:  235-block  4
call   15 never executed
    $$$$$:  235-block  5
    $$$$$:  235-block  6
call   16 never executed
    $$$$$:  235-block  7
    $$$$$:  235-block  8
     4509:  236:            Lnum::LongNumber diff = diff_abs(y);
     4509:  236-block  0
call    0 returned 4509
branch  1 taken 4509 (fallthrough)
branch  2 taken 0 (throw)
     4509:  236-block  1
call    3 returned 4509
branch  4 taken 4509 (fallthrough)
branch  5 taken 0 (throw)
     4509:  236-block  2
call    6 returned 4509
    $$$$$:  236-block  3
call    7 never executed
    $$$$$:  236-block  4
     4509:  237:            ret.value = diff.value;
call    0 returned 4509
branch  1 taken 4509 (fallthrough)
branch  2 taken 0 (throw)
     4509:  238:            ret.precision = diff.precision;
     4509:  239:        } else {
     4509:  239-block  0
call    0 returned 4509
    $$$$$:  239-block  1
call    1 never executed
        3:  240:            Lnum::LongNumber diff = y.diff_abs(*this);
        3:  240-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  240-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3:  240-block  2
call    6 returned 3
    $$$$$:  240-block  3
call    7 never executed
    $$$$$:  240-block  4
        3:  241:            ret.value = diff.value;
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  242:            ret.precision = diff.precision;
        3:  243:        }
        3:  243-block  0
call    0 returned 3
    $$$$$:  243-block  1
call    1 never executed
        -:  244:    }
     4513:  245:    if (ret.value.empty()) {
     4513:  245-block  0
call    0 returned 4513
branch  1 taken 2 (fallthrough)
branch  2 taken 4511
        2:  246:        ret.value = "0";
        2:  246-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:  247:    }
     4513:  248:    std::string add;
     4513:  248-block  0
call    0 returned 4513
     4513:  249:    if (ret.precision > ret.value.size()) {
call    0 returned 4513
branch  1 taken 10 (fallthrough)
branch  2 taken 4503
       38:  250:        for(int i = 0;  i < ret.precision - ret.value.size() + 1; i++) {
       10:  250-block  0
       28:  250-block  1
       38:  250-block  2
call    0 returned 38
branch  1 taken 28
branch  2 taken 10 (fallthrough)
       28:  251:            add.push_back('0');
       28:  251-block  0
call    0 returned 28
branch  1 taken 28 (fallthrough)
branch  2 taken 0 (throw)
        -:  252:        }
        -:  253:    }
     4513:  254:    ret.value = add + ret.value;
     4513:  254-block  0
call    0 returned 4513
branch  1 taken 4513 (fallthrough)
branch  2 taken 0 (throw)
     4513:  254-block  1
call    3 returned 4513
call    4 returned 4513
    $$$$$:  254-block  2
     9026:  255:    return ret;
     4513:  255-block  0
     4513:  256:}
     4513:  256-block  0
call    0 returned 4513
    $$$$$:  256-block  1
call    1 never executed
    $$$$$:  256-block  2
call    2 never executed
        -:  257:
        -:  258://overloaded operator -. returns Lnum::LongNumber this - y
function _ZNK4Lnum10LongNumbermiERKS0_ called 4507 returned 100% blocks executed 60%
     4507:  259:Lnum::LongNumber Lnum::LongNumber::operator-(const Lnum::LongNumber& y) const{
     4507:  260:    Lnum::LongNumber ret;
     4507:  260-block  0
call    0 returned 4507
branch  1 taken 4507 (fallthrough)
branch  2 taken 0 (throw)
     4507:  261:    Lnum::LongNumber sum = (*this) + (-y);
     4507:  261-block  0
call    0 returned 4507
branch  1 taken 4507 (fallthrough)
branch  2 taken 0 (throw)
     4507:  261-block  1
call    3 returned 4507
branch  4 taken 4507 (fallthrough)
branch  5 taken 0 (throw)
     4507:  261-block  2
call    6 returned 4507
    $$$$$:  261-block  3
call    7 never executed
    $$$$$:  261-block  4
     4507:  262:    if (sum.value.empty()) {
call    0 returned 4507
branch  1 taken 0 (fallthrough)
branch  2 taken 4507
    #####:  263:        ret.value = "0";
    %%%%%:  263-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  264:    } else {
     4507:  265:        ret.value = sum.value;
     4507:  265-block  0
call    0 returned 4507
branch  1 taken 4507 (fallthrough)
branch  2 taken 0 (throw)
        -:  266:    }
     4507:  267:    ret.precision = sum.precision;
     4507:  268:    ret.sign = sum.sign;
     9014:  269:    return ret;
     4507:  269-block  0
     4507:  269-block  1
     4507:  270:}
     4507:  270-block  0
call    0 returned 4507
    $$$$$:  270-block  1
call    1 never executed
    $$$$$:  270-block  2
call    2 never executed
        -:  271:
        -:  272://overloaded operator *. returns Lnum::LongNumber this * y
function _ZNK4Lnum10LongNumbermlERKS0_ called 9 returned 100% blocks executed 100%
        9:  273:Lnum::LongNumber Lnum::LongNumber::operator*(const Lnum::LongNumber& y) const{
        9:  274:    Lnum::LongNumber prod = simple_mult((*this), y);
        9:  274-block  0
call    0 returned 9
        9:  275:    return prod;
        -:  276:}
        -:  277:
        -:  278://returns Lnum::LongNumber this as a string
function _ZNK4Lnum10LongNumber9to_stringB5cxx11Ev called 11 returned 100% blocks executed 95%
       11:  279:std::string Lnum::LongNumber::to_string() const{
       11:  280:    std::string ret;
       11:  280-block  0
call    0 returned 11
       11:  281:    if (sign == -1) {
branch  0 taken 3 (fallthrough)
branch  1 taken 8
        3:  282:        ret.push_back('-');
        3:  282-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -:  283:    }
        -:  284:
       29:  285:    for(int i = 0; i < value.size() - precision; ++i) {
       11:  285-block  0
       18:  285-block  1
       29:  285-block  2
call    0 returned 29
branch  1 taken 18
branch  2 taken 11 (fallthrough)
       18:  286:        ret.push_back(value[i]);
       18:  286-block  0
call    0 returned 18
call    1 returned 18
branch  2 taken 18 (fallthrough)
branch  3 taken 0 (throw)
        -:  287:    }
       11:  288:    if (precision > 0){
       11:  288-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 1
       10:  289:        ret.push_back('.');
       10:  289-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
        -:  290:    }
      263:  291:    for(size_t i = value.size() - precision; i < value.size(); ++i) {
       11:  291-block  0
call    0 returned 11
      252:  291-block  1
      263:  291-block  2
call    1 returned 263
branch  2 taken 252
branch  3 taken 11 (fallthrough)
      252:  292:        ret.push_back(value[i]);
      252:  292-block  0
call    0 returned 252
call    1 returned 252
branch  2 taken 252 (fallthrough)
branch  3 taken 0 (throw)
        -:  293:    }
       11:  294:    return ret;
       11:  294-block  0
       11:  294-block  1
    =====:  295:}
    $$$$$:  295-block  0
call    0 never executed
        -:  296:
        -:  297://default constructor. creates Lnum::LongNumber 0;
function _ZN4Lnum10LongNumberC2Ev called 45153 returned 100% blocks executed 80%
    45153:  298:Lnum::LongNumber::LongNumber(){
    45153:  298-block  0
call    0 returned 45153
    45153:  299:    value = "0";
call    0 returned 45153
branch  1 taken 45153 (fallthrough)
branch  2 taken 0 (throw)
    45153:  300:    sign = 1;
    45153:  301:    precision = 0;
    45153:  302:}
    45153:  302-block  0
    $$$$$:  302-block  1
call    0 never executed
        -:  303:
        -:  304://constructor from int. creates Lnum::LongNumber that equals x;
function _ZN4Lnum10LongNumberC2Ei called 2896 returned 100% blocks executed 69%
     2896:  305:Lnum::LongNumber::LongNumber(int x) {
     2896:  305-block  0
call    0 returned 2896
     2896:  306:    std::string s = std::to_string(std::abs(x));
call    0 returned 2896
     2896:  307:    sign = (x > 0 ? 1 : -1);
branch  0 taken 291 (fallthrough)
branch  1 taken 2605
      291:  307-block  0
     2605:  307-block  1
     2896:  308:    precision = 0;
     2896:  309:    value = s;
     2896:  309-block  0
call    0 returned 2896
branch  1 taken 2896 (fallthrough)
branch  2 taken 0 (throw)
     2896:  310:}
     2896:  310-block  0
call    0 returned 2896
    $$$$$:  310-block  1
call    1 never executed
    $$$$$:  310-block  2
call    2 never executed
        -:  311:
        -:  312://constructor from double. creates long number that equals x;
function _ZN4Lnum10LongNumberC2Ee called 4 returned 100% blocks executed 77%
        4:  313:Lnum::LongNumber::LongNumber(long double x) {
        4:  313-block  0
call    0 returned 4
        4:  314:    std::string s = std::to_string(x);
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:  315:    int i = 0;
        4:  316:    bool flag_point = false;
        4:  317:    int after_point = 0;
        4:  318:    std::string ret;
        4:  318-block  0
call    0 returned 4
        -:  319:
        4:  320:    if (s[0] == '-') {
call    0 returned 4
branch  1 taken 0 (fallthrough)
branch  2 taken 4
    #####:  321:        sign = -1;
    #####:  322:        i++;
    %%%%%:  322-block  0
        -:  323:    } else {
        4:  324:        sign = 1;
        4:  324-block  0
        -:  325:    }
        -:  326:
       43:  327:    while (i < s.size()) {
        4:  327-block  0
       43:  327-block  1
call    0 returned 43
branch  1 taken 39
branch  2 taken 4 (fallthrough)
       39:  328:        if (s[i] == '.') {
       39:  328-block  0
call    0 returned 39
branch  1 taken 4 (fallthrough)
branch  2 taken 35
        4:  329:            flag_point = true;
        4:  329-block  0
        -:  330:        }
        -:  331:
       39:  332:        if (isdigit(s[i])) {
       39:  332-block  0
call    0 returned 39
branch  1 taken 35 (fallthrough)
branch  2 taken 4
       35:  333:            ret.push_back(s[i]);
       35:  333-block  0
call    0 returned 35
call    1 returned 35
branch  2 taken 35 (fallthrough)
branch  3 taken 0 (throw)
        -:  334:
       35:  335:            if (flag_point) {
       35:  335-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 11
       24:  336:                after_point++;
       24:  336-block  0
        -:  337:            }
        -:  338:        }
       39:  339:        i++;
       39:  339-block  0
        -:  340:    }
        -:  341:
        4:  342:    precision = after_point;
        4:  343:    value = ret;
        4:  343-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:  344:}
        4:  344-block  0
call    0 returned 4
call    1 returned 4
    $$$$$:  344-block  1
call    2 never executed
    $$$$$:  344-block  2
call    3 never executed
    $$$$$:  344-block  3
call    4 never executed
        -:  345:
        -:  346://constructor from string. creates long number that equals x;
function _ZN4Lnum10LongNumberC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 96 returned 100% blocks executed 85%
       96:  347:Lnum::LongNumber::LongNumber(std::string x) {
       96:  347-block  0
call    0 returned 96
       96:  348:    int i = 0;
       96:  349:    bool flag_point = false;
       96:  350:    int after_point = 0;
       96:  351:    std::string ret;
call    0 returned 96
        -:  352:
       96:  353:    if (x[0] == '-') {
call    0 returned 96
branch  1 taken 17 (fallthrough)
branch  2 taken 79
       17:  354:        sign = -1;
       17:  355:        i++;
       17:  355-block  0
        -:  356:    } else {
       79:  357:        sign = 1;
       79:  357-block  0
        -:  358:    }
        -:  359:
      997:  360:    while (i < x.size()) {
       96:  360-block  0
      997:  360-block  1
call    0 returned 997
branch  1 taken 901
branch  2 taken 96 (fallthrough)
      901:  361:        if (x[i] == '.') {
      901:  361-block  0
call    0 returned 901
branch  1 taken 82 (fallthrough)
branch  2 taken 819
       82:  362:            flag_point = true;
       82:  362-block  0
        -:  363:        }
        -:  364:
      901:  365:        if (isdigit(x[i])) {
      901:  365-block  0
call    0 returned 901
branch  1 taken 819 (fallthrough)
branch  2 taken 82
      819:  366:            ret.push_back(x[i]);
      819:  366-block  0
call    0 returned 819
call    1 returned 819
branch  2 taken 819 (fallthrough)
branch  3 taken 0 (throw)
        -:  367:
      819:  368:            if (flag_point) {
      819:  368-block  0
branch  0 taken 588 (fallthrough)
branch  1 taken 231
      588:  369:                after_point++;
      588:  369-block  0
        -:  370:            }
        -:  371:        }
      901:  372:        i++;
      901:  372-block  0
        -:  373:    }
        -:  374:
       96:  375:    precision = after_point;
       96:  376:    value = ret;
       96:  376-block  0
call    0 returned 96
branch  1 taken 96 (fallthrough)
branch  2 taken 0 (throw)
       96:  377:}
       96:  377-block  0
call    0 returned 96
    $$$$$:  377-block  1
call    1 never executed
    $$$$$:  377-block  2
call    2 never executed
        -:  378:
        -:  379://simple multiplication with complexity o(x^2). returns Lnum::LongNumber = x * y
function _ZN4Lnum10LongNumber11simple_multERKS0_S2_ called 17 returned 100% blocks executed 78%
       17:  380:Lnum::LongNumber Lnum::LongNumber::simple_mult(const Lnum::LongNumber& x, const Lnum::LongNumber& y){
       17:  381:    std::string a = x.value;
       17:  381-block  0
call    0 returned 17
branch  1 taken 17 (fallthrough)
branch  2 taken 0 (throw)
       17:  382:    std::string b = y.value;
       17:  382-block  0
call    0 returned 17
branch  1 taken 17 (fallthrough)
branch  2 taken 0 (throw)
        -:  383:
       17:  384:    int u = -1;
       18:  385:    while (a[u + 1] == '0') {
       17:  385-block  0
       18:  385-block  1
call    0 returned 18
branch  1 taken 1
branch  2 taken 17 (fallthrough)
        1:  386:        u++;
        1:  386-block  0
        -:  387:    }
        -:  388:
       17:  389:    if (u != -1) {
       17:  389-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 16
        1:  390:        a = a.substr(u + 1, a.size() - u - 1);
        1:  390-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  390-block  1
call    4 returned 1
call    5 returned 1
    $$$$$:  390-block  2
        -:  391:    }
        -:  392:
       17:  393:    u = -1;
       42:  394:    while (b[u + 1] == '0') {
       17:  394-block  0
       42:  394-block  1
call    0 returned 42
branch  1 taken 25
branch  2 taken 17 (fallthrough)
       25:  395:        u++;
       25:  395-block  0
        -:  396:    }
        -:  397:
       17:  398:    if (u != -1) {
       17:  398-block  0
branch  0 taken 11 (fallthrough)
branch  1 taken 6
       11:  399:        b = b.substr(u + 1, b.size() - u - 1);
       11:  399-block  0
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0 (throw)
       11:  399-block  1
call    4 returned 11
call    5 returned 11
    $$$$$:  399-block  2
        -:  400:    }
        -:  401:
      17*:  402:    if (a == "0" || b == "0") {
       17:  402-block  0
call    0 returned 17
branch  1 taken 17 (fallthrough)
branch  2 taken 0 (throw)
       17:  402-block  1
branch  3 taken 17 (fallthrough)
branch  4 taken 0
       17:  402-block  2
call    5 returned 17
branch  6 taken 17 (fallthrough)
branch  7 taken 0 (throw)
       17:  402-block  3
branch  8 taken 0 (fallthrough)
branch  9 taken 17
    %%%%%:  402-block  4
       17:  402-block  5
       17:  402-block  6
branch 10 taken 0 (fallthrough)
branch 11 taken 17
    #####:  403:        Lnum::LongNumber ret;
    %%%%%:  403-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  404:        ret.sign = 1;
    #####:  405:        ret.precision = 0;
    #####:  406:        ret.value = "0";
    %%%%%:  406-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  407:        return ret;
    %%%%%:  407-block  0
call    0 never executed
    #####:  408:    } else {
call    0 never executed
    $$$$$:  408-block  0
call    1 never executed
       17:  409:        std::string c(a.size() + b.size(), '0');
       17:  409-block  0
call    0 returned 17
call    1 returned 17
call    2 returned 17
branch  3 taken 17 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$:  409-block  1
        -:  410:
       17:  411:        reverse(a.begin(), a.end());
       17:  411-block  0
call    0 returned 17
call    1 returned 17
call    2 returned 17
branch  3 taken 17 (fallthrough)
branch  4 taken 0 (throw)
       17:  412:        reverse(b.begin(), b.end());
       17:  412-block  0
call    0 returned 17
call    1 returned 17
call    2 returned 17
branch  3 taken 17 (fallthrough)
branch  4 taken 0 (throw)
        -:  413:
        -:  414:
      126:  415:        for (int i = 0; i < a.size(); ++i) {
       17:  415-block  0
      109:  415-block  1
      126:  415-block  2
call    0 returned 126
branch  1 taken 109
branch  2 taken 17 (fallthrough)
     1736:  416:            for (int j = 0, carry = 0; j < b.size() || carry > 0; ++j) {
      109:  416-block  0
     1736:  416-block  1
call    0 returned 1736
branch  1 taken 131 (fallthrough)
branch  2 taken 1605
      131:  416-block  2
branch  3 taken 22 (fallthrough)
branch  4 taken 109
     1627:  416-block  3
      109:  416-block  4
     1736:  416-block  5
branch  5 taken 1627
branch  6 taken 109 (fallthrough)
     1627:  417:                int cur = (c[i + j] - '0') + (a[i] - '0') * (j < b.size() ? b[j] - '0' : 0) + carry;
     1627:  417-block  0
call    0 returned 1627
call    1 returned 1627
call    2 returned 1627
branch  3 taken 1605 (fallthrough)
branch  4 taken 22
     1605:  417-block  1
call    5 returned 1605
       22:  417-block  2
     1627:  418:                c[i + j] = cur % 10 + '0';
     1627:  418-block  0
call    0 returned 1627
     1627:  419:                carry = cur / 10;
        -:  420:            }
        -:  421:        }
        -:  422:
       41:  423:        while (c.size() > 1 && c.back() == '0') {
       17:  423-block  0
       41:  423-block  1
call    0 returned 41
branch  1 taken 37 (fallthrough)
branch  2 taken 4
       37:  423-block  2
call    3 returned 37
branch  4 taken 24 (fallthrough)
branch  5 taken 13
       24:  423-block  3
       17:  423-block  4
       41:  423-block  5
branch  6 taken 24
branch  7 taken 17 (fallthrough)
       24:  424:            c.pop_back();
       24:  424-block  0
call    0 returned 24
        -:  425:        }
        -:  426:
       17:  427:        reverse(c.begin(), c.end());
       17:  427-block  0
call    0 returned 17
call    1 returned 17
call    2 returned 17
branch  3 taken 17 (fallthrough)
branch  4 taken 0 (throw)
        -:  428:
       17:  429:        Lnum::LongNumber ret;
       17:  429-block  0
call    0 returned 17
branch  1 taken 17 (fallthrough)
branch  2 taken 0 (throw)
       17:  430:        ret.sign = x.sign * y.sign;
       17:  431:        ret.precision = x.precision + y.precision;
       17:  432:        ret.value = c;
       17:  432-block  0
call    0 returned 17
branch  1 taken 17 (fallthrough)
branch  2 taken 0 (throw)
        -:  433:
       17:  434:        if (ret.precision >= ret.value.size()) {
       17:  434-block  0
call    0 returned 17
branch  1 taken 7 (fallthrough)
branch  2 taken 10
        7:  435:            std::string add;
        7:  435-block  0
call    0 returned 7
       21:  436:            for (int i = 0; i < (ret.precision - ret.value.size() + 1); ++i) {
       14:  436-block  0
       21:  436-block  1
call    0 returned 21
branch  1 taken 14
branch  2 taken 7 (fallthrough)
       14:  437:                add.push_back('0');
       14:  437-block  0
call    0 returned 14
branch  1 taken 14 (fallthrough)
branch  2 taken 0 (throw)
        -:  438:            }
        7:  439:            ret.value = add + ret.value;
        7:  439-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  439-block  1
call    3 returned 7
call    4 returned 7
    $$$$$:  439-block  2
        7:  440:        }
call    0 returned 7
    $$$$$:  440-block  0
call    1 never executed
        -:  441:
       17:  442:        return ret;
       17:  442-block  0
call    0 returned 17
       17:  443:    }
call    0 returned 17
call    1 returned 17
    $$$$$:  443-block  0
call    2 never executed
    $$$$$:  443-block  1
call    3 never executed
       17:  444:}
       17:  444-block  0
call    0 returned 17
call    1 returned 17
    $$$$$:  444-block  1
call    2 never executed
    $$$$$:  444-block  2
call    3 never executed
        -:  445:
        -:  446://returns Lnum::LongNumbers that is reverse of given Lnum::LongNumber with given precision.
        -:  447://complexity is o(n^3)
function _ZN4Lnum10LongNumber11get_reverseERKS0_i called 8 returned 100% blocks executed 72%
        8:  448:Lnum::LongNumber Lnum::LongNumber::get_reverse(const Lnum::LongNumber& x, const int prec){
        8:  449:    if (x.value == "0") {
        8:  449-block  0
call    0 returned 8
branch  1 taken 1 (fallthrough)
branch  2 taken 7
        1:  450:        std::cout << "Warning! Division by zero!" << std::endl;
        1:  450-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  450-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  451:        Lnum::LongNumber res;
        1:  451-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  452:        res.value = "0";
        1:  452-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  453:        res.sign = 1;
        1:  454:        res.precision = 0;
        1:  455:        return res;
        1:  455-block  0
call    0 returned 1
        1:  456:    } else {
call    0 returned 1
    $$$$$:  456-block  0
call    1 never executed
        7:  457:        int res_sign = x.sign;
        7:  458:        std::string ans;
        7:  458-block  0
call    0 returned 7
        -:  459:
        7:  460:        Lnum::LongNumber int_x = x;
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  461:        int_x.sign = 1;
        -:  462:
        7:  463:        Lnum::LongNumber cur;
        7:  463-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  464:        cur.value = "1";
        7:  464-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        -:  465:
        7:  466:        int q = 0;
        7:  467:        int delta = 0;
       10:  468:        while (int_x.value[q] == '0') {
        7:  468-block  0
       10:  468-block  1
call    0 returned 10
branch  1 taken 3
branch  2 taken 7 (fallthrough)
        3:  469:            q++;
        3:  469-block  0
        -:  470:        }
        -:  471:
        7:  472:        if (q > 0) {
        7:  472-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 6
        1:  473:            std::string new_val;
        1:  473-block  0
call    0 returned 1
        -:  474:
        2:  475:            for (int i = q; i < int_x.value.size(); i++) {
        1:  475-block  0
        2:  475-block  1
call    0 returned 2
branch  1 taken 1
branch  2 taken 1 (fallthrough)
        1:  476:                new_val.push_back(int_x.value[i]);
        1:  476-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -:  477:            }
        1:  478:            delta = q;
        1:  479:            int_x.precision = int_x.value.size() - q - 1;
        1:  479-block  0
call    0 returned 1
        1:  480:            int_x.value = new_val;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  481:        }
        1:  481-block  0
call    0 returned 1
    $$$$$:  481-block  1
call    1 never executed
        -:  482:
        7:  483:        int delta_cur = 0;
       21:  484:        while (cur < int_x) {
        7:  484-block  0
       21:  484-block  1
call    0 returned 21
call    1 returned 21
branch  2 taken 21 (fallthrough)
branch  3 taken 0 (throw)
       21:  484-block  2
call    4 returned 21
branch  5 taken 14
branch  6 taken 7 (fallthrough)
    $$$$$:  484-block  3
       14:  485:            cur.value.push_back('0');
       14:  485-block  0
call    0 returned 14
branch  1 taken 14 (fallthrough)
branch  2 taken 0 (throw)
       14:  486:            delta_cur++;
       14:  486-block  0
        -:  487:        }
        -:  488:
        7:  489:        int tot_dig = 0;
        7:  490:        int shift = delta - delta_cur;
        -:  491://        std::cout << shift << std::endl;
      324:  492:        while (cur > LongNumber(0) && tot_dig < prec + 1) {
        7:  492-block  0
      324:  492-block  1
call    0 returned 324
call    1 returned 324
branch  2 taken 324 (fallthrough)
branch  3 taken 0 (throw)
      324:  492-block  2
call    4 returned 324
branch  5 taken 324 (fallthrough)
branch  6 taken 0 (throw)
      324:  492-block  3
call    7 returned 324
branch  8 taken 324 (fallthrough)
branch  9 taken 0
      324:  492-block  4
branch 10 taken 317 (fallthrough)
branch 11 taken 7
      317:  492-block  5
        7:  492-block  6
      324:  492-block  7
branch 12 taken 324 (fallthrough)
branch 13 taken 0
      324:  492-block  8
call   14 returned 324
      324:  492-block  9
branch 15 taken 317
branch 16 taken 7 (fallthrough)
    $$$$$:  492-block 10
branch 17 never executed (fallthrough)
branch 18 never executed
    $$$$$:  492-block 11
call   19 never executed
    $$$$$:  492-block 12
    $$$$$:  492-block 13
      317:  493:                int mul = 0;
        -:  494:
     2569:  495:                while (cur > int_x && cur - int_x >= LongNumber(0)) {
      317:  495-block  0
     2569:  495-block  1
call    0 returned 2569
call    1 returned 2569
branch  2 taken 2569 (fallthrough)
branch  3 taken 0 (throw)
     2569:  495-block  2
call    4 returned 2569
branch  5 taken 2252 (fallthrough)
branch  6 taken 317
     2252:  495-block  3
call    7 returned 2252
call    8 returned 2252
branch  9 taken 2252 (fallthrough)
branch 10 taken 0 (throw)
     2252:  495-block  4
call   11 returned 2252
branch 12 taken 2252 (fallthrough)
branch 13 taken 0 (throw)
     2252:  495-block  5
call   14 returned 2252
branch 15 taken 2252 (fallthrough)
branch 16 taken 0 (throw)
     2252:  495-block  6
call   17 returned 2252
branch 18 taken 2252 (fallthrough)
branch 19 taken 0
     2252:  495-block  7
      317:  495-block  8
     2569:  495-block  9
branch 20 taken 2252 (fallthrough)
branch 21 taken 317
     2252:  495-block 10
call   22 returned 2252
     2569:  495-block 11
branch 23 taken 2252 (fallthrough)
branch 24 taken 317
     2252:  495-block 12
call   25 returned 2252
     2569:  495-block 13
branch 26 taken 2252
branch 27 taken 317 (fallthrough)
    $$$$$:  495-block 14
branch 28 never executed (fallthrough)
branch 29 never executed
    $$$$$:  495-block 15
call   30 never executed
    $$$$$:  495-block 16
    $$$$$:  495-block 17
branch 31 never executed (fallthrough)
branch 32 never executed
    $$$$$:  495-block 18
call   33 never executed
    $$$$$:  495-block 19
    $$$$$:  495-block 20
    $$$$$:  495-block 21
     2252:  496:                    ++mul;
        -:  497://                    std::cout << cur.to_string() <<  " " << int_x.to_string() << " " << (cur - int_x).to_string() << std::endl;
     2252:  498:                    cur = cur - int_x;
     2252:  498-block  0
call    0 returned 2252
branch  1 taken 2252 (fallthrough)
branch  2 taken 0 (throw)
     2252:  498-block  1
call    3 returned 2252
call    4 returned 2252
    $$$$$:  498-block  2
        -:  499:                }
      317:  500:                ans += Lnum::LongNumber(mul).value;
      317:  500-block  0
call    0 returned 317
branch  1 taken 317 (fallthrough)
branch  2 taken 0 (throw)
      317:  500-block  1
call    3 returned 317
branch  4 taken 317 (fallthrough)
branch  5 taken 0 (throw)
      317:  500-block  2
call    6 returned 317
    $$$$$:  500-block  3
call    7 never executed
    $$$$$:  500-block  4
      317:  501:                cur.value.push_back('0');
call    0 returned 317
branch  1 taken 317 (fallthrough)
branch  2 taken 0 (throw)
        -:  502://                std::cout << "2)" << int_x.to_string() << " " << cur.to_string() << std::endl;
      317:  503:                tot_dig++;
        -:  504:
      317:  505:                int f1 = 1;
     1556:  506:                for(int  i = 0; i < cur.value.size(); i++) {
      317:  506-block  0
     1239:  506-block  1
     1556:  506-block  2
call    0 returned 1556
branch  1 taken 1239
branch  2 taken 317 (fallthrough)
     1239:  507:                    if (cur.value[i] != '0') {
     1239:  507-block  0
call    0 returned 1239
branch  1 taken 538 (fallthrough)
branch  2 taken 701
      538:  508:                        f1 = 0;
      538:  508-block  0
        -:  509:                    }
        -:  510:                }
      317:  511:                if (f1 == 1) {
      317:  511-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 317
    #####:  512:                    while (cur.value.back()) {
    %%%%%:  512-block  0
    %%%%%:  512-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####:  513:                        cur.value.pop_back();
    %%%%%:  513-block  0
call    0 never executed
        -:  514:                    }
    #####:  515:                    cur.value.push_back('0');
    %%%%%:  515-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  516:                }
        -:  517:        }
        -:  518://        std::cout << ans << std::endl;
        7:  519:        Lnum::LongNumber res;
        7:  519-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  520:        res.value = ans;
        7:  520-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  521:        res.sign = res_sign;
        7:  522:        std::string add;
        7:  522-block  0
call    0 returned 7
        -:  523:
        7:  524:        res.precision = std::max(prec, (int)ans.size() - 1);
call    0 returned 7
call    1 returned 7
        7:  525:        if (shift > 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 6
        4:  526:            for (int i = 0; i < shift; i++) {
        1:  526-block  0
        3:  526-block  1
        4:  526-block  2
branch  0 taken 3
branch  1 taken 1 (fallthrough)
        3:  527:                add.push_back('0');
        3:  527-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -:  528:            }
        1:  529:            res.value = ans + add;
        1:  529-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  529-block  1
call    3 returned 1
call    4 returned 1
    $$$$$:  529-block  2
        6:  530:        } else if (shift < 0) {
        6:  530-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 1
        -:  531:
        5:  532:            res.precision -= shift;
        5:  533:            int t = 0;
        5:  534:            if (res.precision > ans.size() - 1) {
        5:  534-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0
        5:  535:                std::string add1;
        5:  535-block  0
call    0 returned 5
       19:  536:                for (int i = 0; i < res.precision - ans.size() + 1; i++) {
       14:  536-block  0
       19:  536-block  1
call    0 returned 19
branch  1 taken 14
branch  2 taken 5 (fallthrough)
       14:  537:                    add1.push_back('0');
       14:  537-block  0
call    0 returned 14
branch  1 taken 14 (fallthrough)
branch  2 taken 0 (throw)
        -:  538:                }
        5:  539:                res.value = add1 + res.value;
        5:  539-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:  539-block  1
call    3 returned 5
call    4 returned 5
    $$$$$:  539-block  2
        5:  540:            }
call    0 returned 5
    $$$$$:  540-block  0
call    1 never executed
        -:  541:        }
        -:  542:
        7:  543:        return res;
        7:  543-block  0
call    0 returned 7
        7:  544:    }
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
    $$$$$:  544-block  0
call    5 never executed
    $$$$$:  544-block  1
call    6 never executed
    $$$$$:  544-block  2
call    7 never executed
    $$$$$:  544-block  3
call    8 never executed
    $$$$$:  544-block  4
call    9 never executed
        -:  545:}
        -:  546:
function _ZN4Lnum10LongNumber8mult_modERKS0_Ri called 2 returned 100% blocks executed 100%
        2:  547:Lnum::LongNumber Lnum::LongNumber::mult_mod(const Lnum::LongNumber& y, int &mod) {
        2:  548:    Lnum::LongNumber ans = (*this) * y;
        2:  548-block  0
call    0 returned 2
        3:  549:    while (ans.precision > mod) {
        3:  549-block  0
branch  0 taken 1
branch  1 taken 2 (fallthrough)
        1:  550:        ans.value.pop_back();
        1:  550-block  0
call    0 returned 1
        1:  551:        --ans.precision;
        -:  552:    }
        2:  553:    return ans;
        2:  553-block  0
        -:  554:}
        -:  555:
function _ZN4Lnum10LongNumber7div_modERKS0_Ri called 1 returned 100% blocks executed 76%
        1:  556:Lnum::LongNumber Lnum::LongNumber::div_mod(const Lnum::LongNumber& y, int &mod) {
        1:  557:    Lnum::LongNumber int_y = y;
        1:  557-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  558:    int_y.sign = 1;
        -:  559:
        1:  560:    LongNumber rev_y = get_reverse(int_y, mod);
        1:  560-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  561:    LongNumber rel = simple_mult((*this), rev_y);
        1:  561-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  562:
        5:  563:    while (rel.precision > mod) {
        1:  563-block  0
        5:  563-block  1
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  564:        rel.value.pop_back();
        4:  564-block  0
call    0 returned 4
        4:  565:        --rel.precision;
        -:  566:    }
        2:  567:    return rel;
        1:  567-block  0
        1:  567-block  1
        1:  568:}
        1:  568-block  0
call    0 returned 1
call    1 returned 1
    $$$$$:  568-block  1
call    2 never executed
    $$$$$:  568-block  2
call    3 never executed
        -:  569:
        -:  570://overloaded operator /. returns Lnum::LongNumber this / y
function _ZNK4Lnum10LongNumberdvERKS0_ called 7 returned 100% blocks executed 69%
        7:  571:Lnum::LongNumber Lnum::LongNumber::operator/(const Lnum::LongNumber& y) const{
        -:  572:
        7:  573:    Lnum::LongNumber int_y = y;
        7:  573-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  574:    int_y.sign = 1;
        -:  575:
        7:  576:    LongNumber rev_y = get_reverse(int_y, 50);
        7:  576-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  577:    LongNumber rel = simple_mult(*this, rev_y);
        7:  577-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
       14:  578:    return rel;
        7:  578-block  0
        7:  578-block  1
        7:  579:}
        7:  579-block  0
call    0 returned 7
call    1 returned 7
    $$$$$:  579-block  1
call    2 never executed
    $$$$$:  579-block  2
call    3 never executed
        -:  580:
function _Zli3_lne called 4 returned 100% blocks executed 100%
        4:  581:Lnum::LongNumber operator ""_ln(long double x) {
        4:  582:    Lnum::LongNumber ret = Lnum::LongNumber(x);
        4:  582-block  0
call    0 returned 4
        4:  583:    return ret;
        -:  584:}
